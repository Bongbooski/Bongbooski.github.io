{"meta":{"title":"Booski's programming","subtitle":"A line of code, A piece of Beauty","description":null,"author":"Booski","url":"http://bongbooski.github.io"},"pages":[],"posts":[{"title":"python 파일 다루기","slug":"post17_python-file,directory","date":"2018-04-11T06:38:47.000Z","updated":"2018-04-11T07:36:37.593Z","comments":true,"path":"2018/04/11/post17_python-file,directory/","link":"","permalink":"http://bongbooski.github.io/2018/04/11/post17_python-file,directory/","excerpt":"","text":"파일 다루기파일 목록열기os모듈 사용123456import osprint os.listdir(&apos;.&apos;) #현재 디렉토리의 파일목록printprint os.listdir(&apos;../&apos;) #현재 디렉토리의 부모 디렉토리의 파일 목록 파일 종류 알아보기 os.path 모듈로 파일 종류 판단하여 True, False 반환12345678910111213import osdef filetype(fpath): print fpath, &quot;:&quot;, if os.path.isfile(fpath): print &apos;Regular file&apos; if os.path.isdir(fpath): print &apos;Directory&apos; if os.path.islink(fpath): print &apos;Symbolic link&apos;flist = os.listdir(&apos;.&apos;)for fname in flist: filetype(fname) 파일의 허가권 파일의 허가권 알아보기 os.access(filepath, mode) mode에 들어갈 값 os.F_OK: 파일 자체가 존재하는 것을 테스트 os.R_OK: 읽기 권한이 있는 것을 테스트 os.W_OK: 쓰기 권한이 있는 것을 테스트 os.X_OK: 실행 권한이 있는 것(또는 디렉토리인지)을 테스트 123456789101112131415161718import osdef fileaccess(fpath): print fpath, &apos;:&apos;, if os.access(fpath, os.F_OK): print &apos;Exists&apos;, else: return if os.access(fpath, os.R_OK): print &apos;R&apos;, if os.access(fpath, os.W_OK): print &apos;W&apos;, if os.access(fpath, os.X_OK): print &apos;X&apos;, printflist = os.listdir(&apos;.&apos;)for fname in flist: fileaccess(fname) 파일의 허가권 변경하기 os.chmod(filepath, mode) 12import osos.chmod(&apos;sample.txt&apos;, 0777) 파일 조작하기 파일 이름 변경하기 os.rename(old_filepath, new_filepath) 12345import osos.rename(&apos;t.txt&apos;, &apos;t1.txt&apos;)print os.access(&apos;t.txt&apos;, os.F_OK) # 파일 존재 여부 확인print os.access(&apos;t1.txt&apos;, os.F_OK) 파일 이동하기 os.rename(oldfilepath, new_filepath) 12345import osos.rename(&apos;t.txt&apos;, &apos;example/t1.txt&apos;)# 파일 존재 여부 확인print os.access(&apos;example/t1.txt&apos;, os.F_OK) 파일 복사하기 shutil모듈 활용 shutil.copyfile(src_filepath, dest_filepath) 1234import osimport shutilshutil.copyfile(&apos;sample.txt&apos;, &apos;sample_new.txt&apos;)print os.access(&apos;sample_new.txt&apos;, os.F_OK) 파일 이름 다루기 상대 경로를 절대 경로로 변환하기 os.path.abspath - 상대경로 실제 파일 존재와는 무관하게 절대경로로 변경12import osprint os.path.abspath(&apos;o.txt&apos;) 주어진 경로에 파일이 존재하는지 확인 os.path.exists(filepath) 경로명 분리하기 경로와 파일명으로 분리 1234f = &apos;/Users/booski/git/python/t.txt&apos;print os.path.basename(f) # 파일명만 추출print os.path.dirname(f) # 디렉토리 경로 추출 경로명과 파일명을 한번에 분리 - basename과 dirname을 튜플로 확인 1print os.path.split(f) MS윈도우즈에서 드라이브명과 파일 경로명을 분리 1print os.path.splitdrive(f) 확장자 분리 - 경로와 확장자명으로 튜플 생성 1print os.path.splitext(f)","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://bongbooski.github.io/tags/python/"}]},{"title":"python 표준 입출력","slug":"post16_standardIO","date":"2018-04-10T09:09:17.000Z","updated":"2018-04-10T09:42:21.949Z","comments":true,"path":"2018/04/10/post16_standardIO/","link":"","permalink":"http://bongbooski.github.io/2018/04/10/post16_standardIO/","excerpt":"","text":"sys 모듈의 표준 입출력(모니터) 관련 객체 sys.stdout: 표준 입출력 sys.stderr: 표준 에러 출력 sys.stdin: 표준 입력 표준 출력으로 파일 저장하기12345678910import sysf = open(&apos;t.txt&apos;,&apos;w&apos;)stdout = sys.stdout #표준 출력 저장sys.stdout = f #파일 객체로 표준 출력 변경print &apos;Sample output&apos;pirnt &apos;Good&apos;print &apos;Good&apos;f.close()sys.stdout = stdout #표준 출력 복원","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://bongbooski.github.io/tags/python/"}]},{"title":"python 파일 입출력","slug":"post16_python_fileIO","date":"2018-04-09T06:09:17.000Z","updated":"2018-04-10T14:26:10.730Z","comments":true,"path":"2018/04/09/post16_python_fileIO/","link":"","permalink":"http://bongbooski.github.io/2018/04/09/post16_python_fileIO/","excerpt":"","text":"파일 입출력open내장 함수 사용시 두번째 인자값으로 mode설정생략시 읽기전용(r)으로 설정 r -읽기 전용 - 파일 객체를 읽기 모드로 생성, 파일 포인터를 파일 처음 위치로, 존재하지 않는 파일이면 에러발생 w - 쓰기 전용 - 새로운 파일을 생성하거나 기존 파일의 내용을 다 없애고 쓰기모드로 생성, 파일 포인터를 파일 처음 위치로 a - 파일 끝에 추가 - 이미 존재하는 파일을 쓰기모드로 생성하거나 존재하지 않으면 파일 만들고 생성, 파일 포인터를 마지막 위치에 놓음 이진파일 모드 rb wb ab f.close()처럼 close()로 그때그때 닫아주는 것이 좋음 read()를 사용하면 전체를 다 읽어서 할당함 라인단위로 파일 읽기 for 반복문 활용 123456f = open(&apos;t.txt&apos;)i = 1for line in f: print i, &quot;:&quot;, line, i += 1f.close() readline()-현재의 파일 포인터에서 개행 문자까지 읽음 = 한 라인 12345678f = open(&apos;t.txt&apos;)line = f.readline()i = 1while line: print i, &quot;:&quot;, line, line = f.readline() i += 1f.close() readlines()-각 라인을 모두 읽어서 리스트로 저장, 메모리는 비효율적으로 사용상황별로 다른 동작함 - for in구문: 전체x, 라인별로 가져옴 1234567891011f = open(&apos;t.txt&apos;)print f.readlines() #리스트 나옴#파일 포인터를 맨 앞으로f.seek(0)i = 1for line in f.readlines(): print i, &quot;:&quot;, line, i += 1f.close() xreadlines() - 메모리 비효율 개선 1234567891011f = open(&apos;t.txt&apos;)print f.xreadlines() #파일객체 자체가 나옴#파일 포인터를 맨 앞으로f.seek(0)i = 1for line in f.xreadlines(): print i, &quot;:&quot;, line, i += 1f.close() for in 또는 xreadlines() 추천 라인 단위로 쓰는 방법 writelines() - 라인단위로 쓰기 작업 12345678lines = [&apos;1st line\\n&apos;, &apos;2nd line\\n&apos;, &apos;3rd line\\n&apos;]f = open(&apos;t1.txt&apos;,&apos;w&apos;)f.writelines(lines)f.close()f = open(&apos;t1.txt&apos;)print f.read() #전체내용 읽음f.close() write() - 임의로 중간에 ‘\\n’ 넣어줌 12345678lines = [&apos;1st line&apos;, &apos;2nd line&apos;, &apos;3rd line&apos;]f = open(&apos;t1.txt&apos;,&apos;w&apos;)f.write(&apos;\\n&apos;.join(lines))f.close()f = open(&apos;t1.txt&apos;)print f.read() #전체내용 읽음f.close() 기존 파일에 내용 추가 a모드 사용1234567f = open(&apos;removeme.txt&apos;, &apos;a&apos;)f.write(&apos;3rd line\\n&apos;)f.close()f = open(&apos;removeme.txt&apos;)print f.read()f.close() 파일 내 임의 위치로 접근 순차접근 임의접근 seek(n) - 파일의 가장 첫번째 위치에서 n번째 바이트로 포인터이동 tell() - 파일 내 현재 포인터 위치를 반환 123456789name = &apos;t.txt&apos;f = open(name, &apos;w+&apos;) # 읽고 쓰기모드s = &apos;0123456789asdf&apos;f.write(s)f.seek(5)print f.tell()print f.read(1)print f.tell()","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://bongbooski.github.io/tags/python/"}]},{"title":".gitignore, config파일 사용","slug":"post15_gitignore+config-setting","date":"2018-03-22T06:09:17.000Z","updated":"2018-03-22T06:15:20.191Z","comments":true,"path":"2018/03/22/post15_gitignore+config-setting/","link":"","permalink":"http://bongbooski.github.io/2018/03/22/post15_gitignore+config-setting/","excerpt":"","text":"새노트북여러 프로젝트를 두 노트북에서 함께 진행할 예정인데 새 노트북에 기존 코드들을 넘겨와야함 데이터베이스 비밀번호 등 개인정보가 마음에 걸려서 설정파일로 빼보려고하니 일이 커짐 .gitignore사용한 것과 config폴더, 파일 사용법 포스팅할 예정","categories":[],"tags":[{"name":"github","slug":"github","permalink":"http://bongbooski.github.io/tags/github/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-03-22T06:09:16.793Z","updated":"2018-02-19T08:25:42.000Z","comments":true,"path":"2018/03/22/hello-world/","link":"","permalink":"http://bongbooski.github.io/2018/03/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"node.js 게시판 만들기 첫 포스팅","slug":"post14_nodejs-bulletin-board_kr","date":"2018-03-07T09:09:17.000Z","updated":"2018-03-07T13:14:50.000Z","comments":true,"path":"2018/03/07/post14_nodejs-bulletin-board_kr/","link":"","permalink":"http://bongbooski.github.io/2018/03/07/post14_nodejs-bulletin-board_kr/","excerpt":"","text":"시작node.js의 전반적인 내용을 훑고 공부할 겸 게시판만들기 프로젝트를 시작했다.이것저것 생각하며 만들다보니 영 속도도 안나고 삽질만 하고있지만.. 삽질어제까지 route와 module들을 하나하나 잡으며 고생했는데 알고보니express framework쓰니까 내가 이틀 고생해서 만든 것보다 더 깔끔하고 알찬 형태로구성해 주더라.. local mySQL로컬 mySQL로 database를 연동시키려고 했는데 웬걸, 실행이 안되고 있었다.이전에 일하던 회사에서 익숙해진김에 hediSQL을 사용하는데 로그인이 안됐다. 알고보니 내 컴퓨터의 mySQL서비스가 꺼져있던것!내컴퓨터 - 왼쪽에 있는 내 PC를 우클릭하면 나오는 관리 - 서비스 및 응용 프로그램 - 서비스 - mySQL또는 mySQL56(버전마다 다를듯)을 실행하고나서 다시 hediSQL접속 시도하니까 접속가능! routing 문제게시판 종류를 두 개로 하려다보니 각각의 CRUD용 페이지를 구성하는게 고민이다.어떤 부분을 하나로 쓰고 어떤 부분을 나누는게 가장 효율적일지는 좀더 생각해봐야 할 것 같다.","categories":[],"tags":[{"name":"node.js","slug":"node-js","permalink":"http://bongbooski.github.io/tags/node-js/"}]},{"title":"OKKY세미나 IT회사 탐방기 - 18.02.27","slug":"post13_okky_seminor_kr","date":"2018-02-28T04:48:17.000Z","updated":"2018-03-01T08:04:32.000Z","comments":true,"path":"2018/02/28/post13_okky_seminor_kr/","link":"","permalink":"http://bongbooski.github.io/2018/02/28/post13_okky_seminor_kr/","excerpt":"","text":"TGL경복빌딩의 eBrain에서 있었던 OKKY세미나에 형들과 다녀왔다.마이다스 아이티에서 10년 3개월 5일(?) 일하다가 나오신 황후순님이 세미나를 해주셨고,주제는 IT회사 탐방기 였다. 황후순님의 이력에 대한 간단한 설명을 듣고(안전도 시뮬레이션등을 하는 회사, 인공지능 면접 솔루션 개발 등), 어떻게 많은 회사들을 다녀오실 수 있었는지도말씀해주셨는데,facebook등과 같은 SNS를 활용하신다고 한다. 예를 들면 회사는 내가 누구인지 모르니 나를 알려야 하므로, 그 회사에 다니는 사람 등의게시물에 댓글을 달거나 하는 식으로 인맥을 확장해 나가는 방식!SNS에서 소통하다가 방문하는 방식이라고 한다. 연사님은 개발자로 10년을 일을 하셨는데 퇴사를 하게 된 계기는 두가지라고 했다. 데이터 사이언스, AI 에 흥미가 있었고, TensorFlow 등에서 가져다 쓰는것보다는 직접 개발해보고 싶었다 영어를 활용하는 환경 싱가폴로! 기업탐방 - 해외(싱가폴)싱가폴 페이스북 식당이 좋다, 다양한 종류의 사람들이 있으므로 음식도 종류별로 준비된다. 성과위주이기에 업무에 도움이 되거나 휴식을 위해 음주가 가능하지만 대부분 안함 모니터에 코드만 안찍히면 구경가서 사진촬영도 가능 모든 층이 계단으로 연결되어있고, face to face 를 선호한다 - 전화 잘 안울림 포토존이 많다. 왜..? 면접 길다 - 한두달걸림 기술면접을 분야별로 본다 면접마다 평가해서 회사가 연봉을 측정 통과하면 면접자에게 희망연봉을 묻는다 측정치랑 일치하거나 측정치보다 낮으면 계약서, 측정치보다 높으면 협상일단 한 10억 던지고 협상ㄱㄱ 몸값을 제대로 받아야 일도 제대로함 - 연봉만큼의 일이 들어옴 순수개발자의 비중이 생각보다 작음 - 로컬화 위주이기 때문 WeWork, stashaway(이주원님) 면접 페이스북과 다르다 면접자가 연봉을 먼저 제시하고 그 금액에 맞는 면접을 회사가 준비해온다 - 통과하면 처음 부른 액수 그대로 받는다 한국: 신입은 개발좋아하는 사람, 경력은 필요한 스택에 맞는사람 싱가폴: 지원자가 잘하는 언어로 면접봄(연봉에 맞춘 난이도로), 나머지 언어는 들어와서 배우면됨 개발자에 대한 대우가 다르다 - 대졸4년차 기본연봉1억 회사보다는 가족 - 남들 쉴 때 일하는 것은 혼자 미꾸라지되겠다는 의미로 받아들임 Grab(아시아버전 우버) 그랩 연사님이 만나신 분은 Google Developer신분(?)이셔서 코딩테스트 패스하셨고 화상면접, 라이브코딩 여러번을 거치셨다고 한다. 카카오 입사도 통과하셔서 그 연봉의 2.5배를 제시했는데 바로 계약서가 왔다(회사가 자체 평가한 금액을 넘지 못했다는 의미..) 입사연봉기준으로 다음 연봉협상 이뤄지기 때문에, 첫 연봉이 중요하다. 황후순님이 알려주신 팁! 혼자 공부하는건 오픈소스외에는 큰 프로젝트보기힘들다 따라서 회사에들어가서 배우는게 빠르다. 면접여러번 보다보면 언어도 늘기 때문에 영어에 너무 좌절하지 말것! 영어 회사들어가서 해라 기술을 보고, 사람을 본다 개발자는 개발에도 두려움을 가질 필요가 없다. 배우면되기에! 싱가폴-&gt; 개발자가 일하기 좋은 나라 기업탐방(국내)Clova(naver) 네이버의 인공지능분야 담당 AI관련해서는 면접자가 기여할 부분이 있다면 학사도 뽑음(싱가폴은 학사면 서류에서 이미 거른다고함) 성과중심 - 본인 업무를 다했다면 출근카드 찍기만 하면된다.우아한 형제들(배달의 민족) 평생직장따윈 없다, 최고가 되어 떠나라카카오 대부분 어떻게든 관리자가 되지 않으려고함. 개발자로 남으려함구글코리아 영어 중요하다, 아주 잘해야함 자유로운 문화 - 익히 아는 딱 그 문화 영어보다 소통능력이 더중요함 - 공감능력, 소통, 성과를 잘보여주는 능력 인사평가는 자기PR로 함 구글에 천재가 많음, 하고싶어서 하는 천재, 노력하는 천재가 많다.삼성SDS - 애자일 코어팀 si회사로 볼 수 있지만 애자일 코어팀은 변화를 이끌고자 하는 조직 삼성의 새로운 문화를 이끌려는 조직셈웨어 서울대에 있는 회사 math tool개발 mathFreeOn 실패라는 단어를 사용하지 않고 실수로 여김, 실수는 성공하기 위한 과정임 우주의 움직임도 그래픽으로 물리, 지구과학등으로 분야 넒히려고 함 - 동현이?데일리 인텔리전스 AI플랫폼 - 다빈치(DaVinCi) 은행 및 보험사 더루프 - 루프체인 인프런 - 강사와 사람들을 연결해주는 서비스오마이랩 잔디 시작한 개발자(최영근), 이규원 - c#개발자 오마이랩CTO코더블/ 상상충전소 교육커리큘럼, 책만듦 프로vs 고수나는 어느 쪽을 추구하는지 고민해볼 부분 프로 돈에 움직이는 사람, 회사에서 원하는 방향을 따르거나 맞는 곳을 찾아감 고객의 니즈를 맞춰줄 수 있는 사람 자신의 가치를 돈으로 판단 고수 일은 프로처럼함(고객의 니즈) + 자기의 생각을 담음 고객의 니즈를 바꾸지 않고 자신의 생각이 추가됨 자신에 대한 가치를 기술적인 것으로 판단 은거하면서 아트하는데 그걸로돈도 들어오는…?? 개발자 테크트리의 끝은? 관리자냐 테크니션이냐… 고민할 필요없다 회사에 필요한 기술을 공부하면됨 필요 한것을 공부 현재는 선택할 것이 많다(두갈래가 아니다) 공부는 공부의 결과를 낳는다. 언어는 도구다! 책보다는 도큐먼트! 책은 모르고 쓰는 사람도 많다 - 책을 볼때는 다 코드짜보고 맞는지도 확인할것! 기술공부도 좋지만 시야와 그릇을 넓힐것. 개발은 80까지!!","categories":[],"tags":[{"name":"okky","slug":"okky","permalink":"http://bongbooski.github.io/tags/okky/"}]},{"title":"why hexo blog changes the language automacitally","slug":"post12_why-hexo-blog-changes-the-language-automacitally","date":"2018-02-22T14:01:17.000Z","updated":"2018-02-22T14:52:10.000Z","comments":true,"path":"2018/02/22/post12_why-hexo-blog-changes-the-language-automacitally/","link":"","permalink":"http://bongbooski.github.io/2018/02/22/post12_why-hexo-blog-changes-the-language-automacitally/","excerpt":"","text":"Almost whenever I check my hexo github blog no matter local or github,the language kept being changed like an alive creature. One time that was in English, next time it was in Spanish, next time it was inFrench, and then it was in Indonesian. yeah it was so crazy So I checked hexo‘s document.-&gt; https://hexo.io/docs/internationalization.html And I found the reason and how to SET your blog’s language. hexo says that if we set i18n_dir as lang, they will detect the language within the first segment of URL. For example:123/index.html =&gt; en/archives/index.html =&gt; en/zh-tw/index.html =&gt; zh-tw The string will only be served as a language when the language file exists. So archives in /archives/index.html (example 2) will not get served as a language. But it was odd. When my blog shows French, request headers message’s language part setting was right(in Korean or English). I don’t know why the other languages appeared but after setting languageoptionas en in _config.yml and then deleted, it became ok. Until now I think it’s about hexo-i18n but I don’t understand why;;If this blog’s language is weird then notice me. In case I will see again,I will try to find the reason again","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://bongbooski.github.io/tags/hexo/"}]},{"title":"Node.js server starting module","slug":"post11_Node-js-server-starting-module","date":"2018-02-22T12:30:34.000Z","updated":"2018-02-22T12:47:30.000Z","comments":true,"path":"2018/02/22/post11_Node-js-server-starting-module/","link":"","permalink":"http://bongbooski.github.io/2018/02/22/post11_Node-js-server-starting-module/","excerpt":"","text":"#Server Strting moduleThis module can be used without abstracting by require()method. When this module is installed, the code uses -g option. -g makes the installing globally.Then the modules which are installed with -g option are placed in {prefix}/lib/node_modules and the executable files are placed in {prefix}/bin We will install supervisor and forever modules with the option like this. 12npm install -g supervisornpm install -g forever #supervisor moduleNode.js programming makes us stop and restart the server again and again whenever we need to change the code because though the files are changed, the script executing doesn’t get impact. But, supervisor module recognizes the difference and restarts the server automatically. we can check their document here -&gt; https://github.com/petruisfan/node-supervisor supervisor module’s basic usage is supervisor (file name) . We will see what happens with the module from now on. I made a code for showing the changing. When I made this code,12345678var http = require(&quot;http&quot;);http.createServer(function ( request, response)&#123; response.writeHead(200, &#123;&apos;Content-Type&apos;:&apos;text/html&apos;&#125;); response.end(&apos;&lt;h1&gt;Supervisor test - 1&lt;/h1&gt;&apos;);&#125;).listen(52273, function()&#123; console.log(&quot;Server Running at http://127.0.0.1:52273&quot;);&#125;); I see the page when I enter http://127.0.0.1:52273 or localhost:52273 And I change and save the server code file like this without restarting,12345678var http = require(&quot;http&quot;);http.createServer(function ( request, response)&#123; response.writeHead(200, &#123;&apos;Content-Type&apos;:&apos;text/html&apos;&#125;); response.end(&apos;&lt;h1&gt;Supervisor test - 2&lt;/h1&gt;&apos;);&#125;).listen(52273, function()&#123; console.log(&quot;Server Running at http://127.0.0.1:52273&quot;);&#125;); and then refresh the web page, the page is changed like this. supervisor module restarts any programs when the code ends no matter what the programs are. This means in the case we run some short code like1console.log(&quot;Run with supervisor&quot;); the program gets infinite restarting.so we should use the module when we start server program.","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://bongbooski.github.io/tags/Node-js/"}]},{"title":"Node.js File System 모듈","slug":"post10_Node-js-File-System-Module-kr","date":"2018-02-22T10:36:52.000Z","updated":"2018-02-22T12:07:04.000Z","comments":true,"path":"2018/02/22/post10_Node-js-File-System-Module-kr/","link":"","permalink":"http://bongbooski.github.io/2018/02/22/post10_Node-js-File-System-Module-kr/","excerpt":"","text":"모든 HTML 페이지를 자바스크립트로 작성하기는 힘들다.file system모듈은 서버에 있는 HTML페이지를 사용자들에게 보여줄 수 있게 해준다. HTML페이지(HTMLPage.html)을 사용자에게 제공하기 위해서 자바스크립트 파일을 다음과 같이 작성해보았다. 1234567891011const fs = require(&quot;fs&quot;);const http = require(&quot;http&quot;);http.createServer(function(request, response)&#123; fs.readFile(&quot;HTMLPage.html&quot;, function(error, data)&#123; response.writeHead(200, &#123;&quot;Content-Type:&quot;:&quot;text/html&quot;&#125;); response.end(data); &#125;);&#125;).listen(52273, function()&#123; console.log(&quot;server running at http://127.0.0.1:52273/&quot;);&#125;); 만약 다른 종류의 파일을 제공하고 싶다면, 5번째 줄의 MIME타입을 바꿔서 제공할 수 있다.예를 들어 jpeg파일의 경우는 text/html을 image/jpeg로 변경하여 제공할 수 있다.또한 다른 MIME 타입들도 동일한 방식을 적용할 수 있다. MIME 타입들 예시 text/plain — 기본 텍스트 text/html — HTML 문서 text/css — CSS 문서 text/xml — XML 문서 image/jpeg — JPG/JPEG 이미지 파일 image/png — PNG 이미지 파일 video/mpeg — MPEG 영상 파일 audio/mp3 — MP3 음악 파일","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://bongbooski.github.io/tags/Node-js/"}]},{"title":"Node.js http 모듈","slug":"post9_Node-js-http-module-kr","date":"2018-02-22T10:24:22.000Z","updated":"2018-02-22T10:30:24.000Z","comments":true,"path":"2018/02/22/post9_Node-js-http-module-kr/","link":"","permalink":"http://bongbooski.github.io/2018/02/22/post9_Node-js-http-module-kr/","excerpt":"","text":"우리가 치킨을 시켜먹을때, 전화로 이렇게 말한다 “여기는 A아파트구요, B동 C호에요… 치킨 한마리 배달해주세요” 그러면 우리는 약간의 시간 뒤에 우리가 주문한 치킨을 집(전화로 말한 주소)에서 받게 된다. 이러한 맥락에서 URL을 웹 브라우저에 입력하는 것은 치킨을 시키는 전화로 볼 수 있고,웹페이지를 웹브라우저으로부터 받는 것을 치킨집으로부터 치킨을 받는 것으로 볼 수 있다.이러한 비유가 웹페이지의 요청과 응답에 대한 기본적인 이해이다. 서버는 요청을 보내는 방법에 따라 http 웹서버 또는 https 웹서버 등으로 불린다.요청메시지를 사용하면, 유저들에게 더 적합한 웹페이지를 보여줄 수 있다.응답메시지를 사용하면, 쿠키를 사용, 저장하거나 페이지 강제 이동 등의 추가 기능을 사용할 수 있다http모듈에서 가장 중요한 객체는 server객체이다.server객체는 http 모듈의 createServer()메소드를 사용하여 만들 수 있다. server객체의 메소드 listen(port[, callback]) — 서버를 시작한다 close([callback]) — 서버를 중지한다 server객체의 이벤트 request — 사용자가 무언가를 요청할 때 발생 connection — 사용자가 서버에 접속할 때 발생 close — 서버가 닫힐 때 발생 checkContinue — 사용자가 서버를 계속 열고 있을 때 발생 upgrade — 사용자가 HTTP 업그레이드를 요청할 때 발생 clientError — 사용자가 에러를 발생시키면 발생 웹페이지를 제공하고자 할 때, 요청메시지를 작성해야한다.요청메시지의 작성은 request 이벤트 리스너의 두번째 매개변수인 response객체를 통해 할 수 있다. Response객체의 메소드 writeHead(statusCode[, statusMessage][, headers]) — response header를 작성할 때 end([data][, encoding][, callback]) — response객체의 본문을 작성","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://bongbooski.github.io/tags/Node-js/"}]},{"title":"Node.js ejs, jade module basic 템플릿 모듈 기본","slug":"post8_Node-js-ejs-jade-module-basic-kr","date":"2018-02-22T10:12:05.000Z","updated":"2018-02-22T10:22:38.000Z","comments":true,"path":"2018/02/22/post8_Node-js-ejs-jade-module-basic-kr/","link":"","permalink":"http://bongbooski.github.io/2018/02/22/post8_Node-js-ejs-jade-module-basic-kr/","excerpt":"","text":"ejs moduleejs모듈을 다운로드할때는 다음 코드를 사용한다.1npm install ejs; 위의 코드를 실행하면, npm이 외부 모듈을 설치하게된다. 설치가 끝나면 밑의 코드처럼 기존의 내부 모듈 사용법과 마찬가지로 변수에 담아서 사용이 가능하다.1var ejs = require(&apos;ejs&apos;); ejs 모듈은 템플릿 엔진 중 하나이기 때문에 특정 형태의 스트링을 HTML 타입의 스트링으로 변환시켜준다. ejs페이지를 HTML 페이지로 변환시키는 서버 페이지를 만들고자 한다.이때에는 ejs모듈에 내장된 render(str, data, option)메소드를 사용한다. 변수를 사용할 때, ejs 안에서 변수를 선언하여 사용할 수도 있지만,일반적으로 자바스크립트에서 선언한 변수를 ejs로 전달하여 사용한다. 자바스크립트의 변수를 ejs로 넘겨줄때는, 아래 코드의 9, 10번째 줄처럼 render() 메소드의 두 번째 매개변수에 담아 전달한다. Tip — 파일을 저장할때 반드시 utf8로 인코딩해서 저장해야한다.123456789101112131415var http = require(&quot;http&quot;);var fs = require(&apos;fs&apos;);var ejs = require(&apos;ejs&apos;);http.createServer(function ( request, response)&#123; fs.readFile(&quot;ejsPage.ejs&quot;, &apos;utf8&apos;, function(error, data)&#123; response.writeHead(200, &#123;&apos;Content-Type&apos;:&apos;text/html&apos;&#125;); response.end(ejs.render(data, &#123; name: &apos;booski&apos;, description : &apos;Hellow ejs with node.js&apos; &#125;)); &#125;); &#125;).listen(52273, function()&#123; console.log(&quot;Server Running at http://127.0.0.1.52273&quot;); &#125;); ejs 페이지를 작성할때, 몇가지 특수한 태그들을 사용할 수 있다. &lt;% Code %&gt; → 자바스크립트 코드를 넣는다 &lt;%= Value %&gt; → 데이터를 출력한다 위의 태그들을 사용하여 ejsPage.ejs파일을 작성해보았다.123456&lt;h1&gt;&lt;%=name%&gt;&lt;/h1&gt;&lt;p&gt;&lt;%=description%&gt;&lt;/p&gt;&lt;hr/&gt;&lt;%for(var i = 0;i&lt;10;i++)&#123;%&gt; &lt;h2&gt;The Square of &lt;%= i %&gt; is &lt;%= i*i%&gt;&lt;/h2&gt; &lt;%&#125;%&gt; Jade moduleJade 모듈도 ejs와 마찬가지로 템플릿 엔진 중 하나이다. Jade모듈을 설치할 때에도 다음과 같이 ejs와 같은 방식(외부 모듈 설치)을 사용한다.1npm install jade Jade 모듈이 jade페이지를 HTML페이지로 변환할 때는 모듈의 내장 함수 중compile(String, option)을 사용한다.ejs모듈의 render()함수와 한가지 다른 점은 render()함수는 스트링을 리턴하지만,jade의 compile()함수는 함수 자체를 돌려준다.같은 맥락에서 jade에 자바스크립트의 변수를 전달할 때는 아래 코드의 11, 12번째 줄처럼compile()함수가 리턴한 함수의 매개변수로 전달한다. 1234567891011121314151617var http = require(&quot;http&quot;);var fs = require(&apos;fs&apos;);var jade = require(&apos;jade&apos;);http.createServer(function ( request, response)&#123; fs.readFile(&quot;jadePage.jade&quot;, &apos;utf8&apos;, function(error, data)&#123; var fn = jade.compile(data); response.writeHead(200, &#123;&apos;Content-Type&apos;:&apos;text/html&apos;&#125;); response.end(fn(&#123; name: &apos;booski&apos;, description : &apos;Hellow jade with node.js&apos; &#125;)); &#125;);&#125;).listen(52273, function()&#123; console.log(&quot;Server Running at http://127.0.0.1.52273&quot;);&#125;); Jade를 사용할 때도 ejs처럼 특별한 방식으로 코드를 작성해야한다.가장 중요한 부분은 들여쓰기이다.jade모듈은 들여쓰기를 기준으로 새로운 HTML태그를 만들기 때문이다. Tip: jade에서 들여쓰기를 할 때는 탭 또는 스페이스바 중 하나로 통일해야한다.그렇지않으면 에러가 발생한다. 태그 안에 글을 넣고 싶을 때는 해당 태그의 다음 줄에서 들여쓰기를 한 뒤 작성하면 된다.또한 어떤 태그에 속성을 부여하고 싶을 때는, 괄호 ()를 이용하면 된다.(여러 속성을 주고 싶으면 각 속성을 ,로 구분한다.) Jade는 doctype과 주석 등 몇 가지 코드를 특수한 형태로 변환하는데 그 형태는 다음과 같다. doctype html → &lt;!DOCTYPE html&gt; // JADE String → &lt;!-- JADE String --&gt; 특히 새 div태그를 만들 때는 ‘div’를 직접 쓸 필요가 없다. #header의 형태로 jade를 작성하면, ‘header’를 id로 갖는 div태그가 만들어진다.같은 방식으로, .article의 경우는 ‘article’을 class로 갖는 div태그가 만들어진다. Jade 역시 ejs처럼 특수한 태그를 갖는다. -Code → 자바스크립트 코드를 적는다 #{Value} → 값을 출력한다.(내용 중간에 값을 집어넣음) =Value → 값을 출력한다.(전체 내용이 값이 됨)이러한 태그들을 사용해서 아래 코드의 11번째 줄처럼 for 반복문도 구현 가능하다. 지금까지 언급한 내용을 바탕으로 아래와 같은 코드를 작성할 수 있다.12345678910111213141516doctype htmlhtml head title index Page body // JADE String #header h1 hello jade...! h2 #&#123;name&#125;, we are the World h3= description hr - for(var i = 0; i&lt; 10;i++) &#123; .article p a(href=&quot;https://medium.com/@booski/&quot;, data-test=&quot;attribute added&quot;) Go to new world #&#123;i&#125; - &#125; 그리고 서버를 실행하면 아래의 화면을 브라우저에서 확인할 수 있다.","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://bongbooski.github.io/tags/Node-js/"}]},{"title":"MySql updating many columns by A query","slug":"post7_MySql-updating-many-columns-by-A-query","date":"2018-02-22T10:00:10.000Z","updated":"2018-02-22T10:01:54.000Z","comments":true,"path":"2018/02/22/post7_MySql-updating-many-columns-by-A-query/","link":"","permalink":"http://bongbooski.github.io/2018/02/22/post7_MySql-updating-many-columns-by-A-query/","excerpt":"","text":"When we want to update many columns in one query,we can just connect them with ,.Let’s say we want to update A column to 1 and B column to 2 in one query.Then we can do like this,1update table name set A = 1, B = 2;","categories":[],"tags":[{"name":"MySql","slug":"MySql","permalink":"http://bongbooski.github.io/tags/MySql/"}]},{"title":"MySql adding or subtracting value by update statement","slug":"post6_MySql-adding-or-subtracting-value-by-update-statement","date":"2018-02-22T09:51:04.000Z","updated":"2018-02-22T09:59:08.000Z","comments":true,"path":"2018/02/22/post6_MySql-adding-or-subtracting-value-by-update-statement/","link":"","permalink":"http://bongbooski.github.io/2018/02/22/post6_MySql-adding-or-subtracting-value-by-update-statement/","excerpt":"","text":"When we want to add or subtract some value like +1 or -1,we can do like this( in the case we want to add 1)1update table name set column&apos;s name = column&apos;s name + 1; This query adds 1 in all values of that column.So we can use this like this1update table name set column&apos;s name = column&apos;s name +1 where column&apos;s name = A; This query adds 1 if the column’s value is A. ex) Waiting line in a bankIf new person came to line ‘6’ in the back,1update bank set waiting = waiting +1 where line_num = &apos;6&apos;; then we add 1 to waiting column in the row having 6 as its line_num column’s value.","categories":[],"tags":[{"name":"MySql","slug":"MySql","permalink":"http://bongbooski.github.io/tags/MySql/"}]},{"title":"Node.js ejs, jade module basic","slug":"post5_Node.js-ejs,-jade-module-basic","date":"2018-02-22T06:49:06.000Z","updated":"2018-02-22T09:56:48.000Z","comments":true,"path":"2018/02/22/post5_Node.js-ejs,-jade-module-basic/","link":"","permalink":"http://bongbooski.github.io/2018/02/22/post5_Node.js-ejs,-jade-module-basic/","excerpt":"","text":"ejs moduleWe can install ejs module by this code.1npm install ejs; Then, npm installs eternal modules.We can use those by the same way to internal modules.1var ejs = require(&apos;ejs&apos;); Module ejs is the engine of template.So it translates specific String to HTML type String. We will make the server page which changes ejs page to HTML page.When we translate ejs to HTML page, we use render(str, data, option) of ejs module. Though we can use variables after declaring in ejs in side,usually people declare them in Javascript and pass them to ejs for using.When we pass Javascript‘ variables, we use the 2nd parameter of render() method like 9, 10th row. Tip — we should set UTF-8 as that file’s encoding 123456789101112131415var http = require(&quot;http&quot;);var fs = require(&apos;fs&apos;);var ejs = require(&apos;ejs&apos;);http.createServer(function ( request, response)&#123; fs.readFile(&quot;ejsPage.ejs&quot;, &apos;utf8&apos;, function(error, data)&#123; response.writeHead(200, &#123;&apos;Content-Type&apos;:&apos;text/html&apos;&#125;); response.end(ejs.render(data, &#123; name: &apos;booski&apos;, description : &apos;Hellow ejs with node.js&apos; &#125;)); &#125;); &#125;).listen(52273, function()&#123; console.log(&quot;Server Running at http://127.0.0.1.52273&quot;); &#125;); When we write ejs page, we can use some special tags. &lt;% Code %&gt; → writing Javascript code inside &lt;%= Value %&gt; → printing the data With using these tags, I made ejsPage.ejs file like this. 123456&lt;h1&gt;&lt;%=name%&gt;&lt;/h1&gt;&lt;p&gt;&lt;%=description%&gt;&lt;/p&gt;&lt;hr/&gt;&lt;%for(var i = 0;i&lt;10;i++)&#123;%&gt; &lt;h2&gt;The Square of &lt;%= i %&gt; is &lt;%= i*i%&gt;&lt;/h2&gt; &lt;%&#125;%&gt; Starting the server, we can see this page. Jade moduleJade module is one of template engine modules too like ejs module.We can install that by the same way to ejs like this1npm install jade When jade module translates jade page to HTML page, it uses compile(string,option)method.One different thing is that if ejs‘ render() returns String, compile() returns a function. And we can pass Javascript‘ variable with the function.We put them as the parameter of the function which compile() returned like 11, 12 rows. 1234567891011121314151617var http = require(&quot;http&quot;);var fs = require(&apos;fs&apos;);var jade = require(&apos;jade&apos;);http.createServer(function ( request, response)&#123; fs.readFile(&quot;jadePage.jade&quot;, &apos;utf8&apos;, function(error, data)&#123; var fn = jade.compile(data); response.writeHead(200, &#123;&apos;Content-Type&apos;:&apos;text/html&apos;&#125;); response.end(fn(&#123; name: &apos;booski&apos;, description : &apos;Hellow jade with node.js&apos; &#125;)); &#125;);&#125;).listen(52273, function()&#123; console.log(&quot;Server Running at http://127.0.0.1.52273&quot;);&#125;); Jade has special way to write down the page too like ejs.The most important thing is making an indentation.Jade module makes new HTML tag based on each indentations. Tip: we should use ‘tap’ or ‘space bar’ for every indentation. If not, there will be an error When we input words in the tag, we go to the next row and make an indentation again and then write down them there.And If we want to give an attribute to the tag, we give it with parenthesis.(if we want to give many attributes, we divide them by ,) Jade translates some specific words in special way like doctype or annotation, doctype html → &lt;!DOCTYPE html&gt; // JADE String → &lt;!-- JADE String --&gt; Especially making new div tag, we don’t need to write ‘div’ down.If we write #header for example, that makes the div tag having ‘header’ as its id.As the same way, .article makes the div having ‘article’ as its class. Jade has special tags too. -Code → writing Javascript code #{Value} → printing the value (inputting the value between content) =Value → printing the value (whole content becomes value) Using these tags, we can make for repetitive statement like 11th row. Based on what I mentioned, we can make this code. 12345678910111213141516doctype htmlhtml head title index Page body // JADE String #header h1 hello jade...! h2 #&#123;name&#125;, we are the World h3= description hr - for(var i = 0; i&lt; 10;i++) &#123; .article p a(href=&quot;https://medium.com/@booski/&quot;, data-test=&quot;attribute added&quot;) Go to new world #&#123;i&#125; - &#125; And this code shows this page well.","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://bongbooski.github.io/tags/Node-js/"}]},{"title":"MySql selecting duplicated data (by group by and in) 중복된 데이터 다 읽기","slug":"post4_MySql-selecting-duplicated-data-(by-group-by-and-in)-kr","date":"2018-02-22T06:43:04.000Z","updated":"2018-02-22T06:45:08.000Z","comments":true,"path":"2018/02/22/post4_MySql-selecting-duplicated-data-(by-group-by-and-in)-kr/","link":"","permalink":"http://bongbooski.github.io/2018/02/22/post4_MySql-selecting-duplicated-data-(by-group-by-and-in)-kr/","excerpt":"","text":"오늘 mysql 데이터베이스에 있는 데이터중 중복된 데이터를 확인해봐야할 일이 생겼다.중복된 값이 있는 데이터들의 목록을 보는 것은 아래처럼 가능하다. 1select * from (table name) group by (column name) having count(column name)&gt;1; 하지만 이 경우, 각 중복값들에 대한 구체적인 내용은 볼 수가 없다. 오늘 해결해야했던 상황은 B컬럼에 중복된 값이 있는 경우 그 행들의 A컬럼 값을 비교하고 같은 데이터인지 등을 확인할 필요가 있었다. 따라서 B컬럼에서 각각의 값들이 중복된 값이 있는가를 확인해야 했고, 간단한 검색 후 다음 쿼리를 만들었다.동작 원리는 B컬럼에서 중복된 값을 갖고 있는 값들의 리스트를 뽑고, 그 값들을 갖는 데이터를 모두 가져오는 방식이었다. (실제 사용때는 order by B, A를 사용해서 중복된 값들로 1차 정렬, 비교할 값들로 1차정렬하였다.) 1select * from tableName where B in (select B from tableName group by B having count(B)&gt;1); 다행이 잘 작동하였고, 이외에도 같은 구문내에서 where절과 order by절도 사용가능하였다.","categories":[],"tags":[{"name":"MySql","slug":"MySql","permalink":"http://bongbooski.github.io/tags/MySql/"}]},{"title":"MySql selecting duplicated data (by group by and in)","slug":"post3_MySql-selecting-duplicated-data-(by-group-by-and-in)","date":"2018-02-22T05:23:56.000Z","updated":"2018-02-22T06:42:22.000Z","comments":true,"path":"2018/02/22/post3_MySql-selecting-duplicated-data-(by-group-by-and-in)/","link":"","permalink":"http://bongbooski.github.io/2018/02/22/post3_MySql-selecting-duplicated-data-(by-group-by-and-in)/","excerpt":"","text":"Today I needed to check some duplicated data from our database which uses mysql.We can ‘see’ the list of duplicated data by using group by phrase like this. 1select * from (table name) group by (column name) having count(column name)&gt;1; But in this case, we can’t check the details of those data.The situation I needed to solve was that I needed to check A column’s values of the rows having same B column with any other data. So, I needed to check all of the rows having any duplicated value in B column.After searching a bit, I made this query. The way to work is like this. searching for the list of the data having same B value in any row selecting all data of the rows having same value of the result from 1. I used order by B, A for sorting them by same B 1st and then A 2nd 1select * from tableName where B in (select B from tableName group by B having count(B)&gt;1); This one worked how I expected and I could add where phrase and order by phrase too.","categories":[],"tags":[{"name":"MySql","slug":"MySql","permalink":"http://bongbooski.github.io/tags/MySql/"}]},{"title":"Node.js File System Module","slug":"post2_Node.js-File-System-Module","date":"2018-02-22T05:22:51.000Z","updated":"2018-02-22T04:32:52.000Z","comments":true,"path":"2018/02/22/post2_Node.js-File-System-Module/","link":"","permalink":"http://bongbooski.github.io/2018/02/22/post2_Node.js-File-System-Module/","excerpt":"","text":"Because we can’t write down all HTML page in Javascript file, we use file system module for provide HTML page which exists in server to clients. For providing HTML page(HTMLPage.html), we need to make server javascript file like this.1234567891011const fs = require(&quot;fs&quot;);const http = require(&quot;http&quot;);http.createServer(function(request, response)&#123; fs.readFile(&quot;HTMLPage.html&quot;, function(error, data)&#123; response.writeHead(200, &#123;&quot;Content-Type:&quot;:&quot;text/html&quot;&#125;); response.end(data); &#125;);&#125;).listen(52273, function()&#123; console.log(&quot;server running at http://127.0.0.1:52273/&quot;);&#125;); If we want to provide another kind of file, we can change MIME type in 5th line.For example, in jpeg case, we change text/html to image/jpeg.It is same to other MIME types. Examples of MIME text/plain — basic text text/html — HTML document text/css — CSS document text/xml — XML document image/jpeg — JPG/JPEG image file image/png — PNG image file video/mpeg — MPEG video file audio/mp3 — MP3 music file","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://bongbooski.github.io/tags/Node-js/"}]},{"title":"Node.js http module","slug":"post1_Node.js-http-module","date":"2018-02-21T06:49:51.000Z","updated":"2018-02-22T02:47:26.000Z","comments":true,"path":"2018/02/21/post1_Node.js-http-module/","link":"","permalink":"http://bongbooski.github.io/2018/02/21/post1_Node.js-http-module/","excerpt":"","text":"When we order chicken, we say ‘it is A apartment in B area, … please deliver us a chicken’ then we get a chicken after some time in the right place where we talked. In this situation, putting URL on web browser is ordering chicken and getting the web page from the web server is getting the chicken from the restaurant. It’s the basic understanding about request and response Depending on the way to send the ordering, we can call the server as HTTP web server or HTTPS web server etc.When we use request message, we get proper web page for users.When we use response message, we can save and take cookies and force to move the page.In http module, the most important object is server. we can declare server by using createServer() method. Server object’s method12listen(port[, callback]) — Start serverclose([callback]) — Stop server Server object’s event123456request — when client asks somethingconnection — when client opens the serverclose — when the server is closedcheckContinue — when client keeps connecting the serverupgrade — when client asks HTTP upgradeclientError — when client makes errors When we want to provide an web page, we need to write response message. And at that time, we use response object which is the 2nd parameter from request event listener. Response object’s method12writeHead(statusCode[, statusMessage][, headers]) — write down the response headerend([data][, encoding][, callback]) — write the main response content","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://bongbooski.github.io/tags/Node-js/"}]}]}