{"meta":{"title":"Booski's programming","subtitle":"A line of code, A piece of Beauty","description":null,"author":"Booski","url":"http://bongbooski.github.io"},"pages":[],"posts":[{"title":"Java bean","slug":"post36-java-bean","date":"2018-08-23T13:49:20.000Z","updated":"2018-08-23T14:13:35.474Z","comments":true,"path":"2018/08/23/post36-java-bean/","link":"","permalink":"http://bongbooski.github.io/2018/08/23/post36-java-bean/","excerpt":"","text":"Java bean 반복적인 작업을 효율적으로 하기 위해 사용 Java의 데이터(속성)와 기능(메소드)으로 이루어진 클래스 JSP페이지를 만들고, 액션태그를 이용해서 빈 사용, 내부 데이터 처리 빈 관련 액션 태그(useBean, setProperty,getProperty) 액션 태그 중에서 bean과 관련한 태그들 주로 데이터 업데이트하고 얻어오는 역할 useBean 특정 bean을 사용한다고 명시할 때 사용123&lt;jsp:useBean id=\"student\" class=\"com.javalec.ex.Student\" scope=\"page\" /&gt;// &lt;jsp:useBean id=\"빈 이름\" class=\"클래스 이름\" scope=\"스코프 범위\" /&gt; scope page : 생성된 페이지 내에서만 사용 가능 request : 요청된 페이지 내에서만 사용 가능 session : 웹브라우저의 생명주기와 동일하게 사용 가능 application : 웹애플리케이션의 생명주기와 동일하게 사용 가능 setProperty 데이터 값을 설정할 때 사용12&lt;jsp:setProperty name=\"student\" property=\"name\" value=\"홍길동\" /&gt;// &lt;jsp:setProperty name=\"빈 이름\" property=\"속성이름\" value=\"속성(데이터)값\" /&gt; getProperty 데이터 값을 가져올 때 사용12&lt;jsp:getProperty name=\"student\" property=\"name /&gt;// &lt;jsp:setProperty name=\"빈 이름\" property=\"속성이름\" /&gt;","categories":[],"tags":[{"name":"JSP","slug":"JSP","permalink":"http://bongbooski.github.io/tags/JSP/"}]},{"title":"Exception","slug":"post35-exception","date":"2018-08-20T12:45:20.000Z","updated":"2018-08-20T13:03:29.000Z","comments":true,"path":"2018/08/20/post35-exception/","link":"","permalink":"http://bongbooski.github.io/2018/08/20/post35-exception/","excerpt":"","text":"Exception 페이지 지시자 이용 예외 발생 12345&lt;%@ page errorPage=\"errorPage.jsp\"%&gt;&lt;% int i = 40/0;%? 예외 페이지 123456//반드시 true로 명시해야함//명시해야 exception객체 사용가능&lt;%@ page isErrorPage=\"true\"%&gt;&lt;% response.setStatus(200); %&gt;&lt;%= exception.getMessage() %&gt; Web.xml파일 이용 12345678&lt;error-page&gt; &lt;error-code&gt;404&lt;/error-code&gt; &lt;location&gt;/error404.jsp&lt;/location&gt;&lt;/error-page&gt;&lt;error-page&gt; &lt;error-code&gt;500&lt;/error-code&gt; &lt;location&gt;/error500.jsp&lt;/location&gt;&lt;/error-page&gt;","categories":[],"tags":[{"name":"JSP","slug":"JSP","permalink":"http://bongbooski.github.io/tags/JSP/"}]},{"title":"Session","slug":"post34-Session","date":"2018-08-16T12:45:20.000Z","updated":"2018-08-16T13:29:02.106Z","comments":true,"path":"2018/08/16/post34-Session/","link":"","permalink":"http://bongbooski.github.io/2018/08/16/post34-Session/","excerpt":"","text":"Session Cookie처럼 웹브라우저와의 관계를 유지하기 위한 수단 서버상의 객체로 존재 Cf)Cookie는 클라이언트의 특정 위치에 저장 따라서 Session은 서버에서만 접근 가능하여 보안이 좋고, 저장할 수 있는 데이터의 한계가 없음 클라이언트 요청 - 웹브라우저 Session 자동 생성 Session 속성 설정 - session내부 객체의 메소드 이용 각 브라우저마다 세션 생성됨 Session 관련 메소드12345678setAttribute() - 세션에 데이터 저장getAttribute() - 세션에서 데이터 획득getAttributeNames() - 세셔넹 저장되어 있는 모든 데이터의 이름(유니크한 키값)을 획득getId() - 자동 생성된 세션의 유니크한 아이디 획득isNew() - 세션이 최초 생성되었는지, 이전에 생성된 세션인지 구분getMaxInactiveInterval() - 세션의 유효시간 획득, 가장 최근 요청시점을 기준으로 카운트removeAttribute() - 세션에서 특정 데이터 제거inValidate() - 세션의 모든 데이터를 삭제 Example sessionInit.jsp 123456&lt;% session.setAttribute(\"mySessionName\",\"mySessionData\"); sessoin.setAttribute(\"myNum\",12345);%&gt;&lt;a href=\"sessionGet.jsp\"&gt;session get&lt;/a&gt; sessoinGet.jsp 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950&lt;% Object obj1 = session.getAttribute(\"mySessionName\"); // 이때 반환 값은 무조건 Object형임*** String mySessionName = (String)obj1; out.println(mySessionName + \"&lt;br/&gt;\"); Object obj2 = session.getAttribute(\"myNum\"); Integer myNum = (Integer)obj2; out.println(myNum + \"&lt;br/&gt;\"); out.println(\"****************************** &lt;br/&gt;\"); String sName; String sValue; Enumeration enumeration = session.getAttributeNames(); // 모든 세션 값들 가져옴 while(enumeration.hasMoreElements())&#123; sName = enumeration.nextElement().toString(); sValue = session.getAttribute(sName).toString(); out.println(\"sName: \" + sName + \"&lt;br/&gt;\"); out.println(\"sValue: \" + sValue + \"&lt;br/&gt;\"); &#125; out.println(\"****************************** &lt;br/&gt;\"); String sessionId = session.getId(); //세션 아이디 획득 out.pringln(\"sessionId: \" + sessionId); int sessionInter = session.getMaxInactiveInterval(); out.pringln(\"sessionInter: \" + sessionInter); out.println(\"****************************** &lt;br/&gt;\"); session.removeAttribute(\"mySessionData\"); //특정 데이터를 삭제 Enumeration enumeration1 = session.getAttributeNames(); while(enumeration1.hasMoreElements())&#123; sName = enumeration1.nextElement().toString(); sValue = session.getAttribute(sName).toString(); out.println(\"sName: \" + sName + \"&lt;br/&gt;\"); out.println(\"sValue: \" + sValue + \"&lt;br/&gt;\"); &#125; out.println(\"****************************** &lt;br/&gt;\"); session.inValidate(); //세션 자체를 삭제 if(request.isRequestedSessionIdValid())&#123; out.println(\"session valid\"); &#125; else &#123; out.println(\"session invalid\"); &#125;%&gt;","categories":[],"tags":[{"name":"JSP","slug":"JSP","permalink":"http://bongbooski.github.io/tags/JSP/"}]},{"title":"Cookie","slug":"post33-Cookie","date":"2018-08-15T13:03:20.000Z","updated":"2018-08-15T13:32:51.075Z","comments":true,"path":"2018/08/15/post33-Cookie/","link":"","permalink":"http://bongbooski.github.io/2018/08/15/post33-Cookie/","excerpt":"","text":"Cookie http프로토콜은 웹브라우저에게 응답 후 연결을 끊음 cookie연결이 끊겼을 때 어떤 정보를 지속적으로 유지하기 위한 수단 서버에 생성하여 서버가 아닌 클라이언트측에 특정 정보를 저장함 서버에 요청할 때 마다 쿠키의 속성값을 참조, 변경 할 수 있음 4kb로 용량이 제한적이며, 300개까지 데이터 정보를 가질 수 있음 Grammar 쿠키 생성 - 쿠키 클래스 이용 속성 설정 - setter이용 response객체에 쿠키 탑재 - response.addCookie() 이용 Method12345678910setMaxAge() - 쿠키 유효시간 설정setPath() - 쿠키사용의 유효 디렉토리 설정setValue() - 쿠키의 값을 설정setVersion() - 쿠키 버전 설정getMaxAge() - 쿠키 유효기간 정보 획득getName() - 쿠키 이름 획득getPath() - 쿠키사용의 유효 디렉토리 정보 획득getValue() - 쿠키의 값 획득getVersion() - 쿠키 버전 정보 획득 Example cookieSet.jsp 12345678&lt;% Cookie cookie = new Cookie(\"cookieName\",\"cookieValue\"); cookie.setMaxAge(60*60); //1시간 response.addCookie(cookie);%&gt;&lt;a href = \"cookieGet.jsp\"&gt;cookie get&lt;/a&gt; cookieGet.jsp 123456789101112131415&lt;% Cookie[] cookies = request.getCookies(); //쿠키 전부 배열로 가져옴 for(int i=0; i&lt;cookies.length;i++)&#123; // 각 쿠키를 돌면서 정보 확인 String str = cookies[i].getName(); if(str.equals(\"cookieName\"))&#123; out.println(\"cookies[\"+i+\"] name: \" + cookies[i].getName() + \"&lt;br/&gt;\"); out.println(\"cookies[\"+i+\"] value: \" + cookies[i].getValue() + \"&lt;br/&gt;\"); out.println(\"===================&lt;br/&gt;\") &#125; &#125;%&gt;&lt;a href=\"cookieDel.jsp\"&gt;cookie delete&lt;/a&gt; cookieDel.jsp 12345678910111213141516&lt;% Cookie[] cookies = request.getCookies(); for(int i=0; i&lt;cookies.length;i++)&#123; String str = cookies[i].getName(); if(str.equals(\"cookieName\"))&#123; out.println(\"cookies[\"+i+\"] name: \" + cookies[i].getName() + \"&lt;br/&gt;\"); out.println(\"cookies[\"+i+\"] value: \" + cookies[i].getValue() + \"&lt;br/&gt;\"); cookies[i].setMaxAge(0); // 유효시간 0초로 해서 삭제 response.addCookie(cookies[i]); // 속성 변경 후 다시 탑재해서 이어나감 &#125; &#125;%&gt;&lt;a href=\"cookieTest.jsp\"&gt;cookie Test&lt;/a&gt; cookieTest.jsp 12345678910&lt;% Cookie[] cookies = request.getCookies(); if(cookies != null)&#123; for(int i=0; i&lt;cookies.length;i++)&#123; out.println(\"cookies[\"+i+\"] name: \" + cookies[i].getName() + \"&lt;br/&gt;\"); out.println(\"cookies[\"+i+\"] value: \" + cookies[i].getValue() + \"&lt;br/&gt;\"); &#125; &#125;%&gt; 속성 변경시 response객체에 꼭 다시 넣어줘야함","categories":[],"tags":[{"name":"JSP","slug":"JSP","permalink":"http://bongbooski.github.io/tags/JSP/"}]},{"title":"JSP action tag","slug":"post32-jsp actionTag","date":"2018-08-13T13:22:20.000Z","updated":"2018-08-13T13:31:32.428Z","comments":true,"path":"2018/08/13/post32-jsp actionTag/","link":"","permalink":"http://bongbooski.github.io/2018/08/13/post32-jsp actionTag/","excerpt":"","text":"Action tag jsp페이지에서 어떤 동작을 하도록 지시하는 태그 forward, include, param Tag forward Tag 다른 특정 페이지로 전환할 때 123&lt;h1&gt;main.jsp페이지 입니다.&lt;/h1&gt;&lt;jsp:forward page=\"sub.jsp\" /&gt; main.jsp는 잠깐 스쳐 지나가고 sub.jsp가 보임 include tag 현재 페이지에 다른 페이지 삽입할 때123&lt;h1&gt;include1.jsp페이지 입니다.&lt;/h1&gt;&lt;jsp:include page=\"include2.jsp\" flush=\"true\" /&gt;&lt;h1&gt; 다시 include1.jsp페이지 입니다 &lt;/h1&gt; param Tag forward, include 태그에 데이터 전달을 목적으로 사용 이름과 값으로 구성1234&lt;jsp:forward page=\"forward_param.jsp\" /&gt; &lt;jsp:param name=\"id\" value=\"abcde\"/&gt; &lt;jsp:param name=\"pw\" value=\"1234\"/&gt;&lt;/jsp:forward&gt;","categories":[],"tags":[{"name":"JSP","slug":"JSP","permalink":"http://bongbooski.github.io/tags/JSP/"}]},{"title":"JSP request, response object","slug":"post31-jsp request,response","date":"2018-08-12T06:29:20.000Z","updated":"2018-08-12T06:49:00.686Z","comments":true,"path":"2018/08/12/post31-jsp request,response/","link":"","permalink":"http://bongbooski.github.io/2018/08/12/post31-jsp request,response/","excerpt":"","text":"request 웹브라우저를 통해 서버에 어떤 정보를 요청하는 것을 request라고 함 이러한 요청 정보는 request객체가 관리 Request 객체 관련 메소드 1234567getContextPath(): 웹애플리케이션의 컨텍스트 패스를 얻음getMethod(): get방식과 post방식을 구별할 수 있음getSession(): 세션 객체를 얻음getProtocol(): 해당 프로토콜을 얻음getRequestURL(): 요청 URL을 얻음getRequestURI(): 요청 URI를 얻음getQueryString(): 쿼리스트링을 얻음 Parameter메소드 123getParameter(String name): name에 해당하는 파라미터 값을 구함getParameterNames(): 모든 파라미터 이름을 구함getParameterValues(String name): name에 해당하는 파라미터값을 구함 - 스트링 배열로 값 받음 response 웹브라우저의 요청에 응답하는 것을 response라고 함 이러한 응답의 정보를 가지고 있는 객체를 response객체라고 함 response객체 관련 메소드123getCharacterEncoding(): 응답할 때 문서의 인코딩 형태를 구함addCookie(Cookie): 쿠키를 지정sendRedirect(URL): 지정한 URL로 이동","categories":[],"tags":[{"name":"JSP","slug":"JSP","permalink":"http://bongbooski.github.io/tags/JSP/"}]},{"title":"JSP Scriptlet, declaration, expression, 지시자, comment","slug":"post30-jsp expression","date":"2018-08-12T05:48:20.000Z","updated":"2018-08-12T06:28:34.473Z","comments":true,"path":"2018/08/12/post30-jsp expression/","link":"","permalink":"http://bongbooski.github.io/2018/08/12/post30-jsp expression/","excerpt":"","text":"Scriptlet - &lt;% java 코드 %&gt; jsp페이지에서 java언어를 사용하기 위한 요소 거의 모든 java코드를 사용 가능123456789101112131415&lt;body&gt; &lt;% int i = 0; while(true)&#123; i++; out.println(\"2 * \" + i + \" = \" + ( 2*i ) + \"&lt;br/&gt;\"); %&gt; ========== &lt;br /&gt; &lt;% if(i&gt;=9) break; &#125; %&gt;&lt;/body&gt; declaration - &lt;%! java 코드 %&gt; jsp페이지 내에서 사용되는 변수 또는 메소드를 선언할 때 사용 여기서 선언된 변수 및 메소드는 전역의 의미로 사용1234567891011121314151617&lt;body&gt; &lt;%! int i = 10; String str = \"ABCDE\"; %&gt; &lt;%! public int sum(int a, int b)&#123; return a+b; &#125; %&gt; &lt;% out.println(\"i = \" + i + \"&lt;br /&gt;\"); out.println(\"str = \" + str + \"&lt;br /&gt;\"); out.println(\"sum = \" + sum(1,5) + \"&lt;br /&gt;\"); %&gt;&lt;/body&gt; expressions - &lt;%= java 코드 %&gt; jsp페이지 내에서 사용되는 변수의 값 또는 메소드 호출 결과값을 출력하기 위해 사용 결과값은 String타입이며 ;를 사용할 수 없음1234567891011121314&lt;body&gt; &lt;%! int i = 10; String str = \"ABCDE\"; public int sum(int a, int b)&#123; return a+b; &#125; %&gt; &lt;%= i %&gt; &lt;br/&gt; &lt;%= str %&gt; &lt;br/&gt; &lt;%= sum(1,5) %&gt; &lt;br/&gt;&lt;/body&gt; 지시자 jsp페이지의 전체적인 속성을 지정할 때 사용합니다. page,include,taglib가 있으며, &lt;%@ 속성 %&gt;형태로 사용 123page : 해당 페이지의 전체적인 속성 지정include : 별도의 페이지를 현재 페이지에 삽입taglib : 태그라이브러리의 태그 사용 page 페이지 속성을 지정 주로 사용되는 언어 지정 및 import문을 많이 사용 1&lt;%@ page language=\"java\" contentType=\"text/html; charset=EUC-KR\" pageEncoding=\"EUC-KR\"%&gt; include 현재 페이지내에 다른 페이지를 삽입할 때 사용 file속성을 이용 123&lt;h1&gt; include.jsp페이지 입니다. &lt;/h1&gt;&lt;br /&gt;&lt;%@ include file = \"include01.jsp\" %&gt;&lt;h1&gt; 다시 include.jsp 페이지 입니다. &lt;/h1&gt;&lt;br /&gt; comment html 주석 =&gt; &lt;!-- comments --&gt; 소스에서 보임 jsp 주석 =&gt; &lt;%-- comments --&gt; 컴파일 이후에 출력되므로 소스에서 안보임","categories":[],"tags":[{"name":"JSP","slug":"JSP","permalink":"http://bongbooski.github.io/tags/JSP/"}]},{"title":"JSP tags, way to run, internal object","slug":"post29-jsp tag","date":"2018-08-12T04:26:20.000Z","updated":"2018-08-12T06:28:28.424Z","comments":true,"path":"2018/08/12/post29-jsp tag/","link":"","permalink":"http://bongbooski.github.io/2018/08/12/post29-jsp tag/","excerpt":"","text":"JSP tags123456&lt;%@ %&gt; : 페이지 속성&lt;%-- --%&gt; : 주석&lt;%! %&gt; : 변수, 메소드 선언&lt;%= %&gt; : 결과값 출력&lt;% %&gt; : Java 코드&lt;jsp:action&gt; &lt;jsp:action&gt; : 자바빈 연결 JSP’s way to run 클라이언트가 웹브라우저로 helloWorld.jsp요청하면,JSP컨테이너가 JSP파일을 Servlet파일(.java)로 변환 - helloWorld_jsp.java 컴파일 된 후에 클래스 파일(.class)로 변환 - helloWorld_jsp.class 클라이언트에게 html파일 형태로 응답 internal object 선언하지 않고 바로 사용가능한 객체 입출력 객체: request, response, out 서블릿 객체: page, config 세션 객체: session 예외 객체: exception","categories":[],"tags":[{"name":"JSP","slug":"JSP","permalink":"http://bongbooski.github.io/tags/JSP/"}]},{"title":"Servlet parameter, korean handling","slug":"post27-servlet04","date":"2018-08-12T03:26:20.000Z","updated":"2018-08-12T04:05:09.528Z","comments":true,"path":"2018/08/12/post27-servlet04/","link":"","permalink":"http://bongbooski.github.io/2018/08/12/post27-servlet04/","excerpt":"","text":"parameter form태그의 submit버튼을 클릭해서 데이터를 서버로 전송하면, 해당 servlet에서는 HttpServletRequest객체를 이용하여 parameter값을 얻을 수 있다 getParameter(name) - name의 value값을 줌 getParameterValues(name) - name의 값이 여러개 일때 getParameterNames() - 해당 form태그의 하위 태그들 줌 12String id = request.getParameter(\"id\");String pw = request.getParameter(\"pw\"); korean handling Tomcat은 ISO-8859-1방식을 기본 문자 처리 방식으로 하기 때문에 별도의 인코딩이 없으면 한글이 깨져보임 Get방식과 Post방식에 따라서 한글 인코딩 방법이 다름 Get방식 -&gt; &lt;server.xml&gt;수정 1&lt;Connector URLEncoding=\"EUC-KR\" port=\"8181\"/&gt; Post방식 -&gt; request.setCharacterEncoding() 메소드 이용 123protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;request.setCharacterEncoding(\"EUC-KR\");&#125;","categories":[],"tags":[{"name":"Servlet","slug":"Servlet","permalink":"http://bongbooski.github.io/tags/Servlet/"}]},{"title":"ServletConfig, ServletContext, ServletContextListener","slug":"post28-servlet05","date":"2018-08-12T03:26:20.000Z","updated":"2018-08-12T05:07:25.289Z","comments":true,"path":"2018/08/12/post28-servlet05/","link":"","permalink":"http://bongbooski.github.io/2018/08/12/post28-servlet05/","excerpt":"","text":"ServletConfig 서블릿 초기화 파라미터 특정 서블릿 생성시 필요한 초기 데이터 세팅(특정 경로 및 아이디 정보 등) web.xml에 기술하고 ServletConfig클래스를 이용해서 접근(사용)함 123456789101112131415161718&lt;servlet&gt; &lt;servlet-name&gt;InitParam&lt;/servlet-name&gt; &lt;servlet-class&gt;com.javalec.ex.InitParam&lt;/servlet-class&gt; &lt;init-param&gt; &lt;param-name&gt;id&lt;/param-name&gt; &lt;param-value&gt;abcde&lt;/param-value&gt; &lt;/init-param&gt; &lt;init-param&gt; &lt;param-name&gt;pw&lt;/param-name&gt; &lt;param-value&gt;1234&lt;/param-value&gt; &lt;/init-param&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;InitParam&lt;/servlet-name&gt; &lt;url-pattern&gt;/IP&lt;/url-pattern&gt;&lt;/servlet-mapping&gt; 12345678protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // TODO Auto-generated method stub response.getWriter().append(\"Served at: \").append(request.getContextPath()); String id = getInitParameter(\"id\"); String pw = getInitParameter(\"pw\"); System.out.println(\"id2: \" + id); System.out.println(\"pw2: \" + pw);&#125; Servlet파일에 직접 기술하는 방법도 있음 12345678910111213141516@WebServlet(urlPatterns= &#123;\"/IninP\"&#125;, initParams= &#123;@WebInitParam(name=\"id\",value=\"aaaa\"),@WebInitParam(name=\"pw\",value=\"bbbb\")&#125;)public class InitParam extends HttpServlet &#123; private static final long serialVersionUID = 1L; /** * @see HttpServlet#HttpServlet() */ protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; // TODO Auto-generated method stub response.getWriter().append(\"Served at: \").append(request.getContextPath()); String id = getInitParameter(\"id\"); String pw = getInitParameter(\"pw\"); System.out.println(\"id2: \" + id); System.out.println(\"pw2: \" + pw); &#125; &#125; ServletContext 여러 Servlet에서 특정 데이터 공유 context parameter를 이용해서 web.xml에 데이터 기술, servlet에서 공유하면서 사용 123456789&lt;context-param&gt; &lt;param-name&gt;id&lt;/param-name&gt; &lt;param-value&gt;abc&lt;/param-value&gt;&lt;/context-param&gt;&lt;context-param&gt; &lt;param-name&gt;pw&lt;/param-name&gt; &lt;param-value&gt;123213&lt;/param-value&gt;&lt;/context-param&gt; 1234String id = getServletContext().getInitParameter(\"id\");String pw = getServletContext().getInitParameter(\"pw\");System.out.println(\"id2: \" + id);System.out.println(\"pw2: \" + pw); ServletContextListener 웹애플리케이션의 생명주기 감시 리스터의 해당 메소드가 웹애플리케이션으 시작과 종료시 호출됨 contextInitialized(), ocntextDestroyed() 리스너 클래스를 따로 만들고(ServletContextListener 임플리먼트) -&gt; web.xml에 리스너 클래스 기술 123456789101112131415161718import javax.servlet.ServletContextEvent;import javax.servlet.ServletContextListener;public class ServletL implements ServletContextListener &#123; @Override public void contextDestroyed(ServletContextEvent arg0) &#123; // TODO Auto-generated method stub System.out.println(\"contextDestroyed\"); &#125; @Override public void contextInitialized(ServletContextEvent arg0) &#123; // TODO Auto-generated method stub System.out.println(\"contextInitialized\"); &#125;&#125; 123&lt;listener&gt; &lt;listener-class&gt;com.javalec.ex.ServletL&lt;/listener-class&gt;&lt;/listener&gt; 리스너 클래스에서 어노테이션으로 명시도 가능1234567891011121314151617181920import javax.servlet.ServletContextEvent;import javax.servlet.ServletContextListener;import javax.servlet.annotation.WebListener;@WebListenerpublic class ServletL implements ServletContextListener &#123; @Override public void contextDestroyed(ServletContextEvent arg0) &#123; // TODO Auto-generated method stub System.out.println(\"contextDestroyed\"); &#125; @Override public void contextInitialized(ServletContextEvent arg0) &#123; // TODO Auto-generated method stub System.out.println(\"contextInitialized\"); &#125;&#125;","categories":[],"tags":[{"name":"Servlet","slug":"Servlet","permalink":"http://bongbooski.github.io/tags/Servlet/"}]},{"title":"Servlet's way to run","slug":"post26-servlet03","date":"2018-08-11T08:24:20.000Z","updated":"2018-08-11T13:45:31.234Z","comments":true,"path":"2018/08/11/post26-servlet03/","link":"","permalink":"http://bongbooski.github.io/2018/08/11/post26-servlet03/","excerpt":"","text":"Servlet작동 순서 클라이언트에서 servlet요청이 들어 오면 서버에서는 servlet컨테이너를 만들고, 요청이 있을 때마다 스레드 생성 Servlet 라이프 사이클 응답속도가 높아서 사용도가 높음 최초 요청시 객체 생성 후 메모리에 로딩되고, 이후에는 기존 객체 재활용 -&gt; 속도 빠름 Servlet 객체 생성 - 최초 한번 init() 호출 - 최초 한번 service(),doGet,doPost() 호출 - 요청시 매번 destroy()호출 - 마지막 한번 (자원 해제) Servlet 선처리, 후처리 Servlet의 라이프 사이클 중 init(), destroy()에 선, 후처리 가능 @PostConstruct - Init()호출 destroy() - @PreDestroy","categories":[],"tags":[{"name":"Servlet","slug":"Servlet","permalink":"http://bongbooski.github.io/tags/Servlet/"}]},{"title":"Servlet start","slug":"post25-servlet02","date":"2018-08-11T04:34:20.000Z","updated":"2018-08-11T05:05:57.818Z","comments":true,"path":"2018/08/11/post25-servlet02/","link":"","permalink":"http://bongbooski.github.io/2018/08/11/post25-servlet02/","excerpt":"","text":"Servlet클래스는 HttpServlet를 상속 받음 12345@WebServlet(\"/Hworld\") public class Helloworld extends HttpServlet &#123; private static final long serialVersionUID = 1L; ...&#125; 요청처리객체 및 응답처리객체를 톰캣에서 받음 123protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123; response.getWriter().append(\"Served at: \").append(request.getContextPath());&#125; get방식, post방식 - form태그 method속성값 doGet호출 : URL값으로 정보가 전송되어 보안에 약함 doPost호출 : header를 이용해 정보가 전송되어 보안에 강함 doGet() html내 form태그의 method속성이 get일 경우 호출 웹브라우저 주소창을 이용하여 servlet을 요청하면 호출 doPost() html내 form태그의 method속성이 post일 경우 호출 Context Path WAS(Web Application Server)에서 웹애플리케이션을 구분하기위한 Path 이클립스에서 프로젝트를 생성하면 자동으로 server.xml에 추가","categories":[],"tags":[{"name":"Servlet","slug":"Servlet","permalink":"http://bongbooski.github.io/tags/Servlet/"}]},{"title":"Servlet","slug":"post24-servlet01","date":"2018-08-11T03:38:20.000Z","updated":"2018-08-11T04:32:45.999Z","comments":true,"path":"2018/08/11/post24-servlet01/","link":"","permalink":"http://bongbooski.github.io/2018/08/11/post24-servlet01/","excerpt":"","text":"Servlet특징 동적 웹애플리케이션 컴포넌트 .java확장자 응답은 html 이용 java thread이용하여 동작 MVC패턴에서 controller로 이용됨 Mapping하는 방법 .java - @WebServlet으로 매핑 12345@WebServlet(\"/Hworld\") &lt;-- 여기!public class Helloworld extends HttpServlet &#123; private static final long serialVersionUID = 1L; ...&#125; web.xml - web.xml 파일에 매핑 정보 추가 12345678&lt;servlet&gt; &lt;servlet-name&gt;helloworld&lt;/servlet-name&gt; &lt;servlet-class&gt;com.javalec.ex.Helloworld&lt;/servlet-class&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt; &lt;servlet-name&gt;helloworld&lt;/servlet-name&gt; &lt;url-pattern&gt;/hw&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;","categories":[],"tags":[{"name":"Servlet","slug":"Servlet","permalink":"http://bongbooski.github.io/tags/Servlet/"}]},{"title":"JSP","slug":"post23-jsp1","date":"2018-08-09T12:19:20.000Z","updated":"2018-08-11T03:39:39.056Z","comments":true,"path":"2018/08/09/post23-jsp1/","link":"","permalink":"http://bongbooski.github.io/2018/08/09/post23-jsp1/","excerpt":"","text":"JSP특징 동적 웹애플리케이션 컴포넌트 .jsp확장자 응답은 html 이용 서블릿으로 변환되어 실행 MVC패턴에서 view로 이용됨","categories":[],"tags":[{"name":"JSP","slug":"JSP","permalink":"http://bongbooski.github.io/tags/JSP/"}]},{"title":"python Exception Raise","slug":"post22-python-exception-raise_eng","date":"2018-04-17T05:47:23.000Z","updated":"2018-04-17T13:45:09.869Z","comments":true,"path":"2018/04/17/post22-python-exception-raise_eng/","link":"","permalink":"http://bongbooski.github.io/2018/04/17/post22-python-exception-raise_eng/","excerpt":"","text":"Exception raiseOccuring exception by raise raisekeyword can make an exception in specific situation IndexError occurs when __getitem__method(which implements indexing when sequance type class is made) goes out of the index range 123456789101112131415class SquareSeq: def __init__(self, n): self.n = n def __getitem__(self,k): if k &gt;= self.n or k &lt; 0: raise IndexError # out of index range, IndexError occurs return k * k def __len_(self): return self.ns = SquareSeq(10)print s[2], s[4]for x in s: # repeating until IndexError occurs print x,print s[20] # out of the index range Customized exception class Generally It is implemented by extending Exceptionclass(Other exceptions are unusual) How to raise the exception Same to built-in exception. Using raise [class instance] How to catch the exception from Customized exception class Using the class’ name like except [class name] In the example below, except Big catches Bigand Small exception-&gt; Because Smallis Big‘s sub-class’ 123456789101112131415161718class Big(Exception): passclass Small(Big): passdef dosomething1(): x = Big() raise x # x is exception object, it can use raisedef dosomething2(): raise Small()for f in (dosomething1, dosomething2): try: f() except Big: print \"Exception occurs!\" Passing exception After raisekeyword, with exception, additional message can follow 1234567def f(): raise Exception, 'message!!!'try: f()except Exception, a: print a When except keyword is used, exception message in initializer can be taken as 2nd parameter. 12345678a = 10b = 0try: if b == 0: raise ArithmeticError('you are dividing by 0') a/bexcept ArithmeticError, v: print v","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://bongbooski.github.io/tags/python/"}]},{"title":"python 예외 발생시키기","slug":"post22-python-exception-raise","date":"2018-04-17T05:47:23.000Z","updated":"2018-04-17T13:44:56.436Z","comments":true,"path":"2018/04/17/post22-python-exception-raise/","link":"","permalink":"http://bongbooski.github.io/2018/04/17/post22-python-exception-raise/","excerpt":"","text":"Exception raiseraise로 예외 발생하기 예외를 특정 상황 조건에서 raise키워드를 통해 발생시킬 수 있다. 아래 예는 시퀀스 형 클래스를 설계할 때 인덱싱을 구현하는 __getitem__메소드에서 인덱스가 범위를 넘을 때 IndexError를 발생시킨다. 123456789101112131415class SquareSeq: def __init__(self, n): self.n = n def __getitem__(self,k): if k &gt;= self.n or k &lt; 0: raise IndexError # 인덱스 범위를 벗어나나면 IndexError발생 return k * k def __len_(self): return self.ns = SquareSeq(10)print s[2], s[4]for x in s: # IndexError가 발생하는 시점까지 반복 print x,print s[20] # 인덱스 범위를 넘음 사용자 정의 예외 클래스 일반적으로 Exception클래스를 상속 받아 구현(나머지 예외들은 일반적으로 나타나기 힘든 예외들이다) 예외 발생 방법 내장 예외 발생 방법과 동일하게 raise [클래스 인스턴스]와 같이 해당 예외 클래스의 인스턴스를 던진다 사용자 정의 예외를 잡는 방법 except [클래스이름]과 같이 해당 예외 클래스의 이름을 사용한다. 아래 예에서 except Big이 잡는 예외는 Big과 Small이다-&gt; Small은 Big의 하위 클래스 이기 때문 123456789101112131415161718class Big(Exception): passclass Small(Big): passdef dosomething1(): x = Big() raise x # x는 예외객체이므로 raise가능def dosomething2(): raise Small()for f in (dosomething1, dosomething2): try: f() except Big: print \"Exception occurs!\" 예외값 전달하기 raise키워드 뒤에 예외와 함께, 추가 메시지를 함께 던질 수 있다. 1234567def f(): raise Exception, 'message!!!'try: f()except Exception, a: print a 생성자 안에 넣어준 에러 메시지는 except키워드 사용시에 두 번째 인자로 해당 메시지를 받을 수 있다. 12345678a = 10b = 0try: if b == 0: raise ArithmeticError('0으로 나누고 있습니다.') a/bexcept ArithmeticError, v: print v","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://bongbooski.github.io/tags/python/"}]},{"title":"python Exception Handling","slug":"post21-python-exception-handling_eng","date":"2018-04-17T00:47:23.000Z","updated":"2018-04-17T13:46:10.336Z","comments":true,"path":"2018/04/17/post21-python-exception-handling_eng/","link":"","permalink":"http://bongbooski.github.io/2018/04/17/post21-python-exception-handling_eng/","excerpt":"","text":"Exception Handling Syntax Error Grammatical error IDE checks syntax error automatically Becasue python’s grammar is simpler relatively, error occur rate is smaller and it is easy to delete errors Exception the cases having no syntax errors, the program can’t progress Occuring exception, the program ends NameError (Usiung undefined variable) 14 + boo*3 ZeroDivisionError (Dividing by 0) 123a = 10b = 0c = a / b TypeError (ex: String + Number type) 1'2' + 2 IndexError (Using index over the range of index) 12l = [1,2]print l[2] KeyError (Searching dictionary by unregisted key) 12d = &#123;\"a\":1, \"b\":2&#125;print d['c'] IOError (Opening not existing file) 1a = open('aaa.txt') How to dispose of exceptions Using try,except,else,finally statements By expecting the situations making exceptions, we can control the whole code’s flow try,except,else,finally structure12345678try: (possible to make errors) usual statementsexcept Exception: the statements working when error occurselse: the statements working when error doesn't occurfinally: the statements working anyway no matter error Doing exception handling, when error occurs the program doesn’t stop 12345a = 0try: print 1.0/aexcept ZeroDivisionError: print 'zero division error!!!' msgvariable: the message that the person who defined ZeroDivisionError givesex: float division by zero 12345678def division(): for n in range(0, 5): try: print 10.0 / n except ZeroDivisionError, msg print msgdivision() It can handle the error from the called function in trystatement indirectly 1234try: spam()except NameError, msg: print 'Error -', msg , can be replaced with as 12345# same code with upper onetry: spam()except NameError as msg: print 'Error -', msg After except, not evincing any exceptions, it takes care of all exceptions 12345try: spam() print 1.0/0.0except: print 'Error' About many exceptions, they can be taked care by each exceptstatement 1234567891011121314151617b = 0.0name = 'aaa.txt'try: print 1.0 / b spam() f = open(name, 'r') '2' + 2except NameError: print 'NameError !!!'except ZeroDivisionError: print 'ZeroDivisionError !!!'excpet (TypeError, IOError): print 'TypeError or IOERror !!!'else: print 'No Exception'finally print 'Exit !!!' Catching All exception in same kind By using the hierarchy of Inheritance of exception class, It can take care of many exceptions by once For example, there are FloatingPointError, OverflowError, ZeroDivisionError as sub-class of ArithmeticError so, about sub-class exceptions, ArithmeticError can take care of them When an exception is catched by specific except, that one is not catched in other except 123456789def dosomething(): a = 1/0try: dosomething()except ZeroDivisionError: print \"ZeroDivisionError occured\"except ArithmeticError: print \"ArithmeticError occured\"","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://bongbooski.github.io/tags/python/"}]},{"title":"python 예외처리","slug":"post21-python-exception-handling","date":"2018-04-17T00:47:23.000Z","updated":"2018-04-17T13:45:45.593Z","comments":true,"path":"2018/04/17/post21-python-exception-handling/","link":"","permalink":"http://bongbooski.github.io/2018/04/17/post21-python-exception-handling/","excerpt":"","text":"Exception Handling 구문 에러(Syntax Error) 문법적 에러 IDE에서는 구문에러 체크해줌 파이썬은 상대적으로 문법이 간단해서 에러 발생 비율이 낮거나 다른 도구로 제거 가능 예외(Exception) 구문 에러는 없으나 프로그램 실행 중 더 이상 진행할 수 없는 경우 예외가 발생하면 프로그램이 종료됨 NameError (정의되지 않은 변수 사용) 14 + boo*3 ZeroDivisionError (0으로 나누는 경우) 123a = 10b = 0c = a / b TypeError (ex: 문자열 + 수치형 자료) 1'2' + 2 IndexError (참조 범위를 넘어서 인덱스 사용) 12l = [1,2]print l[2] KeyError (등록되지 않은 키로 사전 검색) 12d = &#123;\"a\":1, \"b\":2&#125;print d['c'] IOError (존재하지 않는 파일을 열고자 할 때) 1a = open('aaa.txt') 예외 처리 방법 try,except,else,finally절 사용하기 예외가 발생할 만한 상황을 예상하여 상황별로 전체 코드 흐름을 제어할 수 있다 try,except,else,finally절 구조12345678try: (예외 발생 가능한) 일반적인 수행문들except Exception: 예외가 발생하였을 때 수행되는 문들else: 예외가 발생하지 않았을 때 수행되는 문들finally: 예외 발생 유무와 관계없이 무조건 수행되는 문들 예외 처리를 하면 예외 발생시 프로그램이 종료되지 않는다. 12345a = 0try: print 1.0/aexcept ZeroDivisionError: print 'zero division error!!!' msg변수: ZeroDivisionError를 정의한 사람이 발생될 때 주는 메시지ex: float division by zero 12345678def division(): for n in range(0, 5): try: print 10.0 / n except ZeroDivisionError, msg print msgdivision() try절 안에서 간접적으로 호출한 함수의 내부 예외도 처리 가능 1234try: spam()except NameError, msg: print 'Error -', msg ,대신 as로도 사용가능 12345# 위와 동일한 예제try: spam()except NameError as msg: print 'Error -', msg except뒤에 예외를 명시하지 않으면 모든 예외에 대해 처리됨 12345try: spam() print 1.0/0.0except: print 'Error' 여러 예외들 각각에 대해 except절로 다중처리 가능 1234567891011121314151617b = 0.0name = 'aaa.txt'try: print 1.0 / b spam() f = open(name, 'r') '2' + 2except NameError: print 'NameError !!!'except ZeroDivisionError: print 'ZeroDivisionError !!!'excpet (TypeError, IOError): print 'TypeError or IOERror !!!'else: print 'No Exception'finally print 'Exit !!!' 같은 부류의 예외 다 잡아내기 예외 클래스의 상속에 의한 계층 관계를 이용하여 여러 예외들을 한꺼번에 잡을 수 있다. 예를 들어, ArithmeticError의 하위 클래스로서 FloatingPointError, OverflowError, ZeroDivisionError가 존재하기 때문에 이들 하위 클래스 예외가 발생하면 ArithmeticError로 처리할 수 있다. 예외가 임의의 except에서 잡히면 다른 except에서는 잡히지 않는다. 123456789def dosomething(): a = 1/0try: dosomething()except ZeroDivisionError: print \"ZeroDivisionError occured\"except ArithmeticError: print \"ArithmeticError occured\"","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://bongbooski.github.io/tags/python/"}]},{"title":"python 패키지","slug":"post20-python-package","date":"2018-04-15T06:48:23.000Z","updated":"2018-04-17T13:44:32.128Z","comments":true,"path":"2018/04/15/post20-python-package/","link":"","permalink":"http://bongbooski.github.io/2018/04/15/post20-python-package/","excerpt":"","text":"패키지(Package) 여러 모듈들을 한데 묶어서 정리해 놓은 구조 물리적으로 여러 모듈 파일을 모아 놓은 디렉토리에 해당 최상위 디렉토리 이름이 패키지 이름이 된다. 최상위 디렉토리 하위에 여러 서브 디렉토리는 해당 최상위패키지의 하위 패키지가 된다. 모듈=파일, 패키지=디렉토리 __init__.py의 역할 디렉토리를 패키지로 인식시키는 역할 서브 패키지에도 패키지와 마찬가지로 필요(없으면 단순 폴더역할) import하기 1import Speech Speech디렉토리가 sys.path(또는 PYTHONPATH환경변수)에 열거된 폴더 중 하나에 위치해야함 Speech/Recognition/HMM.py코드 내용1234567891011def train(): print \"Train\" passdef loadModel(): print \"LoadModel\" passdef saveModel(): print \"SaveModel\" pass 특정 함수 사용하는 방법 12345678910111213141516171819# 사용불가. 패키지명에서 .으로 특정 모듈, 함수 가져와야함import SpeechSpeech.Recognition.HMM.train()# 적절한 방법import Speech.Recognition.HMMSpeech.Recognition.HMM.train()from Speech.Recognition import HMMHMM.train()from Speech.Recognition.HMM import traintrain()# 모듈 내의 변수 전부 다 가져옴, 모듈이름 없이 사용가능from Speech.Recognition.HMM import *train()loadModel()saveModel()","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://bongbooski.github.io/tags/python/"}]},{"title":"python Package","slug":"post20-python-package_eng","date":"2018-04-15T06:48:23.000Z","updated":"2018-04-17T13:44:32.768Z","comments":true,"path":"2018/04/15/post20-python-package_eng/","link":"","permalink":"http://bongbooski.github.io/2018/04/15/post20-python-package_eng/","excerpt":"","text":"Package Structure gathering many modules in one directory physically Top directory’s name is the package’s name Sub directories under the Top directory become sub-package of the top package Module = file, package = directory Role of __init__.py The role recognizing the directory as a package For sub-packes, this file is requried(if not, that will be usual folder) Doing import 1import Speech Speechdirectory should be one of the directories of sys.path(or PYTHONPATH environment variable) Let’s say Speech/Recognition/HMM.py looks like this1234567891011def train(): print \"Train\" passdef loadModel(): print \"LoadModel\" passdef saveModel(): print \"SaveModel\" pass How to use specific function 12345678910111213141516171819# can't use. from package's name, we need dot(.) for calling the module or functionimport SpeechSpeech.Recognition.HMM.train()# Proper wayimport Speech.Recognition.HMMSpeech.Recognition.HMM.train()from Speech.Recognition import HMMHMM.train()from Speech.Recognition.HMM import traintrain()# Taking everything from the module. It can be used without the module's namefrom Speech.Recognition.HMM import *train()loadModel()saveModel()","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://bongbooski.github.io/tags/python/"}]},{"title":"python module importing","slug":"post19-python-import_eng","date":"2018-04-15T02:48:23.000Z","updated":"2018-04-17T13:44:07.242Z","comments":true,"path":"2018/04/15/post19-python-import_eng/","link":"","permalink":"http://bongbooski.github.io/2018/04/15/post19-python-import_eng/","excerpt":"","text":"import module’s name Basic form 12import mymathprint mymath.area(5) from module’s name import wanted object taking the wanted object from the module original object is lost if the name is using it can be used without the module’s name12from mymath import area, mypiprint area(5) from module’s name import * taking everything from the module without objects starting __12from mymath import *print area(5) import module’s name as another module name another name is used for calling the module It is recommended when the original name is too long or already used1234import string as chstrprint chstrprintprint chstr.punctuation from module’s name import original name as another name[, name2 as another name2] another name is used for calling the module123456from string import replace as substitute[, upper as up]print substituteprint substitute('ham chicken spam', 'chicke', 'egg')print upprint up('abc') import can be used anywhere(including in a function) Compile and Load time import mymath works like this Finding mymath.pyc If that doesn’t exist, Finding mymath.py and creating mymath.pyc Loading mymath.pyc into memory and executing .pyc file Byte code file Kind of Object code not depending on machines or platform(OS) Python takes both executing ways of compile language and interpreter language Deciding about creating new .pycfile When modificatin time of .py is more recently than modification time of .pyc Without .pyfile, import is available with .pyc It can be use as the way to hide the original code Using the same name again Though the name’s target is changed, the module remains in memory, if we import the module, that takes the module existing in memory. So, we can use the thing we defined additionally in the module at the code Executing module and test code __name__ It is usually used for knowing if this module is used as the root module or in other module by import Being used as the root module -&gt; __main__ Being used in other module -&gt; that module’s name 1234print __name__ # __main__ printimport prnameprint prname.__name__ # prname print How to use 123456789def add(a, b): return a + bdef f(): print \"Python is becoming popular.\"if __name__ == \"__main__\": print add(1, 10) f() Direct executing runs if statement Being used in other module ignores if statement","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://bongbooski.github.io/tags/python/"}]},{"title":"python 모듈 import하기","slug":"post19-python-import","date":"2018-04-15T02:48:23.000Z","updated":"2018-04-17T13:44:06.448Z","comments":true,"path":"2018/04/15/post19-python-import/","link":"","permalink":"http://bongbooski.github.io/2018/04/15/post19-python-import/","excerpt":"","text":"import 모듈명 기본적인 형태 12import mymathprint mymath.area(5) from 모듈명 import 가져올 대상 해당 모듈에 존재하는 대상을 가져옴 기존에 존재하던 이름이면 기존 객체가 상실됨 모듈 이름 없이 바로 사용 가능12from mymath import area, mypiprint area(5) from 모듈명 import * 해당 모듈에 존재하는 __로 시작되는 것들을 제외한 모든 대상을 가져옴12from mymath import *print area(5) import 모듈명 as 새로운 모듈 이름 해당 모듈을 다른 이름으로 사용하고자 할 때 사용 기존 모듈 이름이 너무 길거나 현재 사용중인 이름인 경우 유용1234import string as chstrprint chstrprintprint chstr.punctuation from 모듈명 import 이름 as 새로운 이름[, 이름 as 새로운 이름] 해당 모듈 내에 정의된 이름을 새로운 이름으로 사용하고자 할 때123456from string import replace as substitute[, upper as up]print substituteprint substitute('ham chicken spam', 'chicke', 'egg')print upprint up('abc') import문은 어디에서나 사용가능(함수 내에서도 가능) 컴파일과 적재시간 import mymath를 수행할 때 발생하는 일 mymath.pyc를 찾는다 없다면 mymath.py를 찾아서 mymath.pyc를 생성한다 mymath.pyc를 메모리로 읽어들여 수행한다 .pyc파일 바이트 코드 파일 기계나 플랫폼(운영체제 등)에 의존하지 않도록 만들어진 일종의 목적 코드(Object code) 파이썬은 컴파일 언어이면서 동시에 인터프리터 언어의 수행 방식을 취함 새로운 .pyc파일 생성에 대한 판단 .py수정시간이 .pyc수정 시간보다 더 최근일 때 .py가 없이 .pyc파일만 있어도 import가능 코드를 숨기는 방법으로 활용 가능 같은 이름을 다시 사용할 때 같은 이름 사용하면 이전의 내용이 삭제되지만 모듈은 메모리에 남아있고, 다시 import하면 다시 가져오는 것이 아니라 메모리에 존재하는 모듈을 활용함. 따라서 기존에 추가 정의한 내용들 사용가능 모듈의 실행과 테스트 코드 __name__ 현재의 모듈이 최상위 모듈로서 수행되는지, 아니면다른 모듈에 의해 imort되어 수행되는지를 구별하기 위해 주로 사용 최상위 모듈에서 사용할 때 -&gt; __main__ 다른 모듈에서 사용될 때 -&gt; 해당 모듈의 이름 1234print __name__ # __main__ 출력import prnameprint prname.__name__ # prname출력 사용방법 123456789def add(a, b): return a + bdef f(): print \"Python is becoming popular.\"if __name__ == \"__main__\": print add(1, 10) f() 직접 실행할 때는 if절 동작 다른 곳에서 활용할 경우 if절 무시","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://bongbooski.github.io/tags/python/"}]},{"title":"python 람다(lambda) 함수","slug":"post18-python-lambda","date":"2018-04-12T05:19:37.000Z","updated":"2018-04-17T13:42:59.231Z","comments":true,"path":"2018/04/12/post18-python-lambda/","link":"","permalink":"http://bongbooski.github.io/2018/04/12/post18-python-lambda/","excerpt":"","text":"람다(lambda)함수 정의 일반적인 함수를 한 줄의 문으로 정의할 수 있는 새로운 함수 정의 리터럴 일회성으로 활용할 함수 정의할 때 주로 사용 :뒤에는 식만 올 수 있음 람다 함수도 하나의 객체임 12f = lambda x: x + 1print f(1) 인수가 두 개 있는 람다 함수를 지니는 변수 지정 및 함수 호출 12g = lambda x,y: x + yprint g(1,2) 기본 인수를 지니는 람다 함수 정의 123g = lambda x, inc=1: x+incprint g(10) # inc기본 인수 값으로 1사용print g(10, 5) 가변 인수를 지니는 람다 함수 정의 12vargs = lambda x, *args: args #args가 리턴됨print vars(1,2,3,4,5) 람다 함수 사용하기 일반 함수 사용 1234567891011def f1(x): return x*x + 3*x - 10def f2(x): return x*x*xdef g(func): return [func(x) for x in range(-10, 10)]print g(f1)print g(f2) 람다 함수 사용 12345def g(func): return [func(x) for x in range(-10, 10)]print g(lambda x: x*x + 3*x - 10)print g(lambda x: x*x*x) 람다 함수 활용 map, filter, reduce 내장 함수 map 내장 함수 map(function, seq): seq의 원소를 차례로 돌면서 function에 적용한 결과를 seq의 자료형으로 반환 12345def f(x): return x * xX - [1,2,3,4,5]Y = map(f, X)print Y map과 람다 함수를 동시에 사용 - 가장 추천 12X = [1,2,3,4,5]print map(lambda x: x * x, X) filter 내장 함수 seq자료형이 지닌 각 원소값에 대해 function에 적용한 결과가 참인 원소값들만을 동일 시퀀스 자료형으로 반환1print filter(lambda x: x&gt;2, [1,2,3,45]) reduce 내장 함수 reduce(function, seq[,initial]) seq자료형이 지닌 각 원소값에 대해 function함수를 적용하면서 하나의 값으로 매핑 첫번째 인자(function)는 반드시 두 개의 인자(ex. x,y)를 받아야한다. seq의 각 원소값들이 차례로 y에 들어간다 함수가 수행된 값은 차례대로 x에 들어간다 추가적으로 제공가능한 세번재 인자인 initial은 첫번째 단계에서 x에 할당할 초기값으로 사용된다12print reduce(lambda x, y: x + y, [1,2,3,4,5])print reduce(lambda x, y: x + y, [1,2,3,4,5], 1000)","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://bongbooski.github.io/tags/python/"}]},{"title":"python lambda function","slug":"post18-python-lambda_eng","date":"2018-04-12T05:19:37.000Z","updated":"2018-04-17T13:42:59.760Z","comments":true,"path":"2018/04/12/post18-python-lambda_eng/","link":"","permalink":"http://bongbooski.github.io/2018/04/12/post18-python-lambda_eng/","excerpt":"","text":"the definition of lambda function new literal defining usual functions by one line usually it is used for defining one-time functions after :, only expression can follow lambda function is An object too 12f = lambda x: x + 1print f(1) Assigning variables and calling the lambda function having two parameters 12g = lambda x,y: x + yprint g(1,2) Defining the lambda function having default argument 123g = lambda x, inc=1: x+incprint g(10) # default argument(inc=1) value is usedprint g(10, 5) Defining the lambda function having variable argument 123#args is returnedvargs = lambda x, *args: argsprint vars(1,2,3,4,5) Using lambda functions Using usual function 1234567891011def f1(x): return x*x + 3*x - 10def f2(x): return x*x*xdef g(func): return [func(x) for x in range(-10, 10)]print g(f1)print g(f2) Usiung lambda function 12345def g(func): return [func(x) for x in range(-10, 10)]print g(lambda x: x*x + 3*x - 10)print g(lambda x: x*x*x) Utilizing lambda function map, filter, reduce built-in functions map built-in function map(function, seq): taking item by item in seq and running function with the item and returning the result as the type of seq 12345def f(x): return x * xX - [1,2,3,4,5]Y = map(f, X)print Y Using map and lambda function - most recommended 12X = [1,2,3,4,5]print map(lambda x: x * x, X) filter built-in function taking item by item in seq and running function with the item and returning the result as the type of seq if the result is True1print filter(lambda x: x&gt;2, [1,2,3,45]) reduce built-in function reduce(function, seq[,initial]) about each items in seq, applying function and mapping as A value the 1st paremeter(function) should take two values(ex: x,y) the items of seq get into y the result after calling the function gets into x optionally, the 3rd parameter initial is used as default value of x at the 1st step12print reduce(lambda x, y: x + y, [1,2,3,4,5])print reduce(lambda x, y: x + y, [1,2,3,4,5], 1000)","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://bongbooski.github.io/tags/python/"}]},{"title":"python 파일 다루기","slug":"post17_python-file,directory","date":"2018-04-11T06:38:47.000Z","updated":"2018-04-17T13:30:28.862Z","comments":true,"path":"2018/04/11/post17_python-file,directory/","link":"","permalink":"http://bongbooski.github.io/2018/04/11/post17_python-file,directory/","excerpt":"","text":"파일 다루기파일 목록열기os모듈 사용123456import osprint os.listdir('.') #현재 디렉토리의 파일목록printprint os.listdir('../') #현재 디렉토리의 부모 디렉토리의 파일 목록 파일 종류 알아보기 os.path 모듈로 파일 종류 판단하여 True, False 반환12345678910111213import osdef filetype(fpath): print fpath, \":\", if os.path.isfile(fpath): print 'Regular file' if os.path.isdir(fpath): print 'Directory' if os.path.islink(fpath): print 'Symbolic link'flist = os.listdir('.')for fname in flist: filetype(fname) 파일의 허가권 파일의 허가권 알아보기 os.access(filepath, mode) mode에 들어갈 값 os.F_OK: 파일 자체가 존재하는 것을 테스트 os.R_OK: 읽기 권한이 있는 것을 테스트 os.W_OK: 쓰기 권한이 있는 것을 테스트 os.X_OK: 실행 권한이 있는 것(또는 디렉토리인지)을 테스트 123456789101112131415161718import osdef fileaccess(fpath): print fpath, ':', if os.access(fpath, os.F_OK): print 'Exists', else: return if os.access(fpath, os.R_OK): print 'R', if os.access(fpath, os.W_OK): print 'W', if os.access(fpath, os.X_OK): print 'X', printflist = os.listdir('.')for fname in flist: fileaccess(fname) 파일의 허가권 변경하기 os.chmod(filepath, mode) 12import osos.chmod('sample.txt', 0777) 파일 조작하기 파일 이름 변경하기 os.rename(old_filepath, new_filepath) 12345import osos.rename('t.txt', 't1.txt')print os.access('t.txt', os.F_OK) # 파일 존재 여부 확인print os.access('t1.txt', os.F_OK) 파일 이동하기 os.rename(oldfilepath, new_filepath) 12345import osos.rename('t.txt', 'example/t1.txt')# 파일 존재 여부 확인print os.access('example/t1.txt', os.F_OK) 파일 복사하기 shutil모듈 활용 shutil.copyfile(src_filepath, dest_filepath) 1234import osimport shutilshutil.copyfile('sample.txt', 'sample_new.txt')print os.access('sample_new.txt', os.F_OK) 파일 이름 다루기 상대 경로를 절대 경로로 변환하기 os.path.abspath - 상대경로 실제 파일 존재와는 무관하게 절대경로로 변경12import osprint os.path.abspath('o.txt') 주어진 경로에 파일이 존재하는지 확인 os.path.exists(filepath) 경로명 분리하기 경로와 파일명으로 분리 1234f = '/Users/booski/git/python/t.txt'print os.path.basename(f) # 파일명만 추출print os.path.dirname(f) # 디렉토리 경로 추출 경로명과 파일명을 한번에 분리 - basename과 dirname을 튜플로 확인 1print os.path.split(f) MS윈도우즈에서 드라이브명과 파일 경로명을 분리 1print os.path.splitdrive(f) 확장자 분리 - 경로와 확장자명으로 튜플 생성 1print os.path.splitext(f)","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://bongbooski.github.io/tags/python/"}]},{"title":"python operating files","slug":"post17_python-file,directory_eng","date":"2018-04-11T06:38:47.000Z","updated":"2018-04-17T13:30:28.259Z","comments":true,"path":"2018/04/11/post17_python-file,directory_eng/","link":"","permalink":"http://bongbooski.github.io/2018/04/11/post17_python-file,directory_eng/","excerpt":"","text":"Operating filesOpening file listUsing osmodule123456import osprint os.listdir('.') # file list of present directoryprintprint os.listdir('../') # file list of parent directory Recognizing file’s category os.pathmodule recognizes and returns True or False12345678910111213import osdef filetype(fpath): print fpath, \":\", if os.path.isfile(fpath): print 'Regular file' if os.path.isdir(fpath): print 'Directory' if os.path.islink(fpath): print 'Symbolic link'flist = os.listdir('.')for fname in flist: filetype(fname) Permission about file Learning permission about file os.access(filepath, mode) the values we can put for mode os.F_OK: testing if the file exists os.R_OK: testing about reading permission os.W_OK: testing about writing permission os.X_OK: testing about opening or executing permission 123456789101112131415161718import osdef fileaccess(fpath): print fpath, ':', if os.access(fpath, os.F_OK): print 'Exists', else: return if os.access(fpath, os.R_OK): print 'R', if os.access(fpath, os.W_OK): print 'W', if os.access(fpath, os.X_OK): print 'X', printflist = os.listdir('.')for fname in flist: fileaccess(fname) Chagning the Permission for the file os.chmod(filepath, mode) 12import osos.chmod('sample.txt', 0777) Manipulating files Chagning the name of the file os.rename(old_filepath, new_filepath) 12345import osos.rename('t.txt', 't1.txt')print os.access('t.txt', os.F_OK) # checking if the file existsprint os.access('t1.txt', os.F_OK) Moving the file os.rename(oldfilepath, new_filepath) 12345import osos.rename('t.txt', 'example/t1.txt')# checking if the file existsprint os.access('example/t1.txt', os.F_OK) Copying the file shutilmodule is used shutil.copyfile(src_filepath, dest_filepath) 1234import osimport shutilshutil.copyfile('sample.txt', 'sample_new.txt')print os.access('sample_new.txt', os.F_OK) Manipulating the path of the file Changing relative path to absolute path os.path.abspath - relative path no matter the existance of the file, it changes the path to absolute path12import osprint os.path.abspath('o.txt') Checking if the file exists in the given path os.path.exists(filepath) Dividing path name Dividing path and file’s name 1234f = '/Users/booski/git/python/t.txt'print os.path.basename(f) # extracting only the file's nameprint os.path.dirname(f) # extracting the directory's name Dividing path and file’s name by one line - basename and dirname are made in a tuple 1print os.path.split(f) Dividing drive’s name and file path in MS windows 1print os.path.splitdrive(f) Dividing extension - path and extension are made in a tuple 1print os.path.splitext(f)","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://bongbooski.github.io/tags/python/"}]},{"title":"python File Input&Output","slug":"post16_python_fileIO_eng","date":"2018-04-09T06:09:17.000Z","updated":"2018-04-17T13:28:42.682Z","comments":true,"path":"2018/04/09/post16_python_fileIO_eng/","link":"","permalink":"http://bongbooski.github.io/2018/04/09/post16_python_fileIO_eng/","excerpt":"","text":"File IO mode can be set as the Second parameter of openbuilt-in functiondefault value is read only(r) r - read only - file object is created in read only, file pointer moves to the beginning of the file, Error occurs if the file doesn’t exists w - write only - creating new file or creating new file object in write only after removing original file’s content, file pointer moves to the beginning of the file a - addding content at the bottom - creating file object in write only or creating new file if the file doesn’t exist and then putting the file pointer to the end of the file Binary file mode rb wb ab It is recommended to close the file object by close() immediately like f.close() Using read() assigns whole content after reading everything Reading file line by line Using forloof statement 123456f = open('t.txt')i = 1for line in f: print i, \":\", line, i += 1f.close() readline() - from present file pointer to new line character = A line 12345678f = open('t.txt')line = f.readline()i = 1while line: print i, \":\", line, line = f.readline() i += 1f.close() readlines() - Saving line by line in a list, memory is used inefficientlyIt works differently depending on each cases - for instatement: not reading everything, taking line by line 1234567891011f = open('t.txt')print f.readlines() # returning a list# file pointer moves to the beginning of the filef.seek(0)i = 1for line in f.readlines(): print i, \":\", line, i += 1f.close() xreadlines() - memory inefficiency improved 1234567891011f = open('t.txt')print f.xreadlines() # returning file object# file pointer moves to the beginning of the filef.seek(0)i = 1for line in f.xreadlines(): print i, \":\", line, i += 1f.close() for in or xreadlines() are recommended the way to write down line by line writelines() - for writing line by line 12345678lines = ['1st line\\n', '2nd line\\n', '3rd line\\n']f = open('t1.txt','w')f.writelines(lines)f.close()f = open('t1.txt')print f.read() # reading whole contentf.close() write() - putting \\n between items 12345678lines = ['1st line', '2nd line', '3rd line']f = open('t1.txt','w')f.write('\\n'.join(lines))f.close()f = open('t1.txt')print f.read() # reading whole contentf.close() Adding content in the existing file existing Using mode a1234567f = open('removeme.txt', 'a')f.write('3rd line\\n')f.close()f = open('removeme.txt')print f.read()f.close() Seeking specific file pointer Sequential access specific access seek(n) - moving file pointer to the point which is n byte far from the beginning of the file tell() - returning present file pointer in the file 123456789name = 't.txt'f = open(name, 'w+') # read and write modes = '0123456789asdf'f.write(s)f.seek(5)print f.tell()print f.read(1)print f.tell() sys module’s standard IO(monitor) object sys.stdout: standard Input and Output sys.stderr: standard error Output sys.stdin: standard Input Saving a file by standard output12345678910import sysf = open('t.txt','w')stdout = sys.stdout # saving standard outputsys.stdout = f # changing standard output to file objectprint 'Sample output'pirnt 'Good'print 'Good'f.close()sys.stdout = stdout # restoring standard output","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://bongbooski.github.io/tags/python/"}]},{"title":"python 파일 입출력","slug":"post16_python_fileIO","date":"2018-04-09T06:09:17.000Z","updated":"2018-04-17T13:29:16.752Z","comments":true,"path":"2018/04/09/post16_python_fileIO/","link":"","permalink":"http://bongbooski.github.io/2018/04/09/post16_python_fileIO/","excerpt":"","text":"파일 입출력open내장 함수 사용시 두번째 인자값으로 mode설정생략시 읽기전용(r)으로 설정 r -읽기 전용 - 파일 객체를 읽기 모드로 생성, 파일 포인터를 파일 처음 위치로, 존재하지 않는 파일이면 에러발생 w - 쓰기 전용 - 새로운 파일을 생성하거나 기존 파일의 내용을 다 없애고 쓰기모드로 생성, 파일 포인터를 파일 처음 위치로 a - 파일 끝에 추가 - 이미 존재하는 파일을 쓰기모드로 생성하거나 존재하지 않으면 파일 만들고 생성, 파일 포인터를 마지막 위치에 놓음 이진파일 모드 rb wb ab f.close()처럼 close()로 그때그때 닫아주는 것이 좋음 read()를 사용하면 전체를 다 읽어서 할당함 라인단위로 파일 읽기 for 반복문 활용 123456f = open('t.txt')i = 1for line in f: print i, \":\", line, i += 1f.close() readline()-현재의 파일 포인터에서 개행 문자까지 읽음 = 한 라인 12345678f = open('t.txt')line = f.readline()i = 1while line: print i, \":\", line, line = f.readline() i += 1f.close() readlines()-각 라인을 모두 읽어서 리스트로 저장, 메모리는 비효율적으로 사용상황별로 다른 동작함 - for in구문: 전체x, 라인별로 가져옴 1234567891011f = open('t.txt')print f.readlines() #리스트 나옴#파일 포인터를 맨 앞으로f.seek(0)i = 1for line in f.readlines(): print i, \":\", line, i += 1f.close() xreadlines() - 메모리 비효율 개선 1234567891011f = open('t.txt')print f.xreadlines() #파일객체 자체가 나옴#파일 포인터를 맨 앞으로f.seek(0)i = 1for line in f.xreadlines(): print i, \":\", line, i += 1f.close() for in 또는 xreadlines() 추천 라인 단위로 쓰는 방법 writelines() - 라인단위로 쓰기 작업 12345678lines = ['1st line\\n', '2nd line\\n', '3rd line\\n']f = open('t1.txt','w')f.writelines(lines)f.close()f = open('t1.txt')print f.read() #전체내용 읽음f.close() write() - 임의로 중간에 ‘\\n’ 넣어줌 12345678lines = ['1st line', '2nd line', '3rd line']f = open('t1.txt','w')f.write('\\n'.join(lines))f.close()f = open('t1.txt')print f.read() #전체내용 읽음f.close() 기존 파일에 내용 추가 a모드 사용1234567f = open('removeme.txt', 'a')f.write('3rd line\\n')f.close()f = open('removeme.txt')print f.read()f.close() 파일 내 임의 위치로 접근 순차접근 임의접근 seek(n) - 파일의 가장 첫번째 위치에서 n번째 바이트로 포인터이동 tell() - 파일 내 현재 포인터 위치를 반환 123456789name = 't.txt'f = open(name, 'w+') # 읽고 쓰기모드s = '0123456789asdf'f.write(s)f.seek(5)print f.tell()print f.read(1)print f.tell() sys 모듈의 표준 입출력(모니터) 관련 객체 sys.stdout: 표준 입출력 sys.stderr: 표준 에러 출력 sys.stdin: 표준 입력 표준 출력으로 파일 저장하기12345678910import sysf = open('t.txt','w')stdout = sys.stdout #표준 출력 저장sys.stdout = f #파일 객체로 표준 출력 변경print 'Sample output'pirnt 'Good'print 'Good'f.close()sys.stdout = stdout #표준 출력 복원","categories":[],"tags":[{"name":"python","slug":"python","permalink":"http://bongbooski.github.io/tags/python/"}]},{"title":".gitignore, config파일 사용","slug":"post15_gitignore+config-setting","date":"2018-03-22T06:09:17.000Z","updated":"2018-03-22T06:15:20.191Z","comments":true,"path":"2018/03/22/post15_gitignore+config-setting/","link":"","permalink":"http://bongbooski.github.io/2018/03/22/post15_gitignore+config-setting/","excerpt":"","text":"새노트북여러 프로젝트를 두 노트북에서 함께 진행할 예정인데 새 노트북에 기존 코드들을 넘겨와야함 데이터베이스 비밀번호 등 개인정보가 마음에 걸려서 설정파일로 빼보려고하니 일이 커짐 .gitignore사용한 것과 config폴더, 파일 사용법 포스팅할 예정","categories":[],"tags":[{"name":"github","slug":"github","permalink":"http://bongbooski.github.io/tags/github/"}]},{"title":"Hello World","slug":"hello-world","date":"2018-03-22T06:09:16.793Z","updated":"2018-02-19T08:25:42.000Z","comments":true,"path":"2018/03/22/hello-world/","link":"","permalink":"http://bongbooski.github.io/2018/03/22/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"node.js 게시판 만들기 첫 포스팅","slug":"post14_nodejs-bulletin-board_kr","date":"2018-03-07T09:09:17.000Z","updated":"2018-03-07T13:14:50.000Z","comments":true,"path":"2018/03/07/post14_nodejs-bulletin-board_kr/","link":"","permalink":"http://bongbooski.github.io/2018/03/07/post14_nodejs-bulletin-board_kr/","excerpt":"","text":"시작node.js의 전반적인 내용을 훑고 공부할 겸 게시판만들기 프로젝트를 시작했다.이것저것 생각하며 만들다보니 영 속도도 안나고 삽질만 하고있지만.. 삽질어제까지 route와 module들을 하나하나 잡으며 고생했는데 알고보니express framework쓰니까 내가 이틀 고생해서 만든 것보다 더 깔끔하고 알찬 형태로구성해 주더라.. local mySQL로컬 mySQL로 database를 연동시키려고 했는데 웬걸, 실행이 안되고 있었다.이전에 일하던 회사에서 익숙해진김에 hediSQL을 사용하는데 로그인이 안됐다. 알고보니 내 컴퓨터의 mySQL서비스가 꺼져있던것!내컴퓨터 - 왼쪽에 있는 내 PC를 우클릭하면 나오는 관리 - 서비스 및 응용 프로그램 - 서비스 - mySQL또는 mySQL56(버전마다 다를듯)을 실행하고나서 다시 hediSQL접속 시도하니까 접속가능! routing 문제게시판 종류를 두 개로 하려다보니 각각의 CRUD용 페이지를 구성하는게 고민이다.어떤 부분을 하나로 쓰고 어떤 부분을 나누는게 가장 효율적일지는 좀더 생각해봐야 할 것 같다.","categories":[],"tags":[{"name":"node.js","slug":"node-js","permalink":"http://bongbooski.github.io/tags/node-js/"}]},{"title":"OKKY세미나 IT회사 탐방기 - 18.02.27","slug":"post13_okky_seminor_kr","date":"2018-02-28T04:48:17.000Z","updated":"2018-03-01T08:04:32.000Z","comments":true,"path":"2018/02/28/post13_okky_seminor_kr/","link":"","permalink":"http://bongbooski.github.io/2018/02/28/post13_okky_seminor_kr/","excerpt":"","text":"TGL경복빌딩의 eBrain에서 있었던 OKKY세미나에 형들과 다녀왔다.마이다스 아이티에서 10년 3개월 5일(?) 일하다가 나오신 황후순님이 세미나를 해주셨고,주제는 IT회사 탐방기 였다. 황후순님의 이력에 대한 간단한 설명을 듣고(안전도 시뮬레이션등을 하는 회사, 인공지능 면접 솔루션 개발 등), 어떻게 많은 회사들을 다녀오실 수 있었는지도말씀해주셨는데,facebook등과 같은 SNS를 활용하신다고 한다. 예를 들면 회사는 내가 누구인지 모르니 나를 알려야 하므로, 그 회사에 다니는 사람 등의게시물에 댓글을 달거나 하는 식으로 인맥을 확장해 나가는 방식!SNS에서 소통하다가 방문하는 방식이라고 한다. 연사님은 개발자로 10년을 일을 하셨는데 퇴사를 하게 된 계기는 두가지라고 했다. 데이터 사이언스, AI 에 흥미가 있었고, TensorFlow 등에서 가져다 쓰는것보다는 직접 개발해보고 싶었다 영어를 활용하는 환경 싱가폴로! 기업탐방 - 해외(싱가폴)싱가폴 페이스북 식당이 좋다, 다양한 종류의 사람들이 있으므로 음식도 종류별로 준비된다. 성과위주이기에 업무에 도움이 되거나 휴식을 위해 음주가 가능하지만 대부분 안함 모니터에 코드만 안찍히면 구경가서 사진촬영도 가능 모든 층이 계단으로 연결되어있고, face to face 를 선호한다 - 전화 잘 안울림 포토존이 많다. 왜..? 면접 길다 - 한두달걸림 기술면접을 분야별로 본다 면접마다 평가해서 회사가 연봉을 측정 통과하면 면접자에게 희망연봉을 묻는다 측정치랑 일치하거나 측정치보다 낮으면 계약서, 측정치보다 높으면 협상일단 한 10억 던지고 협상ㄱㄱ 몸값을 제대로 받아야 일도 제대로함 - 연봉만큼의 일이 들어옴 순수개발자의 비중이 생각보다 작음 - 로컬화 위주이기 때문 WeWork, stashaway(이주원님) 면접 페이스북과 다르다 면접자가 연봉을 먼저 제시하고 그 금액에 맞는 면접을 회사가 준비해온다 - 통과하면 처음 부른 액수 그대로 받는다 한국: 신입은 개발좋아하는 사람, 경력은 필요한 스택에 맞는사람 싱가폴: 지원자가 잘하는 언어로 면접봄(연봉에 맞춘 난이도로), 나머지 언어는 들어와서 배우면됨 개발자에 대한 대우가 다르다 - 대졸4년차 기본연봉1억 회사보다는 가족 - 남들 쉴 때 일하는 것은 혼자 미꾸라지되겠다는 의미로 받아들임 Grab(아시아버전 우버) 그랩 연사님이 만나신 분은 Google Developer신분(?)이셔서 코딩테스트 패스하셨고 화상면접, 라이브코딩 여러번을 거치셨다고 한다. 카카오 입사도 통과하셔서 그 연봉의 2.5배를 제시했는데 바로 계약서가 왔다(회사가 자체 평가한 금액을 넘지 못했다는 의미..) 입사연봉기준으로 다음 연봉협상 이뤄지기 때문에, 첫 연봉이 중요하다. 황후순님이 알려주신 팁! 혼자 공부하는건 오픈소스외에는 큰 프로젝트보기힘들다 따라서 회사에들어가서 배우는게 빠르다. 면접여러번 보다보면 언어도 늘기 때문에 영어에 너무 좌절하지 말것! 영어 회사들어가서 해라 기술을 보고, 사람을 본다 개발자는 개발에도 두려움을 가질 필요가 없다. 배우면되기에! 싱가폴-&gt; 개발자가 일하기 좋은 나라 기업탐방(국내)Clova(naver) 네이버의 인공지능분야 담당 AI관련해서는 면접자가 기여할 부분이 있다면 학사도 뽑음(싱가폴은 학사면 서류에서 이미 거른다고함) 성과중심 - 본인 업무를 다했다면 출근카드 찍기만 하면된다.우아한 형제들(배달의 민족) 평생직장따윈 없다, 최고가 되어 떠나라카카오 대부분 어떻게든 관리자가 되지 않으려고함. 개발자로 남으려함구글코리아 영어 중요하다, 아주 잘해야함 자유로운 문화 - 익히 아는 딱 그 문화 영어보다 소통능력이 더중요함 - 공감능력, 소통, 성과를 잘보여주는 능력 인사평가는 자기PR로 함 구글에 천재가 많음, 하고싶어서 하는 천재, 노력하는 천재가 많다.삼성SDS - 애자일 코어팀 si회사로 볼 수 있지만 애자일 코어팀은 변화를 이끌고자 하는 조직 삼성의 새로운 문화를 이끌려는 조직셈웨어 서울대에 있는 회사 math tool개발 mathFreeOn 실패라는 단어를 사용하지 않고 실수로 여김, 실수는 성공하기 위한 과정임 우주의 움직임도 그래픽으로 물리, 지구과학등으로 분야 넒히려고 함 - 동현이?데일리 인텔리전스 AI플랫폼 - 다빈치(DaVinCi) 은행 및 보험사 더루프 - 루프체인 인프런 - 강사와 사람들을 연결해주는 서비스오마이랩 잔디 시작한 개발자(최영근), 이규원 - c#개발자 오마이랩CTO코더블/ 상상충전소 교육커리큘럼, 책만듦 프로vs 고수나는 어느 쪽을 추구하는지 고민해볼 부분 프로 돈에 움직이는 사람, 회사에서 원하는 방향을 따르거나 맞는 곳을 찾아감 고객의 니즈를 맞춰줄 수 있는 사람 자신의 가치를 돈으로 판단 고수 일은 프로처럼함(고객의 니즈) + 자기의 생각을 담음 고객의 니즈를 바꾸지 않고 자신의 생각이 추가됨 자신에 대한 가치를 기술적인 것으로 판단 은거하면서 아트하는데 그걸로돈도 들어오는…?? 개발자 테크트리의 끝은? 관리자냐 테크니션이냐… 고민할 필요없다 회사에 필요한 기술을 공부하면됨 필요 한것을 공부 현재는 선택할 것이 많다(두갈래가 아니다) 공부는 공부의 결과를 낳는다. 언어는 도구다! 책보다는 도큐먼트! 책은 모르고 쓰는 사람도 많다 - 책을 볼때는 다 코드짜보고 맞는지도 확인할것! 기술공부도 좋지만 시야와 그릇을 넓힐것. 개발은 80까지!!","categories":[],"tags":[{"name":"okky","slug":"okky","permalink":"http://bongbooski.github.io/tags/okky/"}]},{"title":"why hexo blog changes the language automacitally","slug":"post12_why-hexo-blog-changes-the-language-automacitally","date":"2018-02-22T14:01:17.000Z","updated":"2018-02-22T14:52:10.000Z","comments":true,"path":"2018/02/22/post12_why-hexo-blog-changes-the-language-automacitally/","link":"","permalink":"http://bongbooski.github.io/2018/02/22/post12_why-hexo-blog-changes-the-language-automacitally/","excerpt":"","text":"Almost whenever I check my hexo github blog no matter local or github,the language kept being changed like an alive creature. One time that was in English, next time it was in Spanish, next time it was inFrench, and then it was in Indonesian. yeah it was so crazy So I checked hexo‘s document.-&gt; https://hexo.io/docs/internationalization.html And I found the reason and how to SET your blog’s language. hexo says that if we set i18n_dir as lang, they will detect the language within the first segment of URL. For example:123/index.html =&gt; en/archives/index.html =&gt; en/zh-tw/index.html =&gt; zh-tw The string will only be served as a language when the language file exists. So archives in /archives/index.html (example 2) will not get served as a language. But it was odd. When my blog shows French, request headers message’s language part setting was right(in Korean or English). I don’t know why the other languages appeared but after setting languageoptionas en in _config.yml and then deleted, it became ok. Until now I think it’s about hexo-i18n but I don’t understand why;;If this blog’s language is weird then notice me. In case I will see again,I will try to find the reason again","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://bongbooski.github.io/tags/hexo/"}]},{"title":"Node.js server starting module","slug":"post11_Node-js-server-starting-module","date":"2018-02-22T12:30:34.000Z","updated":"2018-04-17T13:51:07.931Z","comments":true,"path":"2018/02/22/post11_Node-js-server-starting-module/","link":"","permalink":"http://bongbooski.github.io/2018/02/22/post11_Node-js-server-starting-module/","excerpt":"","text":"#Server Strting moduleThis module can be used without abstracting by require()method. When this module is installed, the code uses -g option. -g makes the installing globally.Then the modules which are installed with -g option are placed in {prefix}/lib/node_modules and the executable files are placed in {prefix}/bin We will install supervisor and forever modules with the option like this. 12npm install -g supervisornpm install -g forever #supervisor moduleNode.js programming makes us stop and restart the server again and again whenever we need to change the code because though the files are changed, the script executing doesn’t get impact. But, supervisor module recognizes the difference and restarts the server automatically. we can check their document here -&gt; https://github.com/petruisfan/node-supervisor supervisor module’s basic usage is supervisor (file name) . We will see what happens with the module from now on. I made a code for showing the changing. When I made this code,12345678var http = require(\"http\");http.createServer(function ( request, response)&#123; response.writeHead(200, &#123;'Content-Type':'text/html'&#125;); response.end('&lt;h1&gt;Supervisor test - 1&lt;/h1&gt;');&#125;).listen(52273, function()&#123; console.log(\"Server Running at http://127.0.0.1:52273\");&#125;); I see the page when I enter http://127.0.0.1:52273 or localhost:52273 And I change and save the server code file like this without restarting,12345678var http = require(\"http\");http.createServer(function ( request, response)&#123; response.writeHead(200, &#123;'Content-Type':'text/html'&#125;); response.end('&lt;h1&gt;Supervisor test - 2&lt;/h1&gt;');&#125;).listen(52273, function()&#123; console.log(\"Server Running at http://127.0.0.1:52273\");&#125;); and then refresh the web page, the page is changed like this. supervisor module restarts any programs when the code ends no matter what the programs are. This means in the case we run some short code like1console.log(\"Run with supervisor\"); the program gets infinite restarting.so we should use the module when we start server program.","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://bongbooski.github.io/tags/Node-js/"}]},{"title":"Node.js File System 모듈","slug":"post10_Node-js-File-System-Module-kr","date":"2018-02-22T10:36:52.000Z","updated":"2018-04-17T13:50:55.373Z","comments":true,"path":"2018/02/22/post10_Node-js-File-System-Module-kr/","link":"","permalink":"http://bongbooski.github.io/2018/02/22/post10_Node-js-File-System-Module-kr/","excerpt":"","text":"모든 HTML 페이지를 자바스크립트로 작성하기는 힘들다.file system모듈은 서버에 있는 HTML페이지를 사용자들에게 보여줄 수 있게 해준다. HTML페이지(HTMLPage.html)을 사용자에게 제공하기 위해서 자바스크립트 파일을 다음과 같이 작성해보았다. 1234567891011const fs = require(\"fs\");const http = require(\"http\");http.createServer(function(request, response)&#123; fs.readFile(\"HTMLPage.html\", function(error, data)&#123; response.writeHead(200, &#123;\"Content-Type:\":\"text/html\"&#125;); response.end(data); &#125;);&#125;).listen(52273, function()&#123; console.log(\"server running at http://127.0.0.1:52273/\");&#125;); 만약 다른 종류의 파일을 제공하고 싶다면, 5번째 줄의 MIME타입을 바꿔서 제공할 수 있다.예를 들어 jpeg파일의 경우는 text/html을 image/jpeg로 변경하여 제공할 수 있다.또한 다른 MIME 타입들도 동일한 방식을 적용할 수 있다. MIME 타입들 예시 text/plain — 기본 텍스트 text/html — HTML 문서 text/css — CSS 문서 text/xml — XML 문서 image/jpeg — JPG/JPEG 이미지 파일 image/png — PNG 이미지 파일 video/mpeg — MPEG 영상 파일 audio/mp3 — MP3 음악 파일","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://bongbooski.github.io/tags/Node-js/"}]},{"title":"Node.js http 모듈","slug":"post9_Node-js-http-module-kr","date":"2018-02-22T10:24:22.000Z","updated":"2018-02-22T10:30:24.000Z","comments":true,"path":"2018/02/22/post9_Node-js-http-module-kr/","link":"","permalink":"http://bongbooski.github.io/2018/02/22/post9_Node-js-http-module-kr/","excerpt":"","text":"우리가 치킨을 시켜먹을때, 전화로 이렇게 말한다 “여기는 A아파트구요, B동 C호에요… 치킨 한마리 배달해주세요” 그러면 우리는 약간의 시간 뒤에 우리가 주문한 치킨을 집(전화로 말한 주소)에서 받게 된다. 이러한 맥락에서 URL을 웹 브라우저에 입력하는 것은 치킨을 시키는 전화로 볼 수 있고,웹페이지를 웹브라우저으로부터 받는 것을 치킨집으로부터 치킨을 받는 것으로 볼 수 있다.이러한 비유가 웹페이지의 요청과 응답에 대한 기본적인 이해이다. 서버는 요청을 보내는 방법에 따라 http 웹서버 또는 https 웹서버 등으로 불린다.요청메시지를 사용하면, 유저들에게 더 적합한 웹페이지를 보여줄 수 있다.응답메시지를 사용하면, 쿠키를 사용, 저장하거나 페이지 강제 이동 등의 추가 기능을 사용할 수 있다http모듈에서 가장 중요한 객체는 server객체이다.server객체는 http 모듈의 createServer()메소드를 사용하여 만들 수 있다. server객체의 메소드 listen(port[, callback]) — 서버를 시작한다 close([callback]) — 서버를 중지한다 server객체의 이벤트 request — 사용자가 무언가를 요청할 때 발생 connection — 사용자가 서버에 접속할 때 발생 close — 서버가 닫힐 때 발생 checkContinue — 사용자가 서버를 계속 열고 있을 때 발생 upgrade — 사용자가 HTTP 업그레이드를 요청할 때 발생 clientError — 사용자가 에러를 발생시키면 발생 웹페이지를 제공하고자 할 때, 요청메시지를 작성해야한다.요청메시지의 작성은 request 이벤트 리스너의 두번째 매개변수인 response객체를 통해 할 수 있다. Response객체의 메소드 writeHead(statusCode[, statusMessage][, headers]) — response header를 작성할 때 end([data][, encoding][, callback]) — response객체의 본문을 작성","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://bongbooski.github.io/tags/Node-js/"}]},{"title":"Node.js ejs, jade module basic 템플릿 모듈 기본","slug":"post8_Node-js-ejs-jade-module-basic-kr","date":"2018-02-22T10:12:05.000Z","updated":"2018-04-17T13:52:31.843Z","comments":true,"path":"2018/02/22/post8_Node-js-ejs-jade-module-basic-kr/","link":"","permalink":"http://bongbooski.github.io/2018/02/22/post8_Node-js-ejs-jade-module-basic-kr/","excerpt":"","text":"ejs moduleejs모듈을 다운로드할때는 다음 코드를 사용한다.1npm install ejs; 위의 코드를 실행하면, npm이 외부 모듈을 설치하게된다. 설치가 끝나면 밑의 코드처럼 기존의 내부 모듈 사용법과 마찬가지로 변수에 담아서 사용이 가능하다.1var ejs = require('ejs'); ejs 모듈은 템플릿 엔진 중 하나이기 때문에 특정 형태의 스트링을 HTML 타입의 스트링으로 변환시켜준다. ejs페이지를 HTML 페이지로 변환시키는 서버 페이지를 만들고자 한다.이때에는 ejs모듈에 내장된 render(str, data, option)메소드를 사용한다. 변수를 사용할 때, ejs 안에서 변수를 선언하여 사용할 수도 있지만,일반적으로 자바스크립트에서 선언한 변수를 ejs로 전달하여 사용한다. 자바스크립트의 변수를 ejs로 넘겨줄때는, 아래 코드의 9, 10번째 줄처럼 render() 메소드의 두 번째 매개변수에 담아 전달한다. Tip — 파일을 저장할때 반드시 utf8로 인코딩해서 저장해야한다.123456789101112131415var http = require(\"http\");var fs = require('fs');var ejs = require('ejs');http.createServer(function ( request, response)&#123; fs.readFile(\"ejsPage.ejs\", 'utf8', function(error, data)&#123; response.writeHead(200, &#123;'Content-Type':'text/html'&#125;); response.end(ejs.render(data, &#123; name: 'booski', description : 'Hellow ejs with node.js' &#125;)); &#125;); &#125;).listen(52273, function()&#123; console.log(\"Server Running at http://127.0.0.1.52273\"); &#125;); ejs 페이지를 작성할때, 몇가지 특수한 태그들을 사용할 수 있다. &lt;% Code %&gt; → 자바스크립트 코드를 넣는다 &lt;%= Value %&gt; → 데이터를 출력한다 위의 태그들을 사용하여 ejsPage.ejs파일을 작성해보았다.123456&lt;h1&gt;&lt;%=name%&gt;&lt;/h1&gt;&lt;p&gt;&lt;%=description%&gt;&lt;/p&gt;&lt;hr/&gt;&lt;%for(var i = 0;i&lt;10;i++)&#123;%&gt; &lt;h2&gt;The Square of &lt;%= i %&gt; is &lt;%= i*i%&gt;&lt;/h2&gt; &lt;%&#125;%&gt; Jade moduleJade 모듈도 ejs와 마찬가지로 템플릿 엔진 중 하나이다. Jade모듈을 설치할 때에도 다음과 같이 ejs와 같은 방식(외부 모듈 설치)을 사용한다.1npm install jade Jade 모듈이 jade페이지를 HTML페이지로 변환할 때는 모듈의 내장 함수 중compile(String, option)을 사용한다.ejs모듈의 render()함수와 한가지 다른 점은 render()함수는 스트링을 리턴하지만,jade의 compile()함수는 함수 자체를 돌려준다.같은 맥락에서 jade에 자바스크립트의 변수를 전달할 때는 아래 코드의 11, 12번째 줄처럼compile()함수가 리턴한 함수의 매개변수로 전달한다. 1234567891011121314151617var http = require(\"http\");var fs = require('fs');var jade = require('jade');http.createServer(function ( request, response)&#123; fs.readFile(\"jadePage.jade\", 'utf8', function(error, data)&#123; var fn = jade.compile(data); response.writeHead(200, &#123;'Content-Type':'text/html'&#125;); response.end(fn(&#123; name: 'booski', description : 'Hellow jade with node.js' &#125;)); &#125;);&#125;).listen(52273, function()&#123; console.log(\"Server Running at http://127.0.0.1.52273\");&#125;); Jade를 사용할 때도 ejs처럼 특별한 방식으로 코드를 작성해야한다.가장 중요한 부분은 들여쓰기이다.jade모듈은 들여쓰기를 기준으로 새로운 HTML태그를 만들기 때문이다. Tip: jade에서 들여쓰기를 할 때는 탭 또는 스페이스바 중 하나로 통일해야한다.그렇지않으면 에러가 발생한다. 태그 안에 글을 넣고 싶을 때는 해당 태그의 다음 줄에서 들여쓰기를 한 뒤 작성하면 된다.또한 어떤 태그에 속성을 부여하고 싶을 때는, 괄호 ()를 이용하면 된다.(여러 속성을 주고 싶으면 각 속성을 ,로 구분한다.) Jade는 doctype과 주석 등 몇 가지 코드를 특수한 형태로 변환하는데 그 형태는 다음과 같다. doctype html → &lt;!DOCTYPE html&gt; // JADE String → &lt;!-- JADE String --&gt; 특히 새 div태그를 만들 때는 ‘div’를 직접 쓸 필요가 없다. #header의 형태로 jade를 작성하면, ‘header’를 id로 갖는 div태그가 만들어진다.같은 방식으로, .article의 경우는 ‘article’을 class로 갖는 div태그가 만들어진다. Jade 역시 ejs처럼 특수한 태그를 갖는다. -Code → 자바스크립트 코드를 적는다 #{Value} → 값을 출력한다.(내용 중간에 값을 집어넣음) =Value → 값을 출력한다.(전체 내용이 값이 됨)이러한 태그들을 사용해서 아래 코드의 11번째 줄처럼 for 반복문도 구현 가능하다. 지금까지 언급한 내용을 바탕으로 아래와 같은 코드를 작성할 수 있다.12345678910111213141516doctype htmlhtml head title index Page body // JADE String #header h1 hello jade...! h2 #&#123;name&#125;, we are the World h3= description hr - for(var i = 0; i&lt; 10;i++) &#123; .article p a(href=&quot;https://medium.com/@booski/&quot;, data-test=&quot;attribute added&quot;) Go to new world #&#123;i&#125; - &#125; 그리고 서버를 실행하면 아래의 화면을 브라우저에서 확인할 수 있다.","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://bongbooski.github.io/tags/Node-js/"}]},{"title":"MySql updating many columns by A query","slug":"post7_MySql-updating-many-columns-by-A-query","date":"2018-02-22T10:00:10.000Z","updated":"2018-02-22T10:01:54.000Z","comments":true,"path":"2018/02/22/post7_MySql-updating-many-columns-by-A-query/","link":"","permalink":"http://bongbooski.github.io/2018/02/22/post7_MySql-updating-many-columns-by-A-query/","excerpt":"","text":"When we want to update many columns in one query,we can just connect them with ,.Let’s say we want to update A column to 1 and B column to 2 in one query.Then we can do like this,1update table name set A = 1, B = 2;","categories":[],"tags":[{"name":"MySql","slug":"MySql","permalink":"http://bongbooski.github.io/tags/MySql/"}]},{"title":"MySql adding or subtracting value by update statement","slug":"post6_MySql-adding-or-subtracting-value-by-update-statement","date":"2018-02-22T09:51:04.000Z","updated":"2018-02-22T09:59:08.000Z","comments":true,"path":"2018/02/22/post6_MySql-adding-or-subtracting-value-by-update-statement/","link":"","permalink":"http://bongbooski.github.io/2018/02/22/post6_MySql-adding-or-subtracting-value-by-update-statement/","excerpt":"","text":"When we want to add or subtract some value like +1 or -1,we can do like this( in the case we want to add 1)1update table name set column&apos;s name = column&apos;s name + 1; This query adds 1 in all values of that column.So we can use this like this1update table name set column&apos;s name = column&apos;s name +1 where column&apos;s name = A; This query adds 1 if the column’s value is A. ex) Waiting line in a bankIf new person came to line ‘6’ in the back,1update bank set waiting = waiting +1 where line_num = &apos;6&apos;; then we add 1 to waiting column in the row having 6 as its line_num column’s value.","categories":[],"tags":[{"name":"MySql","slug":"MySql","permalink":"http://bongbooski.github.io/tags/MySql/"}]},{"title":"Node.js ejs, jade module basic","slug":"post5_Node.js-ejs,-jade-module-basic","date":"2018-02-22T06:49:06.000Z","updated":"2018-04-17T13:52:18.500Z","comments":true,"path":"2018/02/22/post5_Node.js-ejs,-jade-module-basic/","link":"","permalink":"http://bongbooski.github.io/2018/02/22/post5_Node.js-ejs,-jade-module-basic/","excerpt":"","text":"ejs moduleWe can install ejs module by this code.1npm install ejs; Then, npm installs eternal modules.We can use those by the same way to internal modules.1var ejs = require('ejs'); Module ejs is the engine of template.So it translates specific String to HTML type String. We will make the server page which changes ejs page to HTML page.When we translate ejs to HTML page, we use render(str, data, option) of ejs module. Though we can use variables after declaring in ejs in side,usually people declare them in Javascript and pass them to ejs for using.When we pass Javascript‘ variables, we use the 2nd parameter of render() method like 9, 10th row. Tip — we should set UTF-8 as that file’s encoding 123456789101112131415var http = require(\"http\");var fs = require('fs');var ejs = require('ejs');http.createServer(function ( request, response)&#123; fs.readFile(\"ejsPage.ejs\", 'utf8', function(error, data)&#123; response.writeHead(200, &#123;'Content-Type':'text/html'&#125;); response.end(ejs.render(data, &#123; name: 'booski', description : 'Hellow ejs with node.js' &#125;)); &#125;); &#125;).listen(52273, function()&#123; console.log(\"Server Running at http://127.0.0.1.52273\"); &#125;); When we write ejs page, we can use some special tags. &lt;% Code %&gt; → writing Javascript code inside &lt;%= Value %&gt; → printing the data With using these tags, I made ejsPage.ejs file like this. 123456&lt;h1&gt;&lt;%=name%&gt;&lt;/h1&gt;&lt;p&gt;&lt;%=description%&gt;&lt;/p&gt;&lt;hr/&gt;&lt;%for(var i = 0;i&lt;10;i++)&#123;%&gt; &lt;h2&gt;The Square of &lt;%= i %&gt; is &lt;%= i*i%&gt;&lt;/h2&gt; &lt;%&#125;%&gt; Starting the server, we can see this page. Jade moduleJade module is one of template engine modules too like ejs module.We can install that by the same way to ejs like this1npm install jade When jade module translates jade page to HTML page, it uses compile(string,option)method.One different thing is that if ejs‘ render() returns String, compile() returns a function. And we can pass Javascript‘ variable with the function.We put them as the parameter of the function which compile() returned like 11, 12 rows. 1234567891011121314151617var http = require(\"http\");var fs = require('fs');var jade = require('jade');http.createServer(function ( request, response)&#123; fs.readFile(\"jadePage.jade\", 'utf8', function(error, data)&#123; var fn = jade.compile(data); response.writeHead(200, &#123;'Content-Type':'text/html'&#125;); response.end(fn(&#123; name: 'booski', description : 'Hellow jade with node.js' &#125;)); &#125;);&#125;).listen(52273, function()&#123; console.log(\"Server Running at http://127.0.0.1.52273\");&#125;); Jade has special way to write down the page too like ejs.The most important thing is making an indentation.Jade module makes new HTML tag based on each indentations. Tip: we should use ‘tap’ or ‘space bar’ for every indentation. If not, there will be an error When we input words in the tag, we go to the next row and make an indentation again and then write down them there.And If we want to give an attribute to the tag, we give it with parenthesis.(if we want to give many attributes, we divide them by ,) Jade translates some specific words in special way like doctype or annotation, doctype html → &lt;!DOCTYPE html&gt; // JADE String → &lt;!-- JADE String --&gt; Especially making new div tag, we don’t need to write ‘div’ down.If we write #header for example, that makes the div tag having ‘header’ as its id.As the same way, .article makes the div having ‘article’ as its class. Jade has special tags too. -Code → writing Javascript code #{Value} → printing the value (inputting the value between content) =Value → printing the value (whole content becomes value) Using these tags, we can make for repetitive statement like 11th row. Based on what I mentioned, we can make this code. 12345678910111213141516doctype htmlhtml head title index Page body // JADE String #header h1 hello jade...! h2 #&#123;name&#125;, we are the World h3= description hr - for(var i = 0; i&lt; 10;i++) &#123; .article p a(href=&quot;https://medium.com/@booski/&quot;, data-test=&quot;attribute added&quot;) Go to new world #&#123;i&#125; - &#125; And this code shows this page well.","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://bongbooski.github.io/tags/Node-js/"}]},{"title":"MySql selecting duplicated data (by group by and in) 중복된 데이터 다 읽기","slug":"post4_MySql-selecting-duplicated-data-(by-group-by-and-in)-kr","date":"2018-02-22T06:43:04.000Z","updated":"2018-02-22T06:45:08.000Z","comments":true,"path":"2018/02/22/post4_MySql-selecting-duplicated-data-(by-group-by-and-in)-kr/","link":"","permalink":"http://bongbooski.github.io/2018/02/22/post4_MySql-selecting-duplicated-data-(by-group-by-and-in)-kr/","excerpt":"","text":"오늘 mysql 데이터베이스에 있는 데이터중 중복된 데이터를 확인해봐야할 일이 생겼다.중복된 값이 있는 데이터들의 목록을 보는 것은 아래처럼 가능하다. 1select * from (table name) group by (column name) having count(column name)&gt;1; 하지만 이 경우, 각 중복값들에 대한 구체적인 내용은 볼 수가 없다. 오늘 해결해야했던 상황은 B컬럼에 중복된 값이 있는 경우 그 행들의 A컬럼 값을 비교하고 같은 데이터인지 등을 확인할 필요가 있었다. 따라서 B컬럼에서 각각의 값들이 중복된 값이 있는가를 확인해야 했고, 간단한 검색 후 다음 쿼리를 만들었다.동작 원리는 B컬럼에서 중복된 값을 갖고 있는 값들의 리스트를 뽑고, 그 값들을 갖는 데이터를 모두 가져오는 방식이었다. (실제 사용때는 order by B, A를 사용해서 중복된 값들로 1차 정렬, 비교할 값들로 1차정렬하였다.) 1select * from tableName where B in (select B from tableName group by B having count(B)&gt;1); 다행이 잘 작동하였고, 이외에도 같은 구문내에서 where절과 order by절도 사용가능하였다.","categories":[],"tags":[{"name":"MySql","slug":"MySql","permalink":"http://bongbooski.github.io/tags/MySql/"}]},{"title":"MySql selecting duplicated data (by group by and in)","slug":"post3_MySql-selecting-duplicated-data-(by-group-by-and-in)","date":"2018-02-22T05:23:56.000Z","updated":"2018-02-22T06:42:22.000Z","comments":true,"path":"2018/02/22/post3_MySql-selecting-duplicated-data-(by-group-by-and-in)/","link":"","permalink":"http://bongbooski.github.io/2018/02/22/post3_MySql-selecting-duplicated-data-(by-group-by-and-in)/","excerpt":"","text":"Today I needed to check some duplicated data from our database which uses mysql.We can ‘see’ the list of duplicated data by using group by phrase like this. 1select * from (table name) group by (column name) having count(column name)&gt;1; But in this case, we can’t check the details of those data.The situation I needed to solve was that I needed to check A column’s values of the rows having same B column with any other data. So, I needed to check all of the rows having any duplicated value in B column.After searching a bit, I made this query. The way to work is like this. searching for the list of the data having same B value in any row selecting all data of the rows having same value of the result from 1. I used order by B, A for sorting them by same B 1st and then A 2nd 1select * from tableName where B in (select B from tableName group by B having count(B)&gt;1); This one worked how I expected and I could add where phrase and order by phrase too.","categories":[],"tags":[{"name":"MySql","slug":"MySql","permalink":"http://bongbooski.github.io/tags/MySql/"}]},{"title":"Node.js File System Module","slug":"post2_Node.js-File-System-Module","date":"2018-02-22T05:22:51.000Z","updated":"2018-04-17T13:47:42.211Z","comments":true,"path":"2018/02/22/post2_Node.js-File-System-Module/","link":"","permalink":"http://bongbooski.github.io/2018/02/22/post2_Node.js-File-System-Module/","excerpt":"","text":"Because we can’t write down all HTML page in Javascript file, we use file system module for provide HTML page which exists in server to clients. For providing HTML page(HTMLPage.html), we need to make server javascript file like this.1234567891011const fs = require(\"fs\");const http = require(\"http\");http.createServer(function(request, response)&#123; fs.readFile(\"HTMLPage.html\", function(error, data)&#123; response.writeHead(200, &#123;\"Content-Type:\":\"text/html\"&#125;); response.end(data); &#125;);&#125;).listen(52273, function()&#123; console.log(\"server running at http://127.0.0.1:52273/\");&#125;); If we want to provide another kind of file, we can change MIME type in 5th line.For example, in jpeg case, we change text/html to image/jpeg.It is same to other MIME types. Examples of MIME text/plain — basic text text/html — HTML document text/css — CSS document text/xml — XML document image/jpeg — JPG/JPEG image file image/png — PNG image file video/mpeg — MPEG video file audio/mp3 — MP3 music file","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://bongbooski.github.io/tags/Node-js/"}]},{"title":"Node.js http module","slug":"post1_Node.js-http-module","date":"2018-02-21T06:49:51.000Z","updated":"2018-04-17T13:51:29.668Z","comments":true,"path":"2018/02/21/post1_Node.js-http-module/","link":"","permalink":"http://bongbooski.github.io/2018/02/21/post1_Node.js-http-module/","excerpt":"","text":"When we order chicken, we say ‘it is A apartment in B area, … please deliver us a chicken’ then we get a chicken after some time in the right place where we talked. In this situation, putting URL on web browser is ordering chicken and getting the web page from the web server is getting the chicken from the restaurant. It’s the basic understanding about request and response Depending on the way to send the ordering, we can call the server as HTTP web server or HTTPS web server etc.When we use request message, we get proper web page for users.When we use response message, we can save and take cookies and force to move the page.In http module, the most important object is server. we can declare server by using createServer() method. Server object’s method12listen(port[, callback]) — Start serverclose([callback]) — Stop server Server object’s event123456request — when client asks somethingconnection — when client opens the serverclose — when the server is closedcheckContinue — when client keeps connecting the serverupgrade — when client asks HTTP upgradeclientError — when client makes errors When we want to provide an web page, we need to write response message. And at that time, we use response object which is the 2nd parameter from request event listener. Response object’s method12writeHead(statusCode[, statusMessage][, headers]) — write down the response headerend([data][, encoding][, callback]) — write the main response content","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://bongbooski.github.io/tags/Node-js/"}]}]}