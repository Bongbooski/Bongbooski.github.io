<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Booski&#39;s programming</title>
  
  <subtitle>A line of code, A piece of Beauty</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bongbooski.github.io/"/>
  <updated>2018-04-15T07:31:55.462Z</updated>
  <id>http://bongbooski.github.io/</id>
  
  <author>
    <name>Booski</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python 패키지</title>
    <link href="http://bongbooski.github.io/2018/04/15/post20-python-package/"/>
    <id>http://bongbooski.github.io/2018/04/15/post20-python-package/</id>
    <published>2018-04-15T06:48:23.000Z</published>
    <updated>2018-04-15T07:31:55.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="패키지-Package"><a href="#패키지-Package" class="headerlink" title="패키지(Package)"></a>패키지(Package)</h1><ul><li>여러 모듈들을 한데 묶어서 정리해 놓은 구조</li><li>물리적으로 여러 모듈 파일을 모아 놓은 디렉토리에 해당<ul><li>최상위 디렉토리 이름이 패키지 이름이 됨다</li><li>최상위 디렉토리 하위에 여러 서브 디렉토리는 해당 최상위패키지의 하위 패키지가 된다.</li><li>모듈=파일, 패키지=디렉토리</li></ul></li></ul><hr><h2 id="init-py의-역할"><a href="#init-py의-역할" class="headerlink" title="__init__.py의 역할"></a><code>__init__.py</code>의 역할</h2><ul><li>디렉토리를 패키지로 인식시키는 역할</li><li>서브 패키지에도 패키지와 마찬가지로 필요(없으면 단순 폴더역할)</li></ul><hr><h2 id="import하기"><a href="#import하기" class="headerlink" title="import하기"></a>import하기</h2>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import Speech</span><br></pre></td></tr></table></figure><ul><li><code>Speech</code>디렉토리가 <code>sys.path</code>(또는 <code>PYTHONPATH</code>환경변수)에 열거된 폴더 중 하나에 위치해야함</li><li><code>Speech/Recognition/HMM.py</code>코드 내용<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def train():</span><br><span class="line">  print &quot;Train&quot;</span><br><span class="line">  pass</span><br><span class="line"></span><br><span class="line">def loadModel():</span><br><span class="line">  print &quot;LoadModel&quot;</span><br><span class="line">  pass</span><br><span class="line"></span><br><span class="line">def saveModel():</span><br><span class="line">  print &quot;SaveModel&quot;</span><br><span class="line">  pass</span><br></pre></td></tr></table></figure></li></ul><h3 id="특정-함수-사용하는-방법"><a href="#특정-함수-사용하는-방법" class="headerlink" title="특정 함수 사용하는 방법"></a>특정 함수 사용하는 방법</h3>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 사용불가. 패키지명에서 .으로 특정 모듈, 함수 가져와야함</span><br><span class="line">import Speech</span><br><span class="line">Speech.Recognition.HMM.train()</span><br><span class="line"></span><br><span class="line"># 적절한 방법</span><br><span class="line">import Speech.Recognition.HMM</span><br><span class="line">Speech.Recognition.HMM.train()</span><br><span class="line"></span><br><span class="line">from Speech.Recognition import HMM</span><br><span class="line">HMM.train()</span><br><span class="line"></span><br><span class="line">from Speech.Recognition.HMM import train</span><br><span class="line">train()</span><br><span class="line"></span><br><span class="line"># 모듈 내의 변수 전부 다 가져옴, 모듈이름 없이 사용가능</span><br><span class="line">from Speech.Recognition.HMM import *</span><br><span class="line">train()</span><br><span class="line">loadModel()</span><br><span class="line">saveModel()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;패키지-Package&quot;&gt;&lt;a href=&quot;#패키지-Package&quot; class=&quot;headerlink&quot; title=&quot;패키지(Package)&quot;&gt;&lt;/a&gt;패키지(Package)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;여러 모듈들을 한데 묶어서 정리해 놓은 구조&lt;/
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 모듈 import하기</title>
    <link href="http://bongbooski.github.io/2018/04/15/post19-python-import/"/>
    <id>http://bongbooski.github.io/2018/04/15/post19-python-import/</id>
    <published>2018-04-15T02:48:23.000Z</published>
    <updated>2018-04-15T07:03:29.772Z</updated>
    
    <content type="html"><![CDATA[<h1 id="import-모듈명"><a href="#import-모듈명" class="headerlink" title="import 모듈명"></a>import 모듈명</h1><ol><li><p>기본적인 형태</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import mymath</span><br><span class="line">print mymath.area(5)</span><br></pre></td></tr></table></figure></li><li><p>from 모듈명 import 가져올 대상</p><ul><li>해당 모듈에 존재하는 대상을 가져옴</li><li>기존에 존재하던 이름이면 기존 객체가 상실됨</li><li>모듈 이름 없이 바로 사용 가능<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from mymath import area, mypi</span><br><span class="line">print area(5)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>from 모듈명 import *</p><ul><li>해당 모듈에 존재하는 <code>__</code>로 시작되는 것들을 제외한 모든 대상을 가져옴<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">from mymath import *</span><br><span class="line">print area(5)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>import 모듈명 as 새로운 모듈 이름</p><ul><li>해당 모듈을 다른 이름으로 사용하고자 할 때 사용</li><li>기존 모듈 이름이 너무 길거나 현재 사용중인 이름인 경우 유용<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import string as chstr</span><br><span class="line">print chstr</span><br><span class="line">print</span><br><span class="line">print chstr.punctuation</span><br></pre></td></tr></table></figure></li></ul></li><li><p>from 모듈명 import 이름 as 새로운 이름[, 이름 as 새로운 이름]</p><ul><li>해당 모듈 내에 정의된 이름을 새로운 이름으로 사용하고자 할 때<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">from string import replace as substitute[, upper as up]</span><br><span class="line">print substitute</span><br><span class="line">print substitute(&apos;ham chicken spam&apos;, &apos;chicke&apos;, &apos;egg&apos;)</span><br><span class="line"></span><br><span class="line">print up</span><br><span class="line">print up(&apos;abc&apos;)</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li>import문은 어디에서나 사용가능(함수 내에서도 가능)</li></ul><hr><h1 id="컴파일과-적재시간"><a href="#컴파일과-적재시간" class="headerlink" title="컴파일과 적재시간"></a>컴파일과 적재시간</h1><ul><li><p><code>import mymath</code>를 수행할 때 발생하는 일</p><ol><li><code>mymath.pyc</code>를 찾는다</li><li>없다면 <code>mymath.py</code>를 찾아서 <code>mymath.pyc</code>를 생성한다</li><li><code>mymath.pyc</code>를 메모리로 읽어들여 수행한다</li></ol></li><li><p><code>.pyc</code>파일</p><ol><li><p>바이트 코드 파일</p><ul><li>기계나 플랫폼(운영체제 등)에 의존하지 않도록 만들어진 일종의 목적 코드(Object code)</li><li>파이썬은 컴파일 언어이면서 동시에 인터프리터 언어의 수행 방식을 취함</li></ul></li><li><p>새로운 <code>.pyc</code>파일 생성에 대한 판단</p><ul><li><code>.py</code>수정시간이 <code>.pyc</code>수정 시간보다 더 최근일 때</li></ul></li><li><code>.py</code>가 없이 <code>.pyc</code>파일만 있어도 <code>import</code>가능<ul><li>코드를 숨기는 방법으로 활용 가능</li></ul></li></ol></li></ul><hr><h1 id="같은-이름을-다시-사용할-때"><a href="#같은-이름을-다시-사용할-때" class="headerlink" title="같은 이름을 다시 사용할 때"></a>같은 이름을 다시 사용할 때</h1><ul><li>같은 이름 사용하면 이전의 내용이 삭제되지만 모듈은 메모리에 남아있고, 다시 <code>import</code>하면 다시 가져오는 것이 아니라 메모리에 존재하는 모듈을 활용함</li></ul><hr><h1 id="모듈의-실행과-테스트-코드"><a href="#모듈의-실행과-테스트-코드" class="headerlink" title="모듈의 실행과 테스트 코드"></a>모듈의 실행과 테스트 코드</h1><ul><li><p><code>__name__</code></p><ul><li>현재의 모듈이 최상위 모듈로서 수행되는지, 아니면다른 모듀렝 의해 <code>imort</code>되어 수행되는지를 구별하기 위해 주로 사용</li><li><p>최상위 모듈에서 사용할 때 -&gt; <code>__main__</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print __name__ # __main__ 출력</span><br><span class="line"></span><br><span class="line">import prname</span><br><span class="line">print prname.__name__ # prname출력</span><br></pre></td></tr></table></figure></li><li><p>사용방법</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">def add(a, b):</span><br><span class="line">  return a + b</span><br><span class="line"></span><br><span class="line">def f():</span><br><span class="line">  print &quot;Python is becoming popular.&quot;</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">  print add(1, 10)</span><br><span class="line">  f()</span><br></pre></td></tr></table></figure><ul><li>직접 실행할 때는 <code>if</code>절 동작</li><li>다른 곳에서 활용할 경우 <code>if</code>절 무시</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;import-모듈명&quot;&gt;&lt;a href=&quot;#import-모듈명&quot; class=&quot;headerlink&quot; title=&quot;import 모듈명&quot;&gt;&lt;/a&gt;import 모듈명&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;기본적인 형태&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 람다(lambda) 함수</title>
    <link href="http://bongbooski.github.io/2018/04/12/post18-python-lambda/"/>
    <id>http://bongbooski.github.io/2018/04/12/post18-python-lambda/</id>
    <published>2018-04-12T05:19:37.000Z</published>
    <updated>2018-04-15T02:56:27.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="람다-lambda-함수-정의"><a href="#람다-lambda-함수-정의" class="headerlink" title="람다(lambda)함수 정의"></a>람다(lambda)함수 정의</h1><ul><li>일반적인 함수를 한 줄의 문으로 정의할 수 있는 새로운 함수 정으 ㅣ리터럴</li><li>일회성으로 활용할 함수 정의할 때 주로 사용</li><li><code>:</code>뒤에는 식만 올 수 있음</li><li>람다 함수도 하나의 객체임</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = lambda x: x + 1</span><br><span class="line">print f(1)</span><br></pre></td></tr></table></figure><ol><li><p>인수가 두 개 있는 람다 함수를 지니는 변수 지정 및 함수 호출</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g = lambda x,y: x + y</span><br><span class="line">print g(1,2)</span><br></pre></td></tr></table></figure></li><li><p>기본 인수를 지니는 람다 함수 정의</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = lambda x, inc=1: x+inc</span><br><span class="line">print g(10) # inc기본 인수 값으로 1사용</span><br><span class="line">print g(10, 5)</span><br></pre></td></tr></table></figure></li><li><p>가변 인수를 지니는 람다 함수 정의</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vargs = lambda x, *args: args #args가 리턴됨</span><br><span class="line">print vars(1,2,3,4,5)</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="람다-함수-사용하기"><a href="#람다-함수-사용하기" class="headerlink" title="람다 함수 사용하기"></a>람다 함수 사용하기</h2><ul><li><p>일반 함수 사용</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">def f1(x):</span><br><span class="line">  return x*x + 3*x - 10</span><br><span class="line"></span><br><span class="line">def f2(x):</span><br><span class="line">  return x*x*x</span><br><span class="line"></span><br><span class="line">def g(func):</span><br><span class="line">  return [func(x) for x in range(-10, 10)]</span><br><span class="line"></span><br><span class="line">print g(f1)</span><br><span class="line">print g(f2)</span><br></pre></td></tr></table></figure></li><li><p>람다 함수 사용</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def g(func):</span><br><span class="line">  return [func(x) for x in range(-10, 10)]</span><br><span class="line"></span><br><span class="line">print g(lambda x: x*x + 3*x - 10)</span><br><span class="line">print g(lambda x: x*x*x)</span><br></pre></td></tr></table></figure></li></ul><h2 id="람다-함수-활용"><a href="#람다-함수-활용" class="headerlink" title="람다 함수 활용"></a>람다 함수 활용</h2><ul><li><code>map</code>, <code>filter</code>, <code>reduce</code> 내장 함수</li></ul><ol><li><p><code>map</code> 내장 함수</p><ul><li><p><code>map(function, seq)</code>: <code>seq</code>의 원소를 차례로 돌면서 <code>function</code>에 적용한 결과를 <code>seq</code>의 자료형으로 반환</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def f(x):</span><br><span class="line">  return x * x</span><br><span class="line">X - [1,2,3,4,5]</span><br><span class="line">Y = map(f, X)</span><br><span class="line">print Y</span><br></pre></td></tr></table></figure></li><li><p><code>map</code>과 람다 함수를 동시에 사용 - 가장 추천</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X = [1,2,3,4,5]</span><br><span class="line">print map(lambda x: x * x, X)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>filter</code> 내장 함수</p><ul><li><code>seq</code>자료형이 지닌 각 원소값에 대해 <code>function</code>에 적용한 결과가 참인 원소값들만을 동일 시퀀스 자료형으로 반환<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print filter(lambda x: x&gt;2, [1,2,3,45])</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>reduce</code> 내장 함수</p><ul><li><code>reduce(function, seq[,initial])</code></li><li><code>seq</code>자료형이 지닌 각 원소값에 대해 <code>function</code>함수를 적용하면서 하나의 값으로 매핑</li><li>첫번째 인자(<code>function</code>)는 반드시 두 개의 인자(ex. x,y)를 받아야한다.<ul><li><code>seq</code>의 각 원소값들이 차례로 y에 들어간다</li><li>함수가 수행된 값은 차례대로 x에 들어간다</li></ul></li><li>추가적으로 제공가능한 세번재 인자인 <code>initial</code>은 첫번째 단계에서 x에 할당할 초기값으로 사용된다<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print reduce(lambda x, y: x + y, [1,2,3,4,5])</span><br><span class="line">print reduce(lambda x, y: x + y, [1,2,3,4,5], 1000)</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;람다-lambda-함수-정의&quot;&gt;&lt;a href=&quot;#람다-lambda-함수-정의&quot; class=&quot;headerlink&quot; title=&quot;람다(lambda)함수 정의&quot;&gt;&lt;/a&gt;람다(lambda)함수 정의&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;일반적인 함수를 한 줄
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 파일 다루기</title>
    <link href="http://bongbooski.github.io/2018/04/11/post17_python-file,directory/"/>
    <id>http://bongbooski.github.io/2018/04/11/post17_python-file,directory/</id>
    <published>2018-04-11T06:38:47.000Z</published>
    <updated>2018-04-11T07:36:37.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="파일-다루기"><a href="#파일-다루기" class="headerlink" title="파일 다루기"></a>파일 다루기</h1><h2 id="파일-목록열기"><a href="#파일-목록열기" class="headerlink" title="파일 목록열기"></a>파일 목록열기</h2><p><code>os</code>모듈 사용<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line"></span><br><span class="line">print os.listdir(&apos;.&apos;) #현재 디렉토리의 파일목록</span><br><span class="line">print</span><br><span class="line"></span><br><span class="line">print os.listdir(&apos;../&apos;) #현재 디렉토리의 부모 디렉토리의 파일 목록</span><br></pre></td></tr></table></figure></p><hr><h2 id="파일-종류-알아보기"><a href="#파일-종류-알아보기" class="headerlink" title="파일 종류 알아보기"></a>파일 종류 알아보기</h2><ul><li><code>os.path</code> 모듈로 파일 종류 판단하여 <code>True</code>, <code>False</code> 반환<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">def filetype(fpath):</span><br><span class="line">  print fpath, &quot;:&quot;,</span><br><span class="line">  if os.path.isfile(fpath):</span><br><span class="line">    print &apos;Regular file&apos;</span><br><span class="line">  if os.path.isdir(fpath):</span><br><span class="line">    print &apos;Directory&apos;</span><br><span class="line">  if os.path.islink(fpath):</span><br><span class="line">    print &apos;Symbolic link&apos;</span><br><span class="line"></span><br><span class="line">flist = os.listdir(&apos;.&apos;)</span><br><span class="line">for fname in flist:</span><br><span class="line">  filetype(fname)</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="파일의-허가권"><a href="#파일의-허가권" class="headerlink" title="파일의 허가권"></a>파일의 허가권</h2><ol><li><p>파일의 허가권 알아보기</p><ul><li><code>os.access(filepath, mode)</code><ul><li><code>mode</code>에 들어갈 값<ul><li><code>os.F_OK</code>: 파일 자체가 존재하는 것을 테스트</li><li><code>os.R_OK</code>: 읽기 권한이 있는 것을 테스트</li><li><code>os.W_OK</code>: 쓰기 권한이 있는 것을 테스트</li><li><code>os.X_OK</code>: 실행 권한이 있는 것(또는 디렉토리인지)을 테스트</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">def fileaccess(fpath):</span><br><span class="line">  print fpath, &apos;:&apos;,</span><br><span class="line">  if os.access(fpath, os.F_OK):</span><br><span class="line">    print &apos;Exists&apos;,</span><br><span class="line">  else:</span><br><span class="line">    return</span><br><span class="line">  if os.access(fpath, os.R_OK):</span><br><span class="line">    print &apos;R&apos;,</span><br><span class="line">  if os.access(fpath, os.W_OK):</span><br><span class="line">    print &apos;W&apos;,</span><br><span class="line">  if os.access(fpath, os.X_OK):</span><br><span class="line">    print &apos;X&apos;,</span><br><span class="line">  print</span><br><span class="line"></span><br><span class="line">flist = os.listdir(&apos;.&apos;)</span><br><span class="line">for fname in flist:</span><br><span class="line">  fileaccess(fname)</span><br></pre></td></tr></table></figure></li><li><p>파일의 허가권 변경하기</p><ul><li><code>os.chmod(filepath, mode)</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.chmod(&apos;sample.txt&apos;, 0777)</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="파일-조작하기"><a href="#파일-조작하기" class="headerlink" title="파일 조작하기"></a>파일 조작하기</h2><ol><li><p>파일 이름 변경하기</p><ul><li><code>os.rename(old_filepath, new_filepath)</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.rename(&apos;t.txt&apos;, &apos;t1.txt&apos;)</span><br><span class="line"></span><br><span class="line">print os.access(&apos;t.txt&apos;, os.F_OK) # 파일 존재 여부 확인</span><br><span class="line">print os.access(&apos;t1.txt&apos;, os.F_OK)</span><br></pre></td></tr></table></figure></li><li><p>파일 이동하기</p><ul><li><p><code>os.rename(oldfilepath, new_filepath)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">os.rename(&apos;t.txt&apos;, &apos;example/t1.txt&apos;)</span><br><span class="line"></span><br><span class="line"># 파일 존재 여부 확인</span><br><span class="line">print os.access(&apos;example/t1.txt&apos;, os.F_OK)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>파일 복사하기</p><ul><li><code>shutil</code>모듈 활용</li><li><code>shutil.copyfile(src_filepath, dest_filepath)</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import shutil</span><br><span class="line">shutil.copyfile(&apos;sample.txt&apos;, &apos;sample_new.txt&apos;)</span><br><span class="line">print os.access(&apos;sample_new.txt&apos;, os.F_OK)</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="파일-이름-다루기"><a href="#파일-이름-다루기" class="headerlink" title="파일 이름 다루기"></a>파일 이름 다루기</h2><ol><li><p>상대 경로를 절대 경로로 변환하기</p><ul><li><code>os.path.abspath</code> - 상대경로<ul><li>실제 파일 존재와는 무관하게 절대경로로 변경<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">print os.path.abspath(&apos;o.txt&apos;)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>주어진 경로에 파일이 존재하는지 확인</p><ul><li><code>os.path.exists(filepath)</code></li></ul></li></ol><hr><h2 id="경로명-분리하기"><a href="#경로명-분리하기" class="headerlink" title="경로명 분리하기"></a>경로명 분리하기</h2><ol><li><p>경로와 파일명으로 분리</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = &apos;/Users/booski/git/python/t.txt&apos;</span><br><span class="line"></span><br><span class="line">print os.path.basename(f) # 파일명만 추출</span><br><span class="line">print os.path.dirname(f) # 디렉토리 경로 추출</span><br></pre></td></tr></table></figure></li><li><p>경로명과 파일명을 한번에 분리 - basename과 dirname을 튜플로 확인</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print os.path.split(f)</span><br></pre></td></tr></table></figure></li><li><p>MS윈도우즈에서 드라이브명과 파일 경로명을 분리</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print os.path.splitdrive(f)</span><br></pre></td></tr></table></figure></li><li><p>확장자 분리 - 경로와 확장자명으로 튜플 생성</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print os.path.splitext(f)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;파일-다루기&quot;&gt;&lt;a href=&quot;#파일-다루기&quot; class=&quot;headerlink&quot; title=&quot;파일 다루기&quot;&gt;&lt;/a&gt;파일 다루기&lt;/h1&gt;&lt;h2 id=&quot;파일-목록열기&quot;&gt;&lt;a href=&quot;#파일-목록열기&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 표준 입출력</title>
    <link href="http://bongbooski.github.io/2018/04/10/post16_standardIO/"/>
    <id>http://bongbooski.github.io/2018/04/10/post16_standardIO/</id>
    <published>2018-04-10T09:09:17.000Z</published>
    <updated>2018-04-10T09:42:21.949Z</updated>
    
    <content type="html"><![CDATA[<h2 id="sys-모듈의-표준-입출력-모니터-관련-객체"><a href="#sys-모듈의-표준-입출력-모니터-관련-객체" class="headerlink" title="sys 모듈의 표준 입출력(모니터) 관련 객체"></a>sys 모듈의 표준 입출력(모니터) 관련 객체</h2><ul><li>sys.stdout: 표준 입출력</li><li>sys.stderr: 표준 에러 출력</li><li>sys.stdin: 표준 입력</li></ul><h3 id="표준-출력으로-파일-저장하기"><a href="#표준-출력으로-파일-저장하기" class="headerlink" title="표준 출력으로 파일 저장하기"></a>표준 출력으로 파일 저장하기</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import sys</span><br><span class="line"></span><br><span class="line">f = open(&apos;t.txt&apos;,&apos;w&apos;)</span><br><span class="line">stdout = sys.stdout #표준 출력 저장</span><br><span class="line">sys.stdout = f #파일 객체로 표준 출력 변경</span><br><span class="line">print &apos;Sample output&apos;</span><br><span class="line">pirnt &apos;Good&apos;</span><br><span class="line">print &apos;Good&apos;</span><br><span class="line">f.close()</span><br><span class="line">sys.stdout = stdout #표준 출력 복원</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;sys-모듈의-표준-입출력-모니터-관련-객체&quot;&gt;&lt;a href=&quot;#sys-모듈의-표준-입출력-모니터-관련-객체&quot; class=&quot;headerlink&quot; title=&quot;sys 모듈의 표준 입출력(모니터) 관련 객체&quot;&gt;&lt;/a&gt;sys 모듈의 표준 입출
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 파일 입출력</title>
    <link href="http://bongbooski.github.io/2018/04/09/post16_python_fileIO/"/>
    <id>http://bongbooski.github.io/2018/04/09/post16_python_fileIO/</id>
    <published>2018-04-09T06:09:17.000Z</published>
    <updated>2018-04-10T14:26:10.730Z</updated>
    
    <content type="html"><![CDATA[<h1 id="파일-입출력"><a href="#파일-입출력" class="headerlink" title="파일 입출력"></a>파일 입출력</h1><p><code>open</code>내장 함수 사용시 두번째 인자값으로 mode설정<br>생략시 읽기전용(r)으로 설정</p><ol><li><code>r</code> -읽기 전용 - 파일 객체를 읽기 모드로 생성, 파일 포인터를 파일 처음 위치로, 존재하지 않는 파일이면 에러발생</li><li><code>w</code> - 쓰기 전용 - 새로운 파일을 생성하거나 기존 파일의 내용을 다 없애고 쓰기모드로 생성, 파일 포인터를 파일 처음 위치로</li><li><code>a</code> - 파일 끝에 추가 - 이미 존재하는 파일을 쓰기모드로 생성하거나 존재하지 않으면 파일 만들고 생성, 파일 포인터를 마지막 위치에 놓음</li></ol><h2 id="이진파일-모드"><a href="#이진파일-모드" class="headerlink" title="이진파일 모드"></a>이진파일 모드</h2><ul><li><code>rb</code></li><li><code>wb</code></li><li><code>ab</code></li></ul><hr><p><code>f.close()</code>처럼 <code>close()</code>로 그때그때 닫아주는 것이 좋음</p><p><code>read()</code>를 사용하면 전체를 다 읽어서 할당함</p><h2 id="라인단위로-파일-읽기"><a href="#라인단위로-파일-읽기" class="headerlink" title="라인단위로 파일 읽기"></a>라인단위로 파일 읽기</h2><ol><li><p><code>for</code> 반복문 활용</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;t.txt&apos;)</span><br><span class="line">i = 1</span><br><span class="line">for line in f:</span><br><span class="line">  print i, &quot;:&quot;, line,</span><br><span class="line">  i += 1</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li><p><code>readline()</code>-현재의 파일 포인터에서 개행 문자까지 읽음 = 한 라인</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;t.txt&apos;)</span><br><span class="line">line = f.readline()</span><br><span class="line">i = 1</span><br><span class="line">while line:</span><br><span class="line">  print i, &quot;:&quot;, line,</span><br><span class="line">  line = f.readline()</span><br><span class="line">  i += 1</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li><p><code>readlines()</code>-각 라인을 모두 읽어서 리스트로 저장, 메모리는 비효율적으로 사용<br>상황별로 다른 동작함 - <code>for in</code>구문: 전체x, 라인별로 가져옴</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;t.txt&apos;)</span><br><span class="line">print f.readlines() #리스트 나옴</span><br><span class="line"></span><br><span class="line">#파일 포인터를 맨 앞으로</span><br><span class="line">f.seek(0)</span><br><span class="line"></span><br><span class="line">i = 1</span><br><span class="line">for line in f.readlines():</span><br><span class="line">  print i, &quot;:&quot;, line,</span><br><span class="line">  i += 1</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li><p><code>xreadlines()</code> - 메모리 비효율 개선</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;t.txt&apos;)</span><br><span class="line">print f.xreadlines() #파일객체 자체가 나옴</span><br><span class="line"></span><br><span class="line">#파일 포인터를 맨 앞으로</span><br><span class="line">f.seek(0)</span><br><span class="line"></span><br><span class="line">i = 1</span><br><span class="line">for line in f.xreadlines():</span><br><span class="line">  print i, &quot;:&quot;, line,</span><br><span class="line">  i += 1</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ol><p><strong><em><code>for in</code> 또는 <code>xreadlines()</code> 추천</em></strong></p><hr><h2 id="라인-단위로-쓰는-방법"><a href="#라인-단위로-쓰는-방법" class="headerlink" title="라인 단위로 쓰는 방법"></a>라인 단위로 쓰는 방법</h2><ol><li><p><code>writelines()</code> - 라인단위로 쓰기 작업</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lines = [&apos;1st line\n&apos;, &apos;2nd line\n&apos;, &apos;3rd line\n&apos;]</span><br><span class="line">f = open(&apos;t1.txt&apos;,&apos;w&apos;)</span><br><span class="line">f.writelines(lines)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f = open(&apos;t1.txt&apos;)</span><br><span class="line">print f.read() #전체내용 읽음</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li><p><code>write()</code> - 임의로 중간에 ‘\n’ 넣어줌</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lines = [&apos;1st line&apos;, &apos;2nd line&apos;, &apos;3rd line&apos;]</span><br><span class="line">f = open(&apos;t1.txt&apos;,&apos;w&apos;)</span><br><span class="line">f.write(&apos;\n&apos;.join(lines))</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f = open(&apos;t1.txt&apos;)</span><br><span class="line">print f.read() #전체내용 읽음</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ol><h2 id="기존-파일에-내용-추가"><a href="#기존-파일에-내용-추가" class="headerlink" title="기존 파일에 내용 추가"></a>기존 파일에 내용 추가</h2><ul><li><code>a</code>모드 사용<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f = open(&apos;removeme.txt&apos;, &apos;a&apos;)</span><br><span class="line">f.write(&apos;3rd line\n&apos;)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f = open(&apos;removeme.txt&apos;)</span><br><span class="line">print f.read()</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ul><h2 id="파일-내-임의-위치로-접근"><a href="#파일-내-임의-위치로-접근" class="headerlink" title="파일 내 임의 위치로 접근"></a>파일 내 임의 위치로 접근</h2><ul><li>순차접근</li><li>임의접근<ul><li><code>seek(n)</code> - 파일의 가장 첫번째 위치에서 n번째 바이트로 포인터이동</li><li><code>tell()</code> - 파일 내 현재 포인터 위치를 반환</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name = &apos;t.txt&apos;</span><br><span class="line">f = open(name, &apos;w+&apos;) # 읽고 쓰기모드</span><br><span class="line">s = &apos;0123456789asdf&apos;</span><br><span class="line">f.write(s)</span><br><span class="line"></span><br><span class="line">f.seek(5)</span><br><span class="line">print f.tell()</span><br><span class="line">print f.read(1)</span><br><span class="line">print f.tell()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;파일-입출력&quot;&gt;&lt;a href=&quot;#파일-입출력&quot; class=&quot;headerlink&quot; title=&quot;파일 입출력&quot;&gt;&lt;/a&gt;파일 입출력&lt;/h1&gt;&lt;p&gt;&lt;code&gt;open&lt;/code&gt;내장 함수 사용시 두번째 인자값으로 mode설정&lt;br&gt;생략시 읽기전
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>.gitignore, config파일 사용</title>
    <link href="http://bongbooski.github.io/2018/03/22/post15_gitignore+config-setting/"/>
    <id>http://bongbooski.github.io/2018/03/22/post15_gitignore+config-setting/</id>
    <published>2018-03-22T06:09:17.000Z</published>
    <updated>2018-03-22T06:15:20.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="새노트북"><a href="#새노트북" class="headerlink" title="새노트북"></a>새노트북</h1><p>여러 프로젝트를 두 노트북에서 함께 진행할 예정인데 새 노트북에 기존 코드들을 넘겨와야함</p><p>데이터베이스 비밀번호 등 개인정보가 마음에 걸려서 설정파일로 빼보려고하니 일이 커짐</p><p><code>.gitignore</code>사용한 것과 <code>config</code>폴더, 파일 사용법 포스팅할 예정</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;새노트북&quot;&gt;&lt;a href=&quot;#새노트북&quot; class=&quot;headerlink&quot; title=&quot;새노트북&quot;&gt;&lt;/a&gt;새노트북&lt;/h1&gt;&lt;p&gt;여러 프로젝트를 두 노트북에서 함께 진행할 예정인데 새 노트북에 기존 코드들을 넘겨와야함&lt;/p&gt;
&lt;p&gt;데이터베이
      
    
    </summary>
    
    
      <category term="github" scheme="http://bongbooski.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://bongbooski.github.io/2018/03/22/hello-world/"/>
    <id>http://bongbooski.github.io/2018/03/22/hello-world/</id>
    <published>2018-03-22T06:09:16.793Z</published>
    <updated>2018-02-19T08:25:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>node.js 게시판 만들기 첫 포스팅</title>
    <link href="http://bongbooski.github.io/2018/03/07/post14_nodejs-bulletin-board_kr/"/>
    <id>http://bongbooski.github.io/2018/03/07/post14_nodejs-bulletin-board_kr/</id>
    <published>2018-03-07T09:09:17.000Z</published>
    <updated>2018-03-07T13:14:50.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="시작"><a href="#시작" class="headerlink" title="시작"></a>시작</h1><p><code>node.js</code>의 전반적인 내용을 훑고 공부할 겸 게시판만들기 프로젝트를 시작했다.<br>이것저것 생각하며 만들다보니 영 속도도 안나고 삽질만 하고있지만..</p><hr><h1 id="삽질"><a href="#삽질" class="headerlink" title="삽질"></a>삽질</h1><p>어제까지 <code>route</code>와 <code>module</code>들을 하나하나 잡으며 고생했는데 알고보니<br><code>express framework</code>쓰니까 내가 이틀 고생해서 만든 것보다 더 깔끔하고 알찬 형태로<br>구성해 주더라..</p><hr><h1 id="local-mySQL"><a href="#local-mySQL" class="headerlink" title="local mySQL"></a>local mySQL</h1><p>로컬 <code>mySQL</code>로 <code>database</code>를 연동시키려고 했는데 웬걸, 실행이 안되고 있었다.<br>이전에 일하던 회사에서 익숙해진김에 <code>hediSQL</code>을 사용하는데 로그인이 안됐다.</p><p>알고보니 내 컴퓨터의 <code>mySQL</code>서비스가 꺼져있던것!<br>내컴퓨터 - 왼쪽에 있는 <code>내 PC</code>를 우클릭하면 나오는 <code>관리</code> - <code>서비스 및 응용 프로그램</code> - <code>서비스</code> - <code>mySQL</code>또는 <code>mySQL56</code>(버전마다 다를듯)을 실행하고나서 다시 <code>hediSQL</code>접속 시도하니까 접속가능!</p><hr><h1 id="routing-문제"><a href="#routing-문제" class="headerlink" title="routing 문제"></a>routing 문제</h1><p>게시판 종류를 두 개로 하려다보니 각각의 CRUD용 페이지를 구성하는게 고민이다.<br>어떤 부분을 하나로 쓰고 어떤 부분을 나누는게 가장 효율적일지는 좀더 생각해봐야 할 것 같다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;시작&quot;&gt;&lt;a href=&quot;#시작&quot; class=&quot;headerlink&quot; title=&quot;시작&quot;&gt;&lt;/a&gt;시작&lt;/h1&gt;&lt;p&gt;&lt;code&gt;node.js&lt;/code&gt;의 전반적인 내용을 훑고 공부할 겸 게시판만들기 프로젝트를 시작했다.&lt;br&gt;이것저것 생각하
      
    
    </summary>
    
    
      <category term="node.js" scheme="http://bongbooski.github.io/tags/node-js/"/>
    
  </entry>
  
  <entry>
    <title>OKKY세미나 IT회사 탐방기 - 18.02.27</title>
    <link href="http://bongbooski.github.io/2018/02/28/post13_okky_seminor_kr/"/>
    <id>http://bongbooski.github.io/2018/02/28/post13_okky_seminor_kr/</id>
    <published>2018-02-28T04:48:17.000Z</published>
    <updated>2018-03-01T08:04:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>TGL경복빌딩의 eBrain에서 있었던 OKKY세미나에 형들과 다녀왔다.<br>마이다스 아이티에서 10년 3개월 5일(?) 일하다가 나오신 황후순님이 세미나를 해주셨고,<br>주제는 <strong>IT회사 탐방기</strong> 였다.</p><p>황후순님의 이력에 대한 간단한 설명을 듣고<br>(안전도 시뮬레이션등을 하는 회사, 인공지능 면접 솔루션 개발 등),</p><p>어떻게 많은 회사들을 다녀오실 수 있었는지도말씀해주셨는데,<br><code>facebook</code>등과 같은 SNS를 활용하신다고 한다.</p><p>예를 들면 회사는 내가 누구인지 모르니 나를 알려야 하므로, 그 회사에 다니는 사람 등의<br>게시물에 댓글을 달거나 하는 식으로 인맥을 확장해 나가는 방식!<br>SNS에서 소통하다가 방문하는 방식이라고 한다.</p><hr><p>연사님은 개발자로 10년을 일을 하셨는데 퇴사를 하게 된 계기는 두가지라고 했다.</p><ol><li><strong>데이터 사이언스</strong>, <strong>AI</strong> 에 흥미가 있었고, <strong>TensorFlow</strong> 등에서 가져다 쓰는것보다는 직접 개발해보고 싶었다</li><li>영어를 활용하는 환경</li></ol><p><strong><em>싱가폴로!</em></strong></p><hr><h2 id="기업탐방-해외-싱가폴"><a href="#기업탐방-해외-싱가폴" class="headerlink" title="기업탐방 - 해외(싱가폴)"></a>기업탐방 - 해외(싱가폴)</h2><h3 id="싱가폴-페이스북"><a href="#싱가폴-페이스북" class="headerlink" title="싱가폴 페이스북"></a>싱가폴 페이스북</h3><ul><li>식당이 좋다, 다양한 종류의 사람들이 있으므로 음식도 종류별로 준비된다.</li><li>성과위주이기에 업무에 도움이 되거나 휴식을 위해 음주가 가능하지만 대부분 안함</li><li>모니터에 코드만 안찍히면 구경가서 사진촬영도 가능</li><li>모든 층이 계단으로 연결되어있고, <strong>face to face</strong> 를 선호한다 - 전화 잘 안울림</li><li>포토존이 많다. <em>왜..?</em></li><li>면접<ol><li>길다 - 한두달걸림</li><li>기술면접을 분야별로 본다</li><li>면접마다 평가해서 회사가 연봉을 측정</li><li>통과하면 면접자에게 희망연봉을 묻는다</li><li>측정치랑 일치하거나 측정치보다 낮으면 계약서, 측정치보다 높으면 협상<br><em>일단 한 10억 던지고 협상ㄱㄱ</em></li></ol></li><li><strong>몸값을 제대로 받아야 일도 제대로함 - 연봉만큼의 일이 들어옴</strong></li><li>순수개발자의 비중이 생각보다 작음 - <strong>로컬화</strong> 위주이기 때문</li></ul><p><br></p><h3 id="WeWork-stashaway-이주원님"><a href="#WeWork-stashaway-이주원님" class="headerlink" title="WeWork, stashaway(이주원님)"></a>WeWork, stashaway(이주원님)</h3><ul><li>면접<ol><li>페이스북과 다르다</li><li>면접자가 연봉을 먼저 제시하고</li><li>그 금액에 맞는 면접을 회사가 준비해온다 - 통과하면 처음 부른 액수 그대로 받는다</li></ol></li><li>한국: 신입은 개발좋아하는 사람, 경력은 필요한 스택에 맞는사람</li><li>싱가폴: 지원자가 잘하는 언어로 면접봄(연봉에 맞춘 난이도로), 나머지 언어는 들어와서 배우면됨</li><li>개발자에 대한 대우가 다르다 - 대졸4년차 기본연봉1억</li><li>회사보다는 가족 - 남들 쉴 때 일하는 것은 혼자 미꾸라지되겠다는 의미로 받아들임</li></ul><p><br></p><h3 id="Grab-아시아버전-우버-그랩"><a href="#Grab-아시아버전-우버-그랩" class="headerlink" title="Grab(아시아버전 우버) 그랩"></a>Grab(아시아버전 우버) 그랩</h3><ul><li>연사님이 만나신 분은 <code>Google Developer</code>신분(?)이셔서 코딩테스트 패스하셨고 화상면접, 라이브코딩 여러번을 거치셨다고 한다.</li><li>카카오 입사도 통과하셔서 그 연봉의 2.5배를 제시했는데 바로 계약서가 왔다(회사가 자체 평가한 금액을 넘지 못했다는 의미..)</li><li>입사연봉기준으로 다음 연봉협상 이뤄지기 때문에, 첫 연봉이 중요하다.</li></ul><p><br></p><h3 id="황후순님이-알려주신-팁"><a href="#황후순님이-알려주신-팁" class="headerlink" title="황후순님이 알려주신 팁!"></a>황후순님이 알려주신 팁!</h3><ul><li>혼자 공부하는건 오픈소스외에는 큰 프로젝트보기힘들다 따라서 회사에들어가서 배우는게 빠르다.</li><li>면접여러번 보다보면 언어도 늘기 때문에 영어에 너무 좌절하지 말것!</li><li>영어 회사들어가서 해라</li><li>기술을 보고, 사람을 본다</li><li>개발자는 개발에도 두려움을 가질 필요가 없다. 배우면되기에!</li></ul><p><em>싱가폴-&gt; 개발자가 일하기 좋은 나라</em><br><br></p><hr><h2 id="기업탐방-국내"><a href="#기업탐방-국내" class="headerlink" title="기업탐방(국내)"></a>기업탐방(국내)</h2><h3 id="Clova-naver"><a href="#Clova-naver" class="headerlink" title="Clova(naver)"></a>Clova(naver)</h3><ul><li>네이버의 인공지능분야 담당</li><li>AI관련해서는 면접자가 기여할 부분이 있다면 학사도 뽑음(싱가폴은 학사면 서류에서 이미 거른다고함)</li><li>성과중심 - 본인 업무를 다했다면 출근카드 찍기만 하면된다.<br><br><h3 id="우아한-형제들-배달의-민족"><a href="#우아한-형제들-배달의-민족" class="headerlink" title="우아한 형제들(배달의 민족)"></a>우아한 형제들(배달의 민족)</h3></li><li>평생직장따윈 없다, 최고가 되어 떠나라<br><br><h3 id="카카오"><a href="#카카오" class="headerlink" title="카카오"></a>카카오</h3></li><li>대부분 어떻게든 관리자가 되지 않으려고함. 개발자로 남으려함<br><br><h3 id="구글코리아"><a href="#구글코리아" class="headerlink" title="구글코리아"></a>구글코리아</h3></li><li>영어 중요하다, 아주 잘해야함</li><li>자유로운 문화 - 익히 아는 딱 그 문화</li><li>영어보다 소통능력이 더중요함 - 공감능력, 소통, 성과를 잘보여주는 능력</li><li>인사평가는 자기PR로 함</li><li>구글에 천재가 많음, 하고싶어서 하는 천재, 노력하는 천재가 많다.<br><br><h3 id="삼성SDS-애자일-코어팀"><a href="#삼성SDS-애자일-코어팀" class="headerlink" title="삼성SDS - 애자일 코어팀"></a>삼성SDS - 애자일 코어팀</h3></li><li>si회사로 볼 수 있지만 애자일 코어팀은 변화를 이끌고자 하는 조직</li><li>삼성의 새로운 문화를 이끌려는 조직<br><br><h3 id="셈웨어"><a href="#셈웨어" class="headerlink" title="셈웨어"></a>셈웨어</h3></li><li>서울대에 있는 회사</li><li>math tool개발</li><li>mathFreeOn</li><li><code>실패</code>라는 단어를 사용하지 않고 <code>실수</code>로 여김, <code>실수</code>는 <code>성공</code>하기 위한 과정임</li><li>우주의 움직임도 그래픽으로 물리, 지구과학등으로 분야 넒히려고 함 - 동현이?<br><br><h3 id="데일리-인텔리전스"><a href="#데일리-인텔리전스" class="headerlink" title="데일리 인텔리전스"></a>데일리 인텔리전스</h3></li><li>AI플랫폼 - 다빈치(DaVinCi)</li><li>은행 및 보험사</li></ul><ul><li>더루프 - 루프체인</li><li>인프런 - 강사와 사람들을 연결해주는 서비스<br><br><h3 id="오마이랩"><a href="#오마이랩" class="headerlink" title="오마이랩"></a>오마이랩</h3></li></ul><ul><li>잔디 시작한 개발자(최영근), 이규원 - c#개발자 오마이랩CTO<br><br><h3 id="코더블-상상충전소"><a href="#코더블-상상충전소" class="headerlink" title="코더블/ 상상충전소"></a>코더블/ 상상충전소</h3></li><li>교육커리큘럼, 책만듦<br><br></li></ul><hr><h1 id="프로vs-고수"><a href="#프로vs-고수" class="headerlink" title="프로vs 고수"></a>프로vs 고수</h1><p>나는 어느 쪽을 추구하는지 고민해볼 부분</p><ul><li>프로<ul><li>돈에 움직이는 사람,</li><li>회사에서 원하는 방향을 따르거나 맞는 곳을 찾아감</li><li>고객의 니즈를 맞춰줄 수 있는 사람</li><li>자신의 가치를 돈으로 판단<br><br></li></ul></li><li>고수<ul><li>일은 프로처럼함(고객의 니즈) + 자기의 생각을 담음</li><li>고객의 니즈를 바꾸지 않고 자신의 생각이 추가됨</li><li>자신에 대한 가치를 기술적인 것으로 판단<br><br></li></ul></li><li>은거하면서 아트하는데 그걸로돈도 들어오는…??</li></ul><h2 id="개발자-테크트리의-끝은"><a href="#개발자-테크트리의-끝은" class="headerlink" title="개발자 테크트리의 끝은?"></a>개발자 테크트리의 끝은?</h2><ul><li>관리자냐 테크니션이냐… 고민할 필요없다</li><li>회사에 필요한 기술을 공부하면됨 <strong>필요</strong> 한것을 공부</li><li>현재는 선택할 것이 많다(두갈래가 아니다)</li></ul><hr><p><strong><em>공부는 공부의 결과를 낳는다.</em></strong></p><ul><li>언어는 도구다!</li><li>책보다는 도큐먼트!</li><li>책은 모르고 쓰는 사람도 많다 - 책을 볼때는 다 코드짜보고 맞는지도 확인할것!</li><li>기술공부도 좋지만 시야와 그릇을 넓힐것.</li></ul><p><strong>개발은 80까지!!</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;TGL경복빌딩의 eBrain에서 있었던 OKKY세미나에 형들과 다녀왔다.&lt;br&gt;마이다스 아이티에서 10년 3개월 5일(?) 일하다가 나오신 황후순님이 세미나를 해주셨고,&lt;br&gt;주제는 &lt;strong&gt;IT회사 탐방기&lt;/strong&gt; 였다.&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="okky" scheme="http://bongbooski.github.io/tags/okky/"/>
    
  </entry>
  
  <entry>
    <title>why hexo blog changes the language automacitally</title>
    <link href="http://bongbooski.github.io/2018/02/22/post12_why-hexo-blog-changes-the-language-automacitally/"/>
    <id>http://bongbooski.github.io/2018/02/22/post12_why-hexo-blog-changes-the-language-automacitally/</id>
    <published>2018-02-22T14:01:17.000Z</published>
    <updated>2018-02-22T14:52:10.000Z</updated>
    
    <content type="html"><![CDATA[<p>Almost whenever I check my hexo github blog no matter local or github,<br>the language kept being changed like an alive creature.</p><p>One time that was in English, next time it was in Spanish, next time it was in<br>French, and then it was in Indonesian.</p><p><em>yeah it was so crazy</em></p><p>So I checked <code>hexo</code>‘s document.<br>-&gt; <a href="https://hexo.io/docs/internationalization.html" target="_blank" rel="noopener">https://hexo.io/docs/internationalization.html</a></p><p>And I found the reason and how to <strong>SET</strong> your blog’s language.</p><p><code>hexo</code> says that if we set <code>i18n_dir</code> as <code>lang</code>, they will detect the language within the first segment of <code>URL</code>. For example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/index.html =&gt; en</span><br><span class="line">/archives/index.html =&gt; en</span><br><span class="line">/zh-tw/index.html =&gt; zh-tw</span><br></pre></td></tr></table></figure></p><p>The string will only be served as a language when the language file exists. So archives in /archives/index.html (example 2) will not get served as a language.</p><p>But it was odd. When my blog shows French, <code>request headers</code> message’s language part setting was right(in Korean or English).</p><p>I don’t know why the other languages appeared but after setting <code>language</code>option<br>as <code>en</code> in <code>_config.yml</code> and then deleted, it became ok.</p><p>Until now I think it’s about <code>hexo-i18n</code> but I don’t understand why;;<br>If this blog’s language is weird then notice me. In case I will see again,<br>I will try to find the reason again</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Almost whenever I check my hexo github blog no matter local or github,&lt;br&gt;the language kept being changed like an alive creature.&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="hexo" scheme="http://bongbooski.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Node.js server starting module</title>
    <link href="http://bongbooski.github.io/2018/02/22/post11_Node-js-server-starting-module/"/>
    <id>http://bongbooski.github.io/2018/02/22/post11_Node-js-server-starting-module/</id>
    <published>2018-02-22T12:30:34.000Z</published>
    <updated>2018-02-22T12:47:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>#Server Strting module<br>This module can be used without abstracting by <code>require()</code>method.</p><p>When this module is installed, the code uses <code>-g</code> option. <code>-g</code> makes the installing globally.<br>Then the modules which are installed with <code>-g</code> option are placed in <code>{prefix}/lib/node_modules</code> and the executable files are placed in <code>{prefix}/bin</code></p><p>We will install <code>supervisor</code> and <code>forever</code> modules with the option like this.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g supervisor</span><br><span class="line">npm install -g forever</span><br></pre></td></tr></table></figure><hr><p>#supervisor module<br><code>Node.js</code> programming makes us stop and restart the <code>server</code> again and again whenever we need to change the code because though the files are changed, the script executing doesn’t get impact. But, <code>supervisor</code> module recognizes the difference and restarts the <code>server</code> automatically.</p><p>we can check their document here -&gt; <a href="https://github.com/petruisfan/node-supervisor" target="_blank" rel="noopener">https://github.com/petruisfan/node-supervisor</a></p><p><code>supervisor</code> module’s basic usage is <code>supervisor (file name)</code> .</p><p>We will see what happens with the module from now on.</p><p>I made a code for showing the changing. When I made this code,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&quot;http&quot;);</span><br><span class="line"></span><br><span class="line">http.createServer(function ( request, response)&#123;</span><br><span class="line">    response.writeHead(200, &#123;&apos;Content-Type&apos;:&apos;text/html&apos;&#125;);</span><br><span class="line">    response.end(&apos;&lt;h1&gt;Supervisor test - 1&lt;/h1&gt;&apos;);</span><br><span class="line">&#125;).listen(52273, function()&#123;</span><br><span class="line">    console.log(&quot;Server Running at http://127.0.0.1:52273&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>I see the page when I enter <code>http://127.0.0.1:52273</code> or <code>localhost:52273</code><br><img src="/images/supervisor1.png" alt=""></p><p>And I change and save the <code>server</code> code file like this without restarting,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&quot;http&quot;);</span><br><span class="line"></span><br><span class="line">http.createServer(function ( request, response)&#123;</span><br><span class="line">    response.writeHead(200, &#123;&apos;Content-Type&apos;:&apos;text/html&apos;&#125;);</span><br><span class="line">    response.end(&apos;&lt;h1&gt;Supervisor test - 2&lt;/h1&gt;&apos;);</span><br><span class="line">&#125;).listen(52273, function()&#123;</span><br><span class="line">    console.log(&quot;Server Running at http://127.0.0.1:52273&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>and then refresh the web page, the page is changed like this.<br><img src="/images/supervisor2.png" alt=""></p><p><code>supervisor</code> module restarts any programs when the code ends no matter what the programs are. This means in the case we run some short code like<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;Run with supervisor&quot;);</span><br></pre></td></tr></table></figure></p><p>the program gets infinite restarting.<br>so we should use the module when we start server program.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;#Server Strting module&lt;br&gt;This module can be used without abstracting by &lt;code&gt;require()&lt;/code&gt;method.&lt;/p&gt;
&lt;p&gt;When this module is install
      
    
    </summary>
    
    
      <category term="Node.js" scheme="http://bongbooski.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js File System 모듈</title>
    <link href="http://bongbooski.github.io/2018/02/22/post10_Node-js-File-System-Module-kr/"/>
    <id>http://bongbooski.github.io/2018/02/22/post10_Node-js-File-System-Module-kr/</id>
    <published>2018-02-22T10:36:52.000Z</published>
    <updated>2018-02-22T12:07:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>모든 <code>HTML</code> 페이지를 자바스크립트로 작성하기는 힘들다.<br><code>file system</code>모듈은 서버에 있는 <code>HTML</code>페이지를 사용자들에게 보여줄 수 있게 해준다.</p><p>HTML페이지(<code>HTMLPage.html</code>)을 사용자에게 제공하기 위해서 자바스크립트 파일을 다음과 같이 작성해보았다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const fs = require(&quot;fs&quot;);</span><br><span class="line">const http = require(&quot;http&quot;);</span><br><span class="line"></span><br><span class="line">http.createServer(function(request, response)&#123;</span><br><span class="line">  fs.readFile(&quot;HTMLPage.html&quot;, function(error, data)&#123;</span><br><span class="line">    response.writeHead(200, &#123;&quot;Content-Type:&quot;:&quot;text/html&quot;&#125;);</span><br><span class="line">    response.end(data);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).listen(52273, function()&#123;</span><br><span class="line">  console.log(&quot;server running at http://127.0.0.1:52273/&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>만약 다른 종류의 파일을 제공하고 싶다면, 5번째 줄의 <code>MIME</code>타입을 바꿔서 제공할 수 있다.<br>예를 들어 <code>jpeg</code>파일의 경우는 <code>text/html</code>을 <code>image/jpeg</code>로 변경하여 제공할 수 있다.<br>또한 다른 <code>MIME</code> 타입들도 동일한 방식을 적용할 수 있다.</p><h3 id="MIME-타입들-예시"><a href="#MIME-타입들-예시" class="headerlink" title="MIME 타입들 예시"></a>MIME 타입들 예시</h3><ul><li><code>text/plain</code> — 기본 텍스트</li><li><code>text/html</code> — HTML 문서</li><li><code>text/css</code> — CSS 문서</li><li><code>text/xml</code> — XML 문서</li><li><code>image/jpeg</code> — JPG/JPEG 이미지 파일</li><li><code>image/png</code> — PNG 이미지 파일</li><li><code>video/mpeg</code> — MPEG 영상 파일</li><li><code>audio/mp3</code> — MP3 음악 파일</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;모든 &lt;code&gt;HTML&lt;/code&gt; 페이지를 자바스크립트로 작성하기는 힘들다.&lt;br&gt;&lt;code&gt;file system&lt;/code&gt;모듈은 서버에 있는 &lt;code&gt;HTML&lt;/code&gt;페이지를 사용자들에게 보여줄 수 있게 해준다.&lt;/p&gt;
&lt;p&gt;HTML
      
    
    </summary>
    
    
      <category term="Node.js" scheme="http://bongbooski.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js http 모듈</title>
    <link href="http://bongbooski.github.io/2018/02/22/post9_Node-js-http-module-kr/"/>
    <id>http://bongbooski.github.io/2018/02/22/post9_Node-js-http-module-kr/</id>
    <published>2018-02-22T10:24:22.000Z</published>
    <updated>2018-02-22T10:30:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>우리가 치킨을 시켜먹을때, 전화로 이렇게 말한다</p><p>“여기는 A아파트구요, B동 C호에요… 치킨 한마리 배달해주세요”</p><p>그러면 우리는 약간의 시간 뒤에 우리가 주문한 치킨을 집(전화로 말한 주소)에서 받게 된다.</p><p>이러한 맥락에서 <code>URL</code>을 웹 브라우저에 입력하는 것은 치킨을 시키는 전화로 볼 수 있고,<br>웹페이지를 웹브라우저으로부터 받는 것을 치킨집으로부터 치킨을 받는 것으로 볼 수 있다.<br>이러한 비유가 웹페이지의 요청과 응답에 대한 기본적인 이해이다.</p><p>서버는 요청을 보내는 방법에 따라 <code>http</code> 웹서버 또는 <code>https</code> 웹서버 등으로 불린다.<br>요청메시지를 사용하면, 유저들에게 더 적합한 웹페이지를 보여줄 수 있다.<br>응답메시지를 사용하면, 쿠키를 사용, 저장하거나 페이지 강제 이동 등의 추가 기능을 사용할 수 있다<br><code>http</code>모듈에서 가장 중요한 객체는 <code>server</code>객체이다.<br><code>server</code>객체는 <code>http</code> 모듈의 <code>createServer()</code>메소드를 사용하여 만들 수 있다.</p><h3 id="server객체의-메소드"><a href="#server객체의-메소드" class="headerlink" title="server객체의 메소드"></a>server객체의 메소드</h3><ul><li><code>listen(port[, callback])</code> — 서버를 시작한다</li><li><code>close([callback])</code> — 서버를 중지한다</li></ul><h3 id="server객체의-이벤트"><a href="#server객체의-이벤트" class="headerlink" title="server객체의 이벤트"></a>server객체의 이벤트</h3><ul><li><code>request</code> — 사용자가 무언가를 요청할 때 발생</li><li><code>connection</code> — 사용자가 서버에 접속할 때 발생</li><li><code>close</code> — 서버가 닫힐 때 발생</li><li><code>checkContinue</code> — 사용자가 서버를 계속 열고 있을 때 발생</li><li><code>upgrade</code> — 사용자가 <code>HTTP</code> 업그레이드를 요청할 때 발생</li><li><code>clientError</code> — 사용자가 에러를 발생시키면 발생</li></ul><p>웹페이지를 제공하고자 할 때, 요청메시지를 작성해야한다.<br>요청메시지의 작성은 <code>request</code> 이벤트 리스너의 두번째 매개변수인 <code>response</code>객체를 통해 할 수 있다.</p><h3 id="Response객체의-메소드"><a href="#Response객체의-메소드" class="headerlink" title="Response객체의 메소드"></a>Response객체의 메소드</h3><ul><li><code>writeHead(statusCode[, statusMessage][, headers])</code> — <code>response header</code>를 작성할 때</li><li><code>end([data][, encoding][, callback])</code> — <code>response</code>객체의 본문을 작성<br><img src="/images/http_module.png" alt=""></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;우리가 치킨을 시켜먹을때, 전화로 이렇게 말한다&lt;/p&gt;
&lt;p&gt;“여기는 A아파트구요, B동 C호에요… 치킨 한마리 배달해주세요”&lt;/p&gt;
&lt;p&gt;그러면 우리는 약간의 시간 뒤에 우리가 주문한 치킨을 집(전화로 말한 주소)에서 받게 된다.&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
    
      <category term="Node.js" scheme="http://bongbooski.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js ejs, jade module basic 템플릿 모듈 기본</title>
    <link href="http://bongbooski.github.io/2018/02/22/post8_Node-js-ejs-jade-module-basic-kr/"/>
    <id>http://bongbooski.github.io/2018/02/22/post8_Node-js-ejs-jade-module-basic-kr/</id>
    <published>2018-02-22T10:12:05.000Z</published>
    <updated>2018-02-22T10:22:38.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ejs-module"><a href="#ejs-module" class="headerlink" title="ejs module"></a>ejs module</h1><p><code>ejs</code>모듈을 다운로드할때는 다음 코드를 사용한다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ejs;</span><br></pre></td></tr></table></figure></p><p>위의 코드를 실행하면, <code>npm</code>이 외부 모듈을 설치하게된다.</p><p>설치가 끝나면 밑의 코드처럼 기존의 내부 모듈 사용법과 마찬가지로 변수에 담아서 사용이 가능하다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var ejs = require(&apos;ejs&apos;);</span><br></pre></td></tr></table></figure></p><p><code>ejs</code> 모듈은 템플릿 엔진 중 하나이기 때문에 특정 형태의 스트링을 <code>HTML</code> 타입의 스트링으로 변환시켜준다.</p><p><code>ejs</code>페이지를 <code>HTML</code> 페이지로 변환시키는 서버 페이지를 만들고자 한다.<br>이때에는 <code>ejs</code>모듈에 내장된 <code>render(str, data, option)</code>메소드를 사용한다.</p><p>변수를 사용할 때, <code>ejs</code> 안에서 변수를 선언하여 사용할 수도 있지만,<br>일반적으로 자바스크립트에서 선언한 변수를 <code>ejs</code>로 전달하여 사용한다.</p><p>자바스크립트의 변수를 <code>ejs</code>로 넘겨줄때는, 아래 코드의 9, 10번째 줄처럼 <code>render()</code> 메소드의 두 번째 매개변수에 담아 전달한다.</p><p><strong>Tip — 파일을 저장할때 반드시 utf8로 인코딩해서 저장해야한다.</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&quot;http&quot;);</span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">var ejs = require(&apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">http.createServer(function ( request, response)&#123;</span><br><span class="line">  fs.readFile(&quot;ejsPage.ejs&quot;, &apos;utf8&apos;, function(error, data)&#123;</span><br><span class="line">    response.writeHead(200, &#123;&apos;Content-Type&apos;:&apos;text/html&apos;&#125;);</span><br><span class="line">    response.end(ejs.render(data, &#123;</span><br><span class="line">      name: &apos;booski&apos;,</span><br><span class="line">      description : &apos;Hellow ejs with node.js&apos;</span><br><span class="line">      &#125;));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;).listen(52273, function()&#123;</span><br><span class="line">    console.log(&quot;Server Running at http://127.0.0.1.52273&quot;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure></p><p><code>ejs</code> 페이지를 작성할때, 몇가지 특수한 태그들을 사용할 수 있다.</p><ul><li><code>&lt;% Code %&gt;</code> → 자바스크립트 코드를 넣는다</li><li><code>&lt;%= Value %&gt;</code> → 데이터를 출력한다</li></ul><p>위의 태그들을 사용하여 <code>ejsPage.ejs</code>파일을 작성해보았다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&lt;%=name%&gt;&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;&lt;%=description%&gt;&lt;/p&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;%for(var i = 0;i&lt;10;i++)&#123;%&gt;</span><br><span class="line">  &lt;h2&gt;The Square of &lt;%= i %&gt; is &lt;%= i*i%&gt;&lt;/h2&gt;</span><br><span class="line"> &lt;%&#125;%&gt;</span><br></pre></td></tr></table></figure></p><p><img src="/images/ejs1.png" alt=""></p><hr><h1 id="Jade-module"><a href="#Jade-module" class="headerlink" title="Jade module"></a>Jade module</h1><p><code>Jade</code> 모듈도 <code>ejs</code>와 마찬가지로 템플릿 엔진 중 하나이다.</p><p><code>Jade</code>모듈을 설치할 때에도 다음과 같이 <code>ejs</code>와 같은 방식(외부 모듈 설치)을 사용한다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jade</span><br></pre></td></tr></table></figure></p><p><code>Jade</code> 모듈이 <code>jade</code>페이지를 <code>HTML</code>페이지로 변환할 때는 모듈의 내장 함수 중<br><code>compile(String, option)</code>을 사용한다.<br><code>ejs</code>모듈의 <code>render()</code>함수와 한가지 다른 점은 <code>render()</code>함수는 스트링을 리턴하지만,<br><code>jade</code>의 <code>compile()</code>함수는 함수 자체를 돌려준다.<br>같은 맥락에서 <code>jade</code>에 자바스크립트의 변수를 전달할 때는 아래 코드의 11, 12번째 줄처럼<br><code>compile()</code>함수가 리턴한 함수의 매개변수로 전달한다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&quot;http&quot;);</span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">var jade = require(&apos;jade&apos;);</span><br><span class="line"></span><br><span class="line">http.createServer(function ( request, response)&#123;</span><br><span class="line">  fs.readFile(&quot;jadePage.jade&quot;, &apos;utf8&apos;, function(error, data)&#123;</span><br><span class="line">    var fn = jade.compile(data);</span><br><span class="line"></span><br><span class="line">    response.writeHead(200, &#123;&apos;Content-Type&apos;:&apos;text/html&apos;&#125;);</span><br><span class="line">    response.end(fn(&#123;</span><br><span class="line">      name: &apos;booski&apos;,</span><br><span class="line">      description : &apos;Hellow jade with node.js&apos;</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).listen(52273, function()&#123;</span><br><span class="line">    console.log(&quot;Server Running at http://127.0.0.1.52273&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>Jade</code>를 사용할 때도 <code>ejs</code>처럼 특별한 방식으로 코드를 작성해야한다.<br>가장 중요한 부분은 들여쓰기이다.<br><code>jade</code>모듈은 들여쓰기를 기준으로 새로운 <code>HTML</code>태그를 만들기 때문이다.</p><p><strong>Tip: jade에서 들여쓰기를 할 때는 탭 또는 스페이스바 중 하나로 통일해야한다.<br>그렇지않으면 에러가 발생한다.</strong></p><p>태그 안에 글을 넣고 싶을 때는 해당 태그의 다음 줄에서 들여쓰기를 한 뒤 작성하면 된다.<br>또한 어떤 태그에 속성을 부여하고 싶을 때는, 괄호 <code>()</code>를 이용하면 된다.(여러 속성을 주고 싶으면 각 속성을 <code>,</code>로 구분한다.)</p><p><code>Jade</code>는 <code>doctype</code>과 주석 등 몇 가지 코드를 특수한 형태로 변환하는데 그 형태는 다음과 같다.</p><ul><li><code>doctype html</code> → <code>&lt;!DOCTYPE html&gt;</code></li><li><code>// JADE String</code> → <code>&lt;!-- JADE String --&gt;</code></li></ul><p>특히 새 <code>div</code>태그를 만들 때는 ‘div’를 직접 쓸 필요가 없다.</p><p><code>#header</code>의 형태로 <code>jade</code>를 작성하면, ‘header’를 <code>id</code>로 갖는 <code>div</code>태그가 만들어진다.<br>같은 방식으로, <code>.article</code>의 경우는 ‘article’을 <code>class</code>로 갖는 <code>div</code>태그가 만들어진다.</p><p><code>Jade</code> 역시 <code>ejs</code>처럼 특수한 태그를 갖는다.</p><ul><li><code>-Code</code> → 자바스크립트 코드를 적는다</li><li><code>#{Value}</code> → 값을 출력한다.(내용 중간에 값을 집어넣음)</li><li><code>=Value</code> → 값을 출력한다.(전체 내용이 값이 됨)<br>이러한 태그들을 사용해서 아래 코드의 11번째 줄처럼 <code>for</code> 반복문도 구현 가능하다.</li></ul><p>지금까지 언급한 내용을 바탕으로 아래와 같은 코드를 작성할 수 있다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title index Page</span><br><span class="line">  body</span><br><span class="line">    // JADE String</span><br><span class="line">    #header</span><br><span class="line">      h1 hello jade...!</span><br><span class="line">      h2 #&#123;name&#125;, we are the World</span><br><span class="line">      h3= description</span><br><span class="line">    hr</span><br><span class="line">    - for(var i = 0; i&lt; 10;i++) &#123;</span><br><span class="line">    .article</span><br><span class="line">      p</span><br><span class="line">        a(href=&quot;https://medium.com/@booski/&quot;, data-test=&quot;attribute added&quot;) Go to new world #&#123;i&#125;</span><br><span class="line">    - &#125;</span><br></pre></td></tr></table></figure></p><p>그리고 서버를 실행하면 아래의 화면을 브라우저에서 확인할 수 있다.<br><img src="/images/jade1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ejs-module&quot;&gt;&lt;a href=&quot;#ejs-module&quot; class=&quot;headerlink&quot; title=&quot;ejs module&quot;&gt;&lt;/a&gt;ejs module&lt;/h1&gt;&lt;p&gt;&lt;code&gt;ejs&lt;/code&gt;모듈을 다운로드할때는 다음 코드를 사용한
      
    
    </summary>
    
    
      <category term="Node.js" scheme="http://bongbooski.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>MySql updating many columns by A query</title>
    <link href="http://bongbooski.github.io/2018/02/22/post7_MySql-updating-many-columns-by-A-query/"/>
    <id>http://bongbooski.github.io/2018/02/22/post7_MySql-updating-many-columns-by-A-query/</id>
    <published>2018-02-22T10:00:10.000Z</published>
    <updated>2018-02-22T10:01:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>When we want to <code>update</code> many columns in one query,<br>we can just connect them with <code>,</code>.<br>Let’s say we want to update <code>A</code> column to <code>1</code> and <code>B</code> column to <code>2</code> in one query.<br>Then we can do like this,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update table name set A = 1, B = 2;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;When we want to &lt;code&gt;update&lt;/code&gt; many columns in one query,&lt;br&gt;we can just connect them with &lt;code&gt;,&lt;/code&gt;.&lt;br&gt;Let’s say we want to u
      
    
    </summary>
    
    
      <category term="MySql" scheme="http://bongbooski.github.io/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>MySql adding or subtracting value by update statement</title>
    <link href="http://bongbooski.github.io/2018/02/22/post6_MySql-adding-or-subtracting-value-by-update-statement/"/>
    <id>http://bongbooski.github.io/2018/02/22/post6_MySql-adding-or-subtracting-value-by-update-statement/</id>
    <published>2018-02-22T09:51:04.000Z</published>
    <updated>2018-02-22T09:59:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>When we want to add or subtract some value like <code>+1</code> or <code>-1</code>,<br>we can do like this( in the case we want to add <code>1</code>)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update table name set column&apos;s name = column&apos;s name + 1;</span><br></pre></td></tr></table></figure></p><p>This query adds 1 in all values of that column.<br>So we can use this like this<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update table name set column&apos;s name = column&apos;s name +1 where column&apos;s name = A;</span><br></pre></td></tr></table></figure></p><p>This query adds <code>1</code> if the column’s value is <code>A</code>.</p><h3 id="ex-Waiting-line-in-a-bank"><a href="#ex-Waiting-line-in-a-bank" class="headerlink" title="ex) Waiting line in a bank"></a>ex) Waiting line in a bank</h3><p>If new person came to line ‘6’ in the back,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">update bank set waiting = waiting +1 where line_num = &apos;6&apos;;</span><br></pre></td></tr></table></figure></p><p>then we add <code>1</code> to waiting column in the row having <code>6</code> as its line_num column’s value.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;When we want to add or subtract some value like &lt;code&gt;+1&lt;/code&gt; or &lt;code&gt;-1&lt;/code&gt;,&lt;br&gt;we can do like this( in the case we want to add &lt;c
      
    
    </summary>
    
    
      <category term="MySql" scheme="http://bongbooski.github.io/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>Node.js ejs, jade module basic</title>
    <link href="http://bongbooski.github.io/2018/02/22/post5_Node.js-ejs,-jade-module-basic/"/>
    <id>http://bongbooski.github.io/2018/02/22/post5_Node.js-ejs,-jade-module-basic/</id>
    <published>2018-02-22T06:49:06.000Z</published>
    <updated>2018-02-22T09:56:48.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ejs-module"><a href="#ejs-module" class="headerlink" title="ejs module"></a>ejs module</h1><p>We can install <code>ejs</code> module by this code.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install ejs;</span><br></pre></td></tr></table></figure></p><p>Then, npm installs eternal modules.<br>We can use those by the same way to internal modules.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var ejs = require(&apos;ejs&apos;);</span><br></pre></td></tr></table></figure></p><p>Module <code>ejs</code> is the engine of template.<br>So it translates specific <code>String</code> to <code>HTML</code> type <code>String</code>.</p><p>We will make the <code>server</code> page which changes <code>ejs</code> page to <code>HTML</code> page.<br>When we translate <code>ejs</code> to <code>HTML</code> page, we use <code>render(str, data, option)</code> of <code>ejs</code> module.</p><p>Though we can use variables after declaring in <code>ejs</code> in side,<br>usually people declare them in <code>Javascript</code> and pass them to <code>ejs</code> for using.<br>When we pass <code>Javascript</code>‘ variables, we use the 2nd parameter of <code>render()</code> method like 9, 10th row.</p><p><strong>Tip — we should set UTF-8 as that file’s encoding</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&quot;http&quot;);</span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">var ejs = require(&apos;ejs&apos;);</span><br><span class="line"></span><br><span class="line">http.createServer(function ( request, response)&#123;</span><br><span class="line">  fs.readFile(&quot;ejsPage.ejs&quot;, &apos;utf8&apos;, function(error, data)&#123;</span><br><span class="line">    response.writeHead(200, &#123;&apos;Content-Type&apos;:&apos;text/html&apos;&#125;);</span><br><span class="line">    response.end(ejs.render(data, &#123;</span><br><span class="line">      name: &apos;booski&apos;,</span><br><span class="line">      description : &apos;Hellow ejs with node.js&apos;</span><br><span class="line">      &#125;));</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;).listen(52273, function()&#123;</span><br><span class="line">    console.log(&quot;Server Running at http://127.0.0.1.52273&quot;);</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>When we write <code>ejs</code> page, we can use some special tags.</p><ul><li><code>&lt;% Code %&gt;</code> → writing Javascript code inside</li><li><code>&lt;%= Value %&gt;</code> → printing the data</li></ul><p>With using these tags, I made <code>ejsPage.ejs</code> file like this.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;&lt;%=name%&gt;&lt;/h1&gt;</span><br><span class="line">&lt;p&gt;&lt;%=description%&gt;&lt;/p&gt;</span><br><span class="line">&lt;hr/&gt;</span><br><span class="line">&lt;%for(var i = 0;i&lt;10;i++)&#123;%&gt;</span><br><span class="line">  &lt;h2&gt;The Square of &lt;%= i %&gt; is &lt;%= i*i%&gt;&lt;/h2&gt;</span><br><span class="line"> &lt;%&#125;%&gt;</span><br></pre></td></tr></table></figure><p>Starting the server, we can see this page.</p><p><img src="/images/ejs1.png" alt=""></p><hr><h1 id="Jade-module"><a href="#Jade-module" class="headerlink" title="Jade module"></a>Jade module</h1><p><code>Jade</code> module is one of template engine modules too like <code>ejs</code> module.<br>We can install that by the same way to <code>ejs</code> like this<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install jade</span><br></pre></td></tr></table></figure></p><p>When <code>jade</code> module translates <code>jade</code> page to <code>HTML</code> page, it uses <code>compile(string,option)</code>method.<br>One different thing is that if <code>ejs</code>‘ <code>render()</code> returns <code>String</code>, <code>compile()</code> returns a <code>function</code>. And we can pass <code>Javascript</code>‘ variable with the <code>function</code>.<br>We put them as the parameter of the function which <code>compile()</code> returned like 11, 12 rows.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">var http = require(&quot;http&quot;);</span><br><span class="line">var fs = require(&apos;fs&apos;);</span><br><span class="line">var jade = require(&apos;jade&apos;);</span><br><span class="line"></span><br><span class="line">http.createServer(function ( request, response)&#123;</span><br><span class="line">  fs.readFile(&quot;jadePage.jade&quot;, &apos;utf8&apos;, function(error, data)&#123;</span><br><span class="line">    var fn = jade.compile(data);</span><br><span class="line"></span><br><span class="line">    response.writeHead(200, &#123;&apos;Content-Type&apos;:&apos;text/html&apos;&#125;);</span><br><span class="line">    response.end(fn(&#123;</span><br><span class="line">      name: &apos;booski&apos;,</span><br><span class="line">      description : &apos;Hellow jade with node.js&apos;</span><br><span class="line">    &#125;));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).listen(52273, function()&#123;</span><br><span class="line">    console.log(&quot;Server Running at http://127.0.0.1.52273&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>Jade</code> has special way to write down the page too like <code>ejs</code>.<br>The most important thing is making an indentation.<br><code>Jade</code> module makes new <code>HTML</code> tag based on each indentations.</p><p><strong>Tip: we should use ‘tap’ or ‘space bar’ for every indentation. If not, there will be an error</strong></p><p>When we input words in the tag, we go to the next row and make an indentation again and then write down them there.<br>And If we want to give an attribute to the tag, we give it with parenthesis.<br>(if we want to give many attributes, we divide them by <code>,</code>)</p><p><code>Jade</code> translates some specific words in special way like <code>doctype</code> or <code>annotation</code>,</p><ul><li><code>doctype html</code> → <code>&lt;!DOCTYPE html&gt;</code></li><li><code>// JADE String</code> → <code>&lt;!-- JADE String --&gt;</code></li></ul><p>Especially making new <code>div</code> tag, we don’t need to write ‘div’ down.<br>If we write <code>#header</code> for example, that makes the <code>div</code> tag having ‘header’ as its id.<br>As the same way, <code>.article</code> makes the div having ‘article’ as its class.</p><p><code>Jade</code> has special tags too.</p><ul><li><code>-Code</code> → writing Javascript code</li><li><code>#{Value}</code> → printing the value (inputting the value between content)</li><li><code>=Value</code> → printing the value (whole content becomes value)</li></ul><p>Using these tags, we can make for repetitive statement like 11th row.</p><p>Based on what I mentioned, we can make this code.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">doctype html</span><br><span class="line">html</span><br><span class="line">  head</span><br><span class="line">    title index Page</span><br><span class="line">  body</span><br><span class="line">    // JADE String</span><br><span class="line">    #header</span><br><span class="line">      h1 hello jade...!</span><br><span class="line">      h2 #&#123;name&#125;, we are the World</span><br><span class="line">      h3= description</span><br><span class="line">    hr</span><br><span class="line">    - for(var i = 0; i&lt; 10;i++) &#123;</span><br><span class="line">    .article</span><br><span class="line">      p</span><br><span class="line">        a(href=&quot;https://medium.com/@booski/&quot;, data-test=&quot;attribute added&quot;) Go to new world #&#123;i&#125;</span><br><span class="line">    - &#125;</span><br></pre></td></tr></table></figure><p>And this code shows this page well.<br><img src="/images/jade1.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ejs-module&quot;&gt;&lt;a href=&quot;#ejs-module&quot; class=&quot;headerlink&quot; title=&quot;ejs module&quot;&gt;&lt;/a&gt;ejs module&lt;/h1&gt;&lt;p&gt;We can install &lt;code&gt;ejs&lt;/code&gt; module
      
    
    </summary>
    
    
      <category term="Node.js" scheme="http://bongbooski.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>MySql selecting duplicated data (by group by and in) 중복된 데이터 다 읽기</title>
    <link href="http://bongbooski.github.io/2018/02/22/post4_MySql-selecting-duplicated-data-(by-group-by-and-in)-kr/"/>
    <id>http://bongbooski.github.io/2018/02/22/post4_MySql-selecting-duplicated-data-(by-group-by-and-in)-kr/</id>
    <published>2018-02-22T06:43:04.000Z</published>
    <updated>2018-02-22T06:45:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>오늘 mysql 데이터베이스에 있는 데이터중 중복된 데이터를 확인해봐야할 일이 생겼다.<br>중복된 값이 있는 데이터들의 <code>목록</code>을 보는 것은 아래처럼 가능하다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from (table name) group by (column name) having count(column name)&gt;1;</span><br></pre></td></tr></table></figure><p>하지만 이 경우, 각 중복값들에 대한 구체적인 내용은 볼 수가 없다.</p><p>오늘 해결해야했던 상황은 <code>B</code>컬럼에 중복된 값이 있는 경우 그 행들의 <code>A</code>컬럼 값을 비교하고 같은 데이터인지 등을 확인할 필요가 있었다.</p><p>따라서 <code>B</code>컬럼에서 각각의 값들이 중복된 값이 있는가를 확인해야 했고, 간단한 검색 후 다음 쿼리를 만들었다.<br>동작 원리는 <code>B</code>컬럼에서 중복된 값을 갖고 있는 값들의 리스트를 뽑고, 그 값들을 갖는 데이터를 모두 가져오는 방식이었다. (실제 사용때는 <code>order by B, A</code>를 사용해서 중복된 값들로 1차 정렬, 비교할 값들로 1차정렬하였다.)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tableName where B in (select B from tableName group by B having count(B)&gt;1);</span><br></pre></td></tr></table></figure><p>다행이 잘 작동하였고, 이외에도 같은 구문내에서 <code>where</code>절과 <code>order by</code>절도 사용가능하였다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;오늘 mysql 데이터베이스에 있는 데이터중 중복된 데이터를 확인해봐야할 일이 생겼다.&lt;br&gt;중복된 값이 있는 데이터들의 &lt;code&gt;목록&lt;/code&gt;을 보는 것은 아래처럼 가능하다.&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;
      
    
    </summary>
    
    
      <category term="MySql" scheme="http://bongbooski.github.io/tags/MySql/"/>
    
  </entry>
  
  <entry>
    <title>MySql selecting duplicated data (by group by and in)</title>
    <link href="http://bongbooski.github.io/2018/02/22/post3_MySql-selecting-duplicated-data-(by-group-by-and-in)/"/>
    <id>http://bongbooski.github.io/2018/02/22/post3_MySql-selecting-duplicated-data-(by-group-by-and-in)/</id>
    <published>2018-02-22T05:23:56.000Z</published>
    <updated>2018-02-22T06:42:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>Today I needed to check some duplicated data from our database which uses mysql.<br>We can ‘see’ the list of duplicated data by using <code>group by</code> phrase like this.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from (table name) group by (column name) having count(column name)&gt;1;</span><br></pre></td></tr></table></figure><p>But in this case, we can’t check the details of those data.<br>The situation I needed to solve was that I needed to check <code>A</code> column’s values of the rows having same <code>B</code> column with any other data.</p><p>So, I needed to check all of the rows having any duplicated value in <code>B</code> column.<br>After searching a bit, I made this query. The way to work is like this.</p><ol><li>searching for the list of the data having same <code>B</code> value in any row</li><li>selecting all data of the rows having same value of the result from <code>1</code>.</li></ol><ul><li>I used <code>order by B, A</code> for sorting them by same <code>B</code> 1st and then <code>A</code> 2nd</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from tableName where B in (select B from tableName group by B having count(B)&gt;1);</span><br></pre></td></tr></table></figure><p>This one worked how I expected and I could add <code>where</code> phrase and <code>order by</code> phrase too.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today I needed to check some duplicated data from our database which uses mysql.&lt;br&gt;We can ‘see’ the list of duplicated data by using &lt;co
      
    
    </summary>
    
    
      <category term="MySql" scheme="http://bongbooski.github.io/tags/MySql/"/>
    
  </entry>
  
</feed>
