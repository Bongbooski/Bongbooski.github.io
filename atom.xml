<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Booski&#39;s programming</title>
  
  <subtitle>A line of code, A piece of Beauty</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bongbooski.github.io/"/>
  <updated>2018-08-11T13:45:31.234Z</updated>
  <id>http://bongbooski.github.io/</id>
  
  <author>
    <name>Booski</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Servlet&#39;s way to run</title>
    <link href="http://bongbooski.github.io/2018/08/11/post26-servlet03/"/>
    <id>http://bongbooski.github.io/2018/08/11/post26-servlet03/</id>
    <published>2018-08-11T08:24:20.000Z</published>
    <updated>2018-08-11T13:45:31.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Servlet작동-순서"><a href="#Servlet작동-순서" class="headerlink" title="Servlet작동 순서"></a><code>Servlet</code>작동 순서</h2><ul><li>클라이언트에서 <code>servlet</code>요청이 들어 오면 서버에서는 <code>servlet</code>컨테이너를 만들고, 요청이 있을 때마다 스레드 생성</li></ul><h2 id="Servlet-라이프-사이클"><a href="#Servlet-라이프-사이클" class="headerlink" title="Servlet 라이프 사이클"></a><code>Servlet</code> 라이프 사이클</h2><ul><li>응답속도가 높아서 사용도가 높음</li><li>최초 요청시 객체 생성 후 메모리에 로딩되고, 이후에는 기존 객체 재활용 -&gt; 속도 빠름</li></ul><ol><li><code>Servlet</code> 객체 생성 - 최초 한번</li><li><code>init()</code> 호출 - 최초 한번</li><li><code>service()</code>,<code>doGet</code>,<code>doPost()</code> 호출 - 요청시 매번</li><li><code>destroy()</code>호출 - 마지막 한번 (자원 해제)</li></ol><h2 id="Servlet-선처리-후처리"><a href="#Servlet-선처리-후처리" class="headerlink" title="Servlet 선처리, 후처리"></a><code>Servlet</code> 선처리, 후처리</h2><ul><li><p><code>Servlet</code>의 라이프 사이클 중 <code>init()</code>, <code>destroy()</code>에 선, 후처리 가능</p></li><li><p><code>@PostConstruct</code> - <code>Init()</code>호출</p></li><li><code>destroy()</code> - <code>@PreDestroy</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Servlet작동-순서&quot;&gt;&lt;a href=&quot;#Servlet작동-순서&quot; class=&quot;headerlink&quot; title=&quot;Servlet작동 순서&quot;&gt;&lt;/a&gt;&lt;code&gt;Servlet&lt;/code&gt;작동 순서&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;클라이언트에서 &lt;co
      
    
    </summary>
    
    
      <category term="Servlet" scheme="http://bongbooski.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Servlet start</title>
    <link href="http://bongbooski.github.io/2018/08/11/post25-servlet02/"/>
    <id>http://bongbooski.github.io/2018/08/11/post25-servlet02/</id>
    <published>2018-08-11T04:34:20.000Z</published>
    <updated>2018-08-11T05:05:57.818Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><code>Servlet</code>클래스는 <code>HttpServlet</code>를 상속 받음</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/Hworld"</span>)   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Helloworld</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>요청처리객체 및 응답처리객체를 톰캣에서 받음</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.getWriter().append(<span class="string">"Served at: "</span>).append(request.getContextPath());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>get</code>방식, <code>post</code>방식 - <code>form</code>태그 <code>method</code>속성값</p><ul><li><code>doGet</code>호출 : URL값으로 정보가 전송되어 보안에 약함</li><li><code>doPost</code>호출 : <code>header</code>를 이용해 정보가 전송되어 보안에 강함</li></ul></li><li><p><code>doGet()</code></p><ul><li><code>html</code>내 <code>form</code>태그의 <code>method</code>속성이 <code>get</code>일 경우 호출</li><li>웹브라우저 주소창을 이용하여 <code>servlet</code>을 요청하면 호출</li></ul></li><li><p><code>doPost()</code></p><ul><li><code>html</code>내 <code>form</code>태그의 <code>method</code>속성이 <code>post</code>일 경우 호출</li></ul></li><li><p><code>Context Path</code></p><ul><li><code>WAS</code>(Web Application Server)에서 웹애플리케이션을 구분하기위한 Path</li><li>이클립스에서 프로젝트를 생성하면 자동으로 <code>server.xml</code>에 추가</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Servlet&lt;/code&gt;클래스는 &lt;code&gt;HttpServlet&lt;/code&gt;를 상속 받음&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
      <category term="Servlet" scheme="http://bongbooski.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Servlet</title>
    <link href="http://bongbooski.github.io/2018/08/11/post24-servlet01/"/>
    <id>http://bongbooski.github.io/2018/08/11/post24-servlet01/</id>
    <published>2018-08-11T03:38:20.000Z</published>
    <updated>2018-08-11T04:32:45.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet특징"><a href="#Servlet특징" class="headerlink" title="Servlet특징"></a>Servlet특징</h1><ul><li>동적 웹애플리케이션 컴포넌트</li><li><code>.java</code>확장자</li><li>응답은 <code>html</code> 이용</li><li><code>java thread</code>이용하여 동작</li><li><code>MVC</code>패턴에서 <code>controller</code>로 이용됨</li></ul><h2 id="Mapping하는-방법"><a href="#Mapping하는-방법" class="headerlink" title="Mapping하는 방법"></a>Mapping하는 방법</h2><ol><li><p><code>.java</code> - <code>@WebServlet</code>으로 매핑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/Hworld"</span>)   &lt;-- 여기!</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Helloworld</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>web.xml</code> - <code>web.xml</code> 파일에 매핑 정보 추가</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">  &lt;servlet-name&gt;helloworld&lt;/servlet-name&gt;</span><br><span class="line">  &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">com</span>.<span class="title">javalec</span>.<span class="title">ex</span>.<span class="title">Helloworld</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">helloworld</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">hw</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Servlet특징&quot;&gt;&lt;a href=&quot;#Servlet특징&quot; class=&quot;headerlink&quot; title=&quot;Servlet특징&quot;&gt;&lt;/a&gt;Servlet특징&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;동적 웹애플리케이션 컴포넌트&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.java
      
    
    </summary>
    
    
      <category term="Servlet" scheme="http://bongbooski.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>JSP</title>
    <link href="http://bongbooski.github.io/2018/08/09/post23-jsp1/"/>
    <id>http://bongbooski.github.io/2018/08/09/post23-jsp1/</id>
    <published>2018-08-09T12:19:20.000Z</published>
    <updated>2018-08-11T03:39:39.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSP특징"><a href="#JSP특징" class="headerlink" title="JSP특징"></a>JSP특징</h1><ul><li>동적 웹애플리케이션 컴포넌트</li><li><code>.jsp</code>확장자</li><li>응답은 <code>html</code> 이용</li><li>서블릿으로 변환되어 실행</li><li><code>MVC</code>패턴에서 <code>view</code>로 이용됨</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JSP특징&quot;&gt;&lt;a href=&quot;#JSP특징&quot; class=&quot;headerlink&quot; title=&quot;JSP특징&quot;&gt;&lt;/a&gt;JSP특징&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;동적 웹애플리케이션 컴포넌트&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.jsp&lt;/code&gt;확장자&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="JSP" scheme="http://bongbooski.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>python Exception Raise</title>
    <link href="http://bongbooski.github.io/2018/04/17/post22-python-exception-raise_eng/"/>
    <id>http://bongbooski.github.io/2018/04/17/post22-python-exception-raise_eng/</id>
    <published>2018-04-17T05:47:23.000Z</published>
    <updated>2018-04-17T13:45:09.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Exception-raise"><a href="#Exception-raise" class="headerlink" title="Exception raise"></a>Exception raise</h1><h2 id="Occuring-exception-by-raise"><a href="#Occuring-exception-by-raise" class="headerlink" title="Occuring exception by raise"></a>Occuring exception by <code>raise</code></h2><ul><li><code>raise</code>keyword can make an exception in specific situation</li><li><p><code>IndexError</code> occurs when <code>__getitem__</code>method(which implements indexing when sequance type class is made) goes out of the index range</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SquareSeq</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    self.n = n</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self,k)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> k &gt;= self.n <span class="keyword">or</span> k &lt; <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">raise</span> IndexError <span class="comment"># out of index range, IndexError occurs</span></span><br><span class="line">    <span class="keyword">return</span> k * k</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__len_</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.n</span><br><span class="line"></span><br><span class="line">s = SquareSeq(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">print</span> s[<span class="number">2</span>], s[<span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> s: <span class="comment"># repeating until IndexError occurs</span></span><br><span class="line">   <span class="keyword">print</span> x,</span><br><span class="line"><span class="keyword">print</span> s[<span class="number">20</span>] <span class="comment"># out of the index range</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="Customized-exception-class"><a href="#Customized-exception-class" class="headerlink" title="Customized exception class"></a>Customized exception class</h2><ul><li>Generally It is implemented by extending <code>Exception</code>class<br>(Other exceptions are unusual)</li><li>How to raise the exception<ul><li>Same to built-in exception. Using <code>raise [class instance]</code></li></ul></li><li>How to catch the exception from Customized exception class<ul><li>Using the class’ name like <code>except [class name]</code></li></ul></li><li><p>In the example below, <code>except Big</code> catches <code>Big</code>and <code>Small</code> exception<br>-&gt; Because <code>Small</code>is <code>Big</code>‘s sub-class’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Big</span><span class="params">(Exception)</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Small</span><span class="params">(Big)</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dosomething1</span><span class="params">()</span>:</span></span><br><span class="line">  x = Big()</span><br><span class="line">  <span class="keyword">raise</span> x <span class="comment"># x is exception object, it can use raise</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dosomething2</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">raise</span> Small()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> (dosomething1, dosomething2):</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    f()</span><br><span class="line">  <span class="keyword">except</span> Big:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Exception occurs!"</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="Passing-exception"><a href="#Passing-exception" class="headerlink" title="Passing exception"></a>Passing exception</h2><ul><li><p>After <code>raise</code>keyword, with exception, additional message can follow</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">raise</span> Exception, <span class="string">'message!!!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  f()</span><br><span class="line"><span class="keyword">except</span> Exception, a:</span><br><span class="line">  <span class="keyword">print</span> a</span><br></pre></td></tr></table></figure></li><li><p>When <code>except</code> keyword is used, exception message in initializer can be taken as 2nd parameter.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">0</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">raise</span> ArithmeticError(<span class="string">'you are dividing by 0'</span>)</span><br><span class="line">    a/b</span><br><span class="line"><span class="keyword">except</span> ArithmeticError, v:</span><br><span class="line">  <span class="keyword">print</span> v</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Exception-raise&quot;&gt;&lt;a href=&quot;#Exception-raise&quot; class=&quot;headerlink&quot; title=&quot;Exception raise&quot;&gt;&lt;/a&gt;Exception raise&lt;/h1&gt;&lt;h2 id=&quot;Occuring-exce
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 예외 발생시키기</title>
    <link href="http://bongbooski.github.io/2018/04/17/post22-python-exception-raise/"/>
    <id>http://bongbooski.github.io/2018/04/17/post22-python-exception-raise/</id>
    <published>2018-04-17T05:47:23.000Z</published>
    <updated>2018-04-17T13:44:56.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Exception-raise"><a href="#Exception-raise" class="headerlink" title="Exception raise"></a>Exception raise</h1><h2 id="raise로-예외-발생하기"><a href="#raise로-예외-발생하기" class="headerlink" title="raise로 예외 발생하기"></a><code>raise</code>로 예외 발생하기</h2><ul><li>예외를 특정 상황 조건에서 <code>raise</code>키워드를 통해 발생시킬 수 있다.</li><li><p>아래 예는 시퀀스 형 클래스를 설계할 때 인덱싱을 구현하는 <code>__getitem__</code>메소드에서 인덱스가 범위를 넘을 때 <code>IndexError</code>를 발생시킨다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SquareSeq</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    self.n = n</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self,k)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> k &gt;= self.n <span class="keyword">or</span> k &lt; <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">raise</span> IndexError <span class="comment"># 인덱스 범위를 벗어나나면 IndexError발생</span></span><br><span class="line">    <span class="keyword">return</span> k * k</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__len_</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.n</span><br><span class="line"></span><br><span class="line">s = SquareSeq(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">print</span> s[<span class="number">2</span>], s[<span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> s: <span class="comment"># IndexError가 발생하는 시점까지 반복</span></span><br><span class="line">   <span class="keyword">print</span> x,</span><br><span class="line"><span class="keyword">print</span> s[<span class="number">20</span>] <span class="comment"># 인덱스 범위를 넘음</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="사용자-정의-예외-클래스"><a href="#사용자-정의-예외-클래스" class="headerlink" title="사용자 정의 예외 클래스"></a>사용자 정의 예외 클래스</h2><ul><li>일반적으로 <code>Exception</code>클래스를 상속 받아 구현<br>(나머지 예외들은 일반적으로 나타나기 힘든 예외들이다)</li><li>예외 발생 방법<ul><li>내장 예외 발생 방법과 동일하게 <code>raise [클래스 인스턴스]</code>와 같이 해당 예외 클래스의 인스턴스를 던진다</li></ul></li><li>사용자 정의 예외를 잡는 방법<ul><li><code>except [클래스이름]</code>과 같이 해당 예외 클래스의 이름을 사용한다.</li></ul></li><li><p>아래 예에서 <code>except Big</code>이 잡는 예외는 <code>Big</code>과 <code>Small</code>이다<br>-&gt; <code>Small</code>은 <code>Big</code>의 하위 클래스 이기 때문</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Big</span><span class="params">(Exception)</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Small</span><span class="params">(Big)</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dosomething1</span><span class="params">()</span>:</span></span><br><span class="line">  x = Big()</span><br><span class="line">  <span class="keyword">raise</span> x <span class="comment"># x는 예외객체이므로 raise가능</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dosomething2</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">raise</span> Small()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> (dosomething1, dosomething2):</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    f()</span><br><span class="line">  <span class="keyword">except</span> Big:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Exception occurs!"</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="예외값-전달하기"><a href="#예외값-전달하기" class="headerlink" title="예외값 전달하기"></a>예외값 전달하기</h2><ul><li><p><code>raise</code>키워드 뒤에 예외와 함께, 추가 메시지를 함께 던질 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">raise</span> Exception, <span class="string">'message!!!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  f()</span><br><span class="line"><span class="keyword">except</span> Exception, a:</span><br><span class="line">  <span class="keyword">print</span> a</span><br></pre></td></tr></table></figure></li><li><p>생성자 안에 넣어준 에러 메시지는 <code>except</code>키워드 사용시에 두 번째 인자로 해당 메시지를 받을 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">0</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">raise</span> ArithmeticError(<span class="string">'0으로 나누고 있습니다.'</span>)</span><br><span class="line">    a/b</span><br><span class="line"><span class="keyword">except</span> ArithmeticError, v:</span><br><span class="line">  <span class="keyword">print</span> v</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Exception-raise&quot;&gt;&lt;a href=&quot;#Exception-raise&quot; class=&quot;headerlink&quot; title=&quot;Exception raise&quot;&gt;&lt;/a&gt;Exception raise&lt;/h1&gt;&lt;h2 id=&quot;raise로-예외-발생하
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 예외처리</title>
    <link href="http://bongbooski.github.io/2018/04/17/post21-python-exception-handling/"/>
    <id>http://bongbooski.github.io/2018/04/17/post21-python-exception-handling/</id>
    <published>2018-04-17T00:47:23.000Z</published>
    <updated>2018-04-17T13:45:45.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Exception-Handling"><a href="#Exception-Handling" class="headerlink" title="Exception Handling"></a>Exception Handling</h1><ul><li><p>구문 에러(Syntax Error)</p><ul><li>문법적 에러</li><li>IDE에서는 구문에러 체크해줌</li><li>파이썬은 상대적으로 문법이 간단해서 에러 발생 비율이 낮거나 다른 도구로 제거 가능</li></ul></li><li><p>예외(Exception)</p><ul><li>구문 에러는 없으나 프로그램 실행 중 더 이상 진행할 수 없는 경우</li><li>예외가 발생하면 프로그램이 종료됨</li></ul><ol><li><p><code>NameError</code> (정의되지 않은 변수 사용)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> + boo*<span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p><code>ZeroDivisionError</code> (<code>0</code>으로 나누는 경우)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">0</span></span><br><span class="line">c = a / b</span><br></pre></td></tr></table></figure></li><li><p><code>TypeError</code> (ex: 문자열 + 수치형 자료)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'2'</span> + <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p><code>IndexError</code> (참조 범위를 넘어서 인덱스 사용)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">print</span> l[<span class="number">2</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>KeyError</code> (등록되지 않은 키로 사전 검색)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">"a"</span>:<span class="number">1</span>, <span class="string">"b"</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">print</span> d[<span class="string">'c'</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>IOError</code> (존재하지 않는 파일을 열고자 할 때)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = open(<span class="string">'aaa.txt'</span>)</span><br></pre></td></tr></table></figure></li></ol><hr></li></ul><h1 id="예외-처리-방법"><a href="#예외-처리-방법" class="headerlink" title="예외 처리 방법"></a>예외 처리 방법</h1><ol><li><p><code>try</code>,<code>except</code>,<code>else</code>,<code>finally</code>절 사용하기</p><ul><li>예외가 발생할 만한 상황을 예상하여 상황별로 전체 코드 흐름을 제어할 수 있다</li><li><p><code>try</code>,<code>except</code>,<code>else</code>,<code>finally</code>절</p><ul><li>구조<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  (예외 발생 가능한) 일반적인 수행문들</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">  예외가 발생하였을 때 수행되는 문들</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  예외가 발생하지 않았을 때 수행되는 문들</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">  예외 발생 유무와 관계없이 무조건 수행되는 문들</span><br></pre></td></tr></table></figure></li></ul><hr></li></ul></li></ol><ul><li><p>예외 처리를 하면 예외 발생시 프로그램이 종료되지 않는다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  <span class="keyword">print</span> <span class="number">1.0</span>/a</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'zero division error!!!'</span></span><br></pre></td></tr></table></figure></li><li><p><code>msg</code>변수: <code>ZeroDivisionError</code>를 정의한 사람이 발생될 때 주는 메시지<br>ex: float division by zero</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      <span class="keyword">print</span> <span class="number">10.0</span> / n</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError, msg</span><br><span class="line">      <span class="keyword">print</span> msg</span><br><span class="line"></span><br><span class="line">division()</span><br></pre></td></tr></table></figure></li><li><p><code>try</code>절 안에서 간접적으로 호출한 함수의 내부 예외도 처리 가능</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  spam()</span><br><span class="line"><span class="keyword">except</span> NameError, msg:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'Error -'</span>, msg</span><br></pre></td></tr></table></figure><p><code>,</code>대신 <code>as</code>로도 사용가능</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 위와 동일한 예제</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  spam()</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> msg:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'Error -'</span>, msg</span><br></pre></td></tr></table></figure></li><li><p><code>except</code>뒤에 예외를 명시하지 않으면 모든 예외에 대해 처리됨</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  spam()</span><br><span class="line">  <span class="keyword">print</span> <span class="number">1.0</span>/<span class="number">0.0</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'Error'</span></span><br></pre></td></tr></table></figure></li><li><p>여러 예외들 각각에 대해 <code>except</code>절로 다중처리 가능</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="number">0.0</span></span><br><span class="line">name = <span class="string">'aaa.txt'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  <span class="keyword">print</span> <span class="number">1.0</span> / b</span><br><span class="line">  spam()</span><br><span class="line">  f = open(name, <span class="string">'r'</span>)</span><br><span class="line">  <span class="string">'2'</span> + <span class="number">2</span></span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'NameError !!!'</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'ZeroDivisionError !!!'</span></span><br><span class="line">excpet (TypeError, IOError):</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'TypeError or IOERror !!!'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'No Exception'</span></span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">'Exit !!!'</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="같은-부류의-예외-다-잡아내기"><a href="#같은-부류의-예외-다-잡아내기" class="headerlink" title="같은 부류의 예외 다 잡아내기"></a>같은 부류의 예외 다 잡아내기</h1><ul><li>예외 클래스의 상속에 의한 계층 관계를 이용하여 여러 예외들을 한꺼번에 잡을 수 있다.</li><li><p>예를 들어, <code>ArithmeticError</code>의 하위 클래스로서 <code>FloatingPointError</code>, <code>OverflowError</code>, <code>ZeroDivisionError</code>가 존재하기 때문에 이들 하위 클래스 예외가 발생하면 <code>ArithmeticError</code>로 처리할 수 있다.</p></li><li><p>예외가 임의의 <code>except</code>에서 잡히면 다른 <code>except</code>에서는 잡히지 않는다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dosomething</span><span class="params">()</span>:</span></span><br><span class="line">  a = <span class="number">1</span>/<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  dosomething()</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">"ZeroDivisionError occured"</span></span><br><span class="line"><span class="keyword">except</span> ArithmeticError:</span><br><span class="line">   <span class="keyword">print</span> <span class="string">"ArithmeticError occured"</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Exception-Handling&quot;&gt;&lt;a href=&quot;#Exception-Handling&quot; class=&quot;headerlink&quot; title=&quot;Exception Handling&quot;&gt;&lt;/a&gt;Exception Handling&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python Exception Handling</title>
    <link href="http://bongbooski.github.io/2018/04/17/post21-python-exception-handling_eng/"/>
    <id>http://bongbooski.github.io/2018/04/17/post21-python-exception-handling_eng/</id>
    <published>2018-04-17T00:47:23.000Z</published>
    <updated>2018-04-17T13:46:10.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Exception-Handling"><a href="#Exception-Handling" class="headerlink" title="Exception Handling"></a>Exception Handling</h1><ul><li><p>Syntax Error</p><ul><li>Grammatical error</li><li>IDE checks syntax error automatically</li><li>Becasue python’s grammar is simpler relatively, error occur rate is smaller and it is easy to delete errors</li></ul></li><li><p>Exception</p><ul><li>the cases having no syntax errors, the program can’t progress</li><li>Occuring exception, the program ends</li></ul><ol><li><p><code>NameError</code> (Usiung undefined variable)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> + boo*<span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p><code>ZeroDivisionError</code> (Dividing by <code>0</code>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">0</span></span><br><span class="line">c = a / b</span><br></pre></td></tr></table></figure></li><li><p><code>TypeError</code> (ex: String + Number type)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'2'</span> + <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p><code>IndexError</code> (Using index over the range of index)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l = [1,2]</span><br><span class="line">print l[2]</span><br></pre></td></tr></table></figure></li><li><p><code>KeyError</code> (Searching dictionary by unregisted key)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">"a"</span>:<span class="number">1</span>, <span class="string">"b"</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">print</span> d[<span class="string">'c'</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>IOError</code> (Opening not existing file)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = open(<span class="string">'aaa.txt'</span>)</span><br></pre></td></tr></table></figure></li></ol><hr></li></ul><h1 id="How-to-dispose-of-exceptions"><a href="#How-to-dispose-of-exceptions" class="headerlink" title="How to dispose of exceptions"></a>How to dispose of exceptions</h1><ol><li><p>Using <code>try</code>,<code>except</code>,<code>else</code>,<code>finally</code> statements</p><ul><li>By expecting the situations making exceptions, we can control the whole code’s flow</li><li><p><code>try</code>,<code>except</code>,<code>else</code>,<code>finally</code></p><ul><li>structure<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  (possible to make errors) usual statements</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">  the statements working when error occurs</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  the statements working when error doesn<span class="string">'t occur</span></span><br><span class="line"><span class="string">finally:</span></span><br><span class="line"><span class="string">  the statements working anyway no matter error</span></span><br></pre></td></tr></table></figure></li></ul><hr></li></ul></li></ol><ul><li><p>Doing exception handling, when error occurs the program doesn’t stop</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  <span class="keyword">print</span> <span class="number">1.0</span>/a</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'zero division error!!!'</span></span><br></pre></td></tr></table></figure></li><li><p><code>msg</code>variable: the message that the person who defined <code>ZeroDivisionError</code> gives<br>ex: float division by zero</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      <span class="keyword">print</span> <span class="number">10.0</span> / n</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError, msg</span><br><span class="line">      <span class="keyword">print</span> msg</span><br><span class="line"></span><br><span class="line">division()</span><br></pre></td></tr></table></figure></li><li><p>It can handle the error from the called function in <code>try</code>statement indirectly</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  spam()</span><br><span class="line"><span class="keyword">except</span> NameError, msg:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'Error -'</span>, msg</span><br></pre></td></tr></table></figure><p><code>,</code> can be replaced with <code>as</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># same code with upper one</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  spam()</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> msg:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'Error -'</span>, msg</span><br></pre></td></tr></table></figure></li><li><p>After <code>except</code>, not evincing any exceptions, it takes care of all exceptions</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  spam()</span><br><span class="line">  <span class="keyword">print</span> <span class="number">1.0</span>/<span class="number">0.0</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'Error'</span></span><br></pre></td></tr></table></figure></li><li><p>About many exceptions, they can be taked care by each <code>except</code>statement</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="number">0.0</span></span><br><span class="line">name = <span class="string">'aaa.txt'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  <span class="keyword">print</span> <span class="number">1.0</span> / b</span><br><span class="line">  spam()</span><br><span class="line">  f = open(name, <span class="string">'r'</span>)</span><br><span class="line">  <span class="string">'2'</span> + <span class="number">2</span></span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'NameError !!!'</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'ZeroDivisionError !!!'</span></span><br><span class="line">excpet (TypeError, IOError):</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'TypeError or IOERror !!!'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'No Exception'</span></span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">'Exit !!!'</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="Catching-All-exception-in-same-kind"><a href="#Catching-All-exception-in-same-kind" class="headerlink" title="Catching All exception in same kind"></a>Catching All exception in same kind</h1><ul><li>By using the hierarchy of Inheritance of exception class, It can take care of many exceptions by once</li><li><p>For example, there are <code>FloatingPointError</code>, <code>OverflowError</code>, <code>ZeroDivisionError</code> as sub-class of <code>ArithmeticError</code> so, about sub-class exceptions, <code>ArithmeticError</code> can take care of them</p></li><li><p>When an exception is catched by specific <code>except</code>, that one is not catched in other <code>except</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dosomething</span><span class="params">()</span>:</span></span><br><span class="line">  a = <span class="number">1</span>/<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  dosomething()</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">"ZeroDivisionError occured"</span></span><br><span class="line"><span class="keyword">except</span> ArithmeticError:</span><br><span class="line">   <span class="keyword">print</span> <span class="string">"ArithmeticError occured"</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Exception-Handling&quot;&gt;&lt;a href=&quot;#Exception-Handling&quot; class=&quot;headerlink&quot; title=&quot;Exception Handling&quot;&gt;&lt;/a&gt;Exception Handling&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python Package</title>
    <link href="http://bongbooski.github.io/2018/04/15/post20-python-package_eng/"/>
    <id>http://bongbooski.github.io/2018/04/15/post20-python-package_eng/</id>
    <published>2018-04-15T06:48:23.000Z</published>
    <updated>2018-04-17T13:44:32.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h1><ul><li>Structure gathering many modules in one directory physically<ul><li>Top directory’s name is the package’s name</li><li>Sub directories under the Top directory become sub-package of the top package</li><li>Module = file, package = directory</li></ul></li></ul><hr><h2 id="Role-of-init-py"><a href="#Role-of-init-py" class="headerlink" title="Role of __init__.py"></a>Role of <code>__init__.py</code></h2><ul><li>The role recognizing the directory as a package</li><li>For sub-packes, this file is requried(if not, that will be usual folder)</li></ul><hr><h2 id="Doing-import"><a href="#Doing-import" class="headerlink" title="Doing import"></a>Doing import</h2>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Speech</span><br></pre></td></tr></table></figure><ul><li><code>Speech</code>directory should be one of the directories of <code>sys.path</code>(or <code>PYTHONPATH</code> environment variable)</li><li>Let’s say <code>Speech/Recognition/HMM.py</code> looks like this<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">"Train"</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadModel</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">"LoadModel"</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveModel</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">"SaveModel"</span></span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="How-to-use-specific-function"><a href="#How-to-use-specific-function" class="headerlink" title="How to use specific function"></a>How to use specific function</h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># can't use. from package's name, we need dot(.) for calling the module or function</span></span><br><span class="line"><span class="keyword">import</span> Speech</span><br><span class="line">Speech.Recognition.HMM.train()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Proper way</span></span><br><span class="line"><span class="keyword">import</span> Speech.Recognition.HMM</span><br><span class="line">Speech.Recognition.HMM.train()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Speech.Recognition <span class="keyword">import</span> HMM</span><br><span class="line">HMM.train()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Speech.Recognition.HMM <span class="keyword">import</span> train</span><br><span class="line">train()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Taking everything from the module. It can be used without the module's name</span></span><br><span class="line"><span class="keyword">from</span> Speech.Recognition.HMM <span class="keyword">import</span> *</span><br><span class="line">train()</span><br><span class="line">loadModel()</span><br><span class="line">saveModel()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Package&quot;&gt;&lt;a href=&quot;#Package&quot; class=&quot;headerlink&quot; title=&quot;Package&quot;&gt;&lt;/a&gt;Package&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Structure gathering many modules in one dire
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 패키지</title>
    <link href="http://bongbooski.github.io/2018/04/15/post20-python-package/"/>
    <id>http://bongbooski.github.io/2018/04/15/post20-python-package/</id>
    <published>2018-04-15T06:48:23.000Z</published>
    <updated>2018-04-17T13:44:32.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="패키지-Package"><a href="#패키지-Package" class="headerlink" title="패키지(Package)"></a>패키지(Package)</h1><ul><li>여러 모듈들을 한데 묶어서 정리해 놓은 구조</li><li>물리적으로 여러 모듈 파일을 모아 놓은 디렉토리에 해당<ul><li>최상위 디렉토리 이름이 패키지 이름이 된다.</li><li>최상위 디렉토리 하위에 여러 서브 디렉토리는 해당 최상위패키지의 하위 패키지가 된다.</li><li>모듈=파일, 패키지=디렉토리</li></ul></li></ul><hr><h2 id="init-py의-역할"><a href="#init-py의-역할" class="headerlink" title="__init__.py의 역할"></a><code>__init__.py</code>의 역할</h2><ul><li>디렉토리를 패키지로 인식시키는 역할</li><li>서브 패키지에도 패키지와 마찬가지로 필요(없으면 단순 폴더역할)</li></ul><hr><h2 id="import하기"><a href="#import하기" class="headerlink" title="import하기"></a>import하기</h2>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Speech</span><br></pre></td></tr></table></figure><ul><li><code>Speech</code>디렉토리가 <code>sys.path</code>(또는 <code>PYTHONPATH</code>환경변수)에 열거된 폴더 중 하나에 위치해야함</li><li><code>Speech/Recognition/HMM.py</code>코드 내용<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">"Train"</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadModel</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">"LoadModel"</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveModel</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">"SaveModel"</span></span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="특정-함수-사용하는-방법"><a href="#특정-함수-사용하는-방법" class="headerlink" title="특정 함수 사용하는 방법"></a>특정 함수 사용하는 방법</h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 사용불가. 패키지명에서 .으로 특정 모듈, 함수 가져와야함</span></span><br><span class="line"><span class="keyword">import</span> Speech</span><br><span class="line">Speech.Recognition.HMM.train()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 적절한 방법</span></span><br><span class="line"><span class="keyword">import</span> Speech.Recognition.HMM</span><br><span class="line">Speech.Recognition.HMM.train()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Speech.Recognition <span class="keyword">import</span> HMM</span><br><span class="line">HMM.train()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Speech.Recognition.HMM <span class="keyword">import</span> train</span><br><span class="line">train()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 모듈 내의 변수 전부 다 가져옴, 모듈이름 없이 사용가능</span></span><br><span class="line"><span class="keyword">from</span> Speech.Recognition.HMM <span class="keyword">import</span> *</span><br><span class="line">train()</span><br><span class="line">loadModel()</span><br><span class="line">saveModel()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;패키지-Package&quot;&gt;&lt;a href=&quot;#패키지-Package&quot; class=&quot;headerlink&quot; title=&quot;패키지(Package)&quot;&gt;&lt;/a&gt;패키지(Package)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;여러 모듈들을 한데 묶어서 정리해 놓은 구조&lt;/
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 모듈 import하기</title>
    <link href="http://bongbooski.github.io/2018/04/15/post19-python-import/"/>
    <id>http://bongbooski.github.io/2018/04/15/post19-python-import/</id>
    <published>2018-04-15T02:48:23.000Z</published>
    <updated>2018-04-17T13:44:06.448Z</updated>
    
    <content type="html"><![CDATA[<h1 id="import-모듈명"><a href="#import-모듈명" class="headerlink" title="import 모듈명"></a>import 모듈명</h1><ol><li><p>기본적인 형태</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mymath</span><br><span class="line"><span class="keyword">print</span> mymath.area(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li><li><p>from 모듈명 import 가져올 대상</p><ul><li>해당 모듈에 존재하는 대상을 가져옴</li><li>기존에 존재하던 이름이면 기존 객체가 상실됨</li><li>모듈 이름 없이 바로 사용 가능<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mymath <span class="keyword">import</span> area, mypi</span><br><span class="line"><span class="keyword">print</span> area(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>from 모듈명 import *</p><ul><li>해당 모듈에 존재하는 <code>__</code>로 시작되는 것들을 제외한 모든 대상을 가져옴<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mymath <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">print</span> area(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>import 모듈명 as 새로운 모듈 이름</p><ul><li>해당 모듈을 다른 이름으로 사용하고자 할 때 사용</li><li>기존 모듈 이름이 너무 길거나 현재 사용중인 이름인 경우 유용<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string <span class="keyword">as</span> chstr</span><br><span class="line"><span class="keyword">print</span> chstr</span><br><span class="line"><span class="keyword">print</span></span><br><span class="line"><span class="keyword">print</span> chstr.punctuation</span><br></pre></td></tr></table></figure></li></ul></li><li><p>from 모듈명 import 이름 as 새로운 이름[, 이름 as 새로운 이름]</p><ul><li>해당 모듈 내에 정의된 이름을 새로운 이름으로 사용하고자 할 때<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> replace <span class="keyword">as</span> substitute[, upper <span class="keyword">as</span> up]</span><br><span class="line"><span class="keyword">print</span> substitute</span><br><span class="line"><span class="keyword">print</span> substitute(<span class="string">'ham chicken spam'</span>, <span class="string">'chicke'</span>, <span class="string">'egg'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> up</span><br><span class="line"><span class="keyword">print</span> up(<span class="string">'abc'</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li>import문은 어디에서나 사용가능(함수 내에서도 가능)</li></ul><hr><h1 id="컴파일과-적재시간"><a href="#컴파일과-적재시간" class="headerlink" title="컴파일과 적재시간"></a>컴파일과 적재시간</h1><ul><li><p><code>import mymath</code>를 수행할 때 발생하는 일</p><ol><li><code>mymath.pyc</code>를 찾는다</li><li>없다면 <code>mymath.py</code>를 찾아서 <code>mymath.pyc</code>를 생성한다</li><li><code>mymath.pyc</code>를 메모리로 읽어들여 수행한다</li></ol></li><li><p><code>.pyc</code>파일</p><ol><li><p>바이트 코드 파일</p><ul><li>기계나 플랫폼(운영체제 등)에 의존하지 않도록 만들어진 일종의 목적 코드(Object code)</li><li>파이썬은 컴파일 언어이면서 동시에 인터프리터 언어의 수행 방식을 취함</li></ul></li><li><p>새로운 <code>.pyc</code>파일 생성에 대한 판단</p><ul><li><code>.py</code>수정시간이 <code>.pyc</code>수정 시간보다 더 최근일 때</li></ul></li><li><code>.py</code>가 없이 <code>.pyc</code>파일만 있어도 <code>import</code>가능<ul><li>코드를 숨기는 방법으로 활용 가능</li></ul></li></ol></li></ul><hr><h1 id="같은-이름을-다시-사용할-때"><a href="#같은-이름을-다시-사용할-때" class="headerlink" title="같은 이름을 다시 사용할 때"></a>같은 이름을 다시 사용할 때</h1><ul><li>같은 이름 사용하면 이전의 내용이 삭제되지만 모듈은 메모리에 남아있고, 다시 <code>import</code>하면 다시 가져오는 것이 아니라 메모리에 존재하는 모듈을 활용함. 따라서 기존에 추가 정의한 내용들 사용가능</li></ul><hr><h1 id="모듈의-실행과-테스트-코드"><a href="#모듈의-실행과-테스트-코드" class="headerlink" title="모듈의 실행과 테스트 코드"></a>모듈의 실행과 테스트 코드</h1><ul><li><p><code>__name__</code></p><ul><li>현재의 모듈이 최상위 모듈로서 수행되는지, 아니면다른 모듈에 의해 <code>imort</code>되어 수행되는지를 구별하기 위해 주로 사용</li><li>최상위 모듈에서 사용할 때 -&gt; <code>__main__</code></li><li><p>다른 모듈에서 사용될 때 -&gt; 해당 모듈의 이름</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> __name__ <span class="comment"># __main__ 출력</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> prname</span><br><span class="line"><span class="keyword">print</span> prname.__name__ <span class="comment"># prname출력</span></span><br></pre></td></tr></table></figure></li><li><p>사용방법</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">"Python is becoming popular."</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">  <span class="keyword">print</span> add(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">  f()</span><br></pre></td></tr></table></figure><ul><li>직접 실행할 때는 <code>if</code>절 동작</li><li>다른 곳에서 활용할 경우 <code>if</code>절 무시</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;import-모듈명&quot;&gt;&lt;a href=&quot;#import-모듈명&quot; class=&quot;headerlink&quot; title=&quot;import 모듈명&quot;&gt;&lt;/a&gt;import 모듈명&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;기본적인 형태&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python module importing</title>
    <link href="http://bongbooski.github.io/2018/04/15/post19-python-import_eng/"/>
    <id>http://bongbooski.github.io/2018/04/15/post19-python-import_eng/</id>
    <published>2018-04-15T02:48:23.000Z</published>
    <updated>2018-04-17T13:44:07.242Z</updated>
    
    <content type="html"><![CDATA[<h1 id="import-module’s-name"><a href="#import-module’s-name" class="headerlink" title="import module’s name"></a>import module’s name</h1><ol><li><p>Basic form</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mymath</span><br><span class="line"><span class="keyword">print</span> mymath.area(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li><li><p>from module’s name import wanted object</p><ul><li>taking the wanted object from the module</li><li>original object is lost if the name is using</li><li>it can be used without the module’s name<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mymath <span class="keyword">import</span> area, mypi</span><br><span class="line"><span class="keyword">print</span> area(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>from module’s name import *</p><ul><li>taking everything from the module without objects starting <code>__</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> mymath <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">print</span> area(<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>import module’s name as another module name</p><ul><li>another name is used for calling the module</li><li>It is recommended when the original name is too long or already used<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> string <span class="keyword">as</span> chstr</span><br><span class="line"><span class="keyword">print</span> chstr</span><br><span class="line"><span class="keyword">print</span></span><br><span class="line"><span class="keyword">print</span> chstr.punctuation</span><br></pre></td></tr></table></figure></li></ul></li><li><p>from module’s name import original name as another name[, name2 as another name2]</p><ul><li>another name is used for calling the module<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> string <span class="keyword">import</span> replace <span class="keyword">as</span> substitute[, upper <span class="keyword">as</span> up]</span><br><span class="line"><span class="keyword">print</span> substitute</span><br><span class="line"><span class="keyword">print</span> substitute(<span class="string">'ham chicken spam'</span>, <span class="string">'chicke'</span>, <span class="string">'egg'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> up</span><br><span class="line"><span class="keyword">print</span> up(<span class="string">'abc'</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol><ul><li><code>import</code> can be used anywhere(including in a function)</li></ul><hr><h1 id="Compile-and-Load-time"><a href="#Compile-and-Load-time" class="headerlink" title="Compile and Load time"></a>Compile and Load time</h1><ul><li><p><code>import mymath</code> works like this</p><ol><li>Finding <code>mymath.pyc</code></li><li>If that doesn’t exist, Finding <code>mymath.py</code> and creating <code>mymath.pyc</code></li><li>Loading <code>mymath.pyc</code> into memory and executing</li></ol></li><li><p><code>.pyc</code> file</p><ol><li><p>Byte code file</p><ul><li>Kind of Object code not depending on machines or platform(OS)</li><li>Python takes both executing ways of compile language and interpreter language</li></ul></li><li><p>Deciding about creating new <code>.pyc</code>file</p><ul><li>When modificatin time of <code>.py</code> is more recently than modification time of <code>.pyc</code></li></ul></li><li>Without <code>.py</code>file, <code>import</code> is available with <code>.pyc</code><ul><li>It can be use as the way to hide the original code</li></ul></li></ol></li></ul><hr><h1 id="Using-the-same-name-again"><a href="#Using-the-same-name-again" class="headerlink" title="Using the same name again"></a>Using the same name again</h1><ul><li>Though the name’s target is changed, the module remains in memory, if we <code>import</code> the module, that takes the module existing in memory. So, we can use the thing we defined additionally in the module at the code</li></ul><hr><h1 id="Executing-module-and-test-code"><a href="#Executing-module-and-test-code" class="headerlink" title="Executing module and test code"></a>Executing module and test code</h1><ul><li><p><code>__name__</code></p><ul><li>It is usually used for knowing if this module is used as the root module or in other module by <code>import</code></li><li>Being used as the root module -&gt; <code>__main__</code></li><li><p>Being used in other module -&gt; that module’s name</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> __name__ <span class="comment"># __main__ print</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> prname</span><br><span class="line"><span class="keyword">print</span> prname.__name__ <span class="comment"># prname print</span></span><br></pre></td></tr></table></figure></li><li><p>How to use</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(a, b)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> a + b</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">"Python is becoming popular."</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">  <span class="keyword">print</span> add(<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line">  f()</span><br></pre></td></tr></table></figure><ul><li>Direct executing runs <code>if</code> statement</li><li>Being used in other module ignores <code>if</code> statement</li></ul></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;import-module’s-name&quot;&gt;&lt;a href=&quot;#import-module’s-name&quot; class=&quot;headerlink&quot; title=&quot;import module’s name&quot;&gt;&lt;/a&gt;import module’s name&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python lambda function</title>
    <link href="http://bongbooski.github.io/2018/04/12/post18-python-lambda_eng/"/>
    <id>http://bongbooski.github.io/2018/04/12/post18-python-lambda_eng/</id>
    <published>2018-04-12T05:19:37.000Z</published>
    <updated>2018-04-17T13:42:59.760Z</updated>
    
    <content type="html"><![CDATA[<h1 id="the-definition-of-lambda-function"><a href="#the-definition-of-lambda-function" class="headerlink" title="the definition of lambda function"></a>the definition of lambda function</h1><ul><li>new literal defining usual functions by one line</li><li>usually it is used for defining one-time functions</li><li>after <code>:</code>, only expression can follow</li><li>lambda function is An object too</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> x: x + <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> f(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ol><li><p>Assigning variables and calling the lambda function having two parameters</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g = <span class="keyword">lambda</span> x,y: x + y</span><br><span class="line"><span class="keyword">print</span> g(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><p>Defining the lambda function having default argument</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = <span class="keyword">lambda</span> x, inc=<span class="number">1</span>: x+inc</span><br><span class="line"><span class="keyword">print</span> g(<span class="number">10</span>) <span class="comment"># default argument(inc=1) value is used</span></span><br><span class="line"><span class="keyword">print</span> g(<span class="number">10</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure></li><li><p>Defining the lambda function having variable argument</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#args is returned</span></span><br><span class="line">vargs = <span class="keyword">lambda</span> x, *args: args</span><br><span class="line"><span class="keyword">print</span> vars(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="Using-lambda-functions"><a href="#Using-lambda-functions" class="headerlink" title="Using lambda functions"></a>Using lambda functions</h2><ul><li><p>Using usual function</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(x)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> x*x + <span class="number">3</span>*x - <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(x)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> x*x*x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(func)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> [func(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">-10</span>, <span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> g(f1)</span><br><span class="line"><span class="keyword">print</span> g(f2)</span><br></pre></td></tr></table></figure></li><li><p>Usiung lambda function</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(func)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> [func(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">-10</span>, <span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> g(<span class="keyword">lambda</span> x: x*x + <span class="number">3</span>*x - <span class="number">10</span>)</span><br><span class="line"><span class="keyword">print</span> g(<span class="keyword">lambda</span> x: x*x*x)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Utilizing-lambda-function"><a href="#Utilizing-lambda-function" class="headerlink" title="Utilizing lambda function"></a>Utilizing lambda function</h2><ul><li><code>map</code>, <code>filter</code>, <code>reduce</code> built-in functions</li></ul><ol><li><p><code>map</code> built-in function</p><ul><li><p><code>map(function, seq)</code>: taking item by item in <code>seq</code> and running <code>function</code> with the item and returning the result as the type of <code>seq</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> x * x</span><br><span class="line">X - [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">Y = map(f, X)</span><br><span class="line"><span class="keyword">print</span> Y</span><br></pre></td></tr></table></figure></li><li><p>Using <code>map</code> and lambda function - most recommended</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">print</span> map(<span class="keyword">lambda</span> x: x * x, X)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>filter</code> built-in function</p><ul><li>taking item by item in <code>seq</code> and running <code>function</code> with the item and returning the result as the type of <code>seq</code> if the result is <code>True</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> filter(<span class="keyword">lambda</span> x: x&gt;<span class="number">2</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">45</span>])</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>reduce</code> built-in function</p><ul><li><code>reduce(function, seq[,initial])</code></li><li>about each items in <code>seq</code>, applying <code>function</code> and mapping as A value</li><li>the 1st paremeter(<code>function</code>) should take two values(ex: x,y)<ol><li>the items of <code>seq</code> get into <code>y</code></li><li>the result after calling the function gets into <code>x</code></li></ol></li><li>optionally, the 3rd parameter <code>initial</code> is used as default value of <code>x</code> at the 1st step<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> reduce(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="keyword">print</span> reduce(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], <span class="number">1000</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;the-definition-of-lambda-function&quot;&gt;&lt;a href=&quot;#the-definition-of-lambda-function&quot; class=&quot;headerlink&quot; title=&quot;the definition of lambda f
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 람다(lambda) 함수</title>
    <link href="http://bongbooski.github.io/2018/04/12/post18-python-lambda/"/>
    <id>http://bongbooski.github.io/2018/04/12/post18-python-lambda/</id>
    <published>2018-04-12T05:19:37.000Z</published>
    <updated>2018-04-17T13:42:59.231Z</updated>
    
    <content type="html"><![CDATA[<h1 id="람다-lambda-함수-정의"><a href="#람다-lambda-함수-정의" class="headerlink" title="람다(lambda)함수 정의"></a>람다(lambda)함수 정의</h1><ul><li>일반적인 함수를 한 줄의 문으로 정의할 수 있는 새로운 함수 정의 리터럴</li><li>일회성으로 활용할 함수 정의할 때 주로 사용</li><li><code>:</code>뒤에는 식만 올 수 있음</li><li>람다 함수도 하나의 객체임</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="keyword">lambda</span> x: x + <span class="number">1</span></span><br><span class="line"><span class="keyword">print</span> f(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><ol><li><p>인수가 두 개 있는 람다 함수를 지니는 변수 지정 및 함수 호출</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g = <span class="keyword">lambda</span> x,y: x + y</span><br><span class="line"><span class="keyword">print</span> g(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure></li><li><p>기본 인수를 지니는 람다 함수 정의</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g = <span class="keyword">lambda</span> x, inc=<span class="number">1</span>: x+inc</span><br><span class="line"><span class="keyword">print</span> g(<span class="number">10</span>) <span class="comment"># inc기본 인수 값으로 1사용</span></span><br><span class="line"><span class="keyword">print</span> g(<span class="number">10</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure></li><li><p>가변 인수를 지니는 람다 함수 정의</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vargs = <span class="keyword">lambda</span> x, *args: args <span class="comment">#args가 리턴됨</span></span><br><span class="line"><span class="keyword">print</span> vars(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="람다-함수-사용하기"><a href="#람다-함수-사용하기" class="headerlink" title="람다 함수 사용하기"></a>람다 함수 사용하기</h2><ul><li><p>일반 함수 사용</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(x)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> x*x + <span class="number">3</span>*x - <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(x)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> x*x*x</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(func)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> [func(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">-10</span>, <span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> g(f1)</span><br><span class="line"><span class="keyword">print</span> g(f2)</span><br></pre></td></tr></table></figure></li><li><p>람다 함수 사용</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">g</span><span class="params">(func)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> [func(x) <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">-10</span>, <span class="number">10</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> g(<span class="keyword">lambda</span> x: x*x + <span class="number">3</span>*x - <span class="number">10</span>)</span><br><span class="line"><span class="keyword">print</span> g(<span class="keyword">lambda</span> x: x*x*x)</span><br></pre></td></tr></table></figure></li></ul><h2 id="람다-함수-활용"><a href="#람다-함수-활용" class="headerlink" title="람다 함수 활용"></a>람다 함수 활용</h2><ul><li><code>map</code>, <code>filter</code>, <code>reduce</code> 내장 함수</li></ul><ol><li><p><code>map</code> 내장 함수</p><ul><li><p><code>map(function, seq)</code>: <code>seq</code>의 원소를 차례로 돌면서 <code>function</code>에 적용한 결과를 <code>seq</code>의 자료형으로 반환</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span></span><br><span class="line">  <span class="keyword">return</span> x * x</span><br><span class="line">X - [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">Y = map(f, X)</span><br><span class="line"><span class="keyword">print</span> Y</span><br></pre></td></tr></table></figure></li><li><p><code>map</code>과 람다 함수를 동시에 사용 - 가장 추천</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">X = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">print</span> map(<span class="keyword">lambda</span> x: x * x, X)</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>filter</code> 내장 함수</p><ul><li><code>seq</code>자료형이 지닌 각 원소값에 대해 <code>function</code>에 적용한 결과가 참인 원소값들만을 동일 시퀀스 자료형으로 반환<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> filter(<span class="keyword">lambda</span> x: x&gt;<span class="number">2</span>, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">45</span>])</span><br></pre></td></tr></table></figure></li></ul></li><li><p><code>reduce</code> 내장 함수</p><ul><li><code>reduce(function, seq[,initial])</code></li><li><code>seq</code>자료형이 지닌 각 원소값에 대해 <code>function</code>함수를 적용하면서 하나의 값으로 매핑</li><li>첫번째 인자(<code>function</code>)는 반드시 두 개의 인자(ex. x,y)를 받아야한다.<ul><li><code>seq</code>의 각 원소값들이 차례로 <code>y</code>에 들어간다</li><li>함수가 수행된 값은 차례대로 <code>x</code>에 들어간다</li></ul></li><li>추가적으로 제공가능한 세번재 인자인 <code>initial</code>은 첫번째 단계에서 <code>x</code>에 할당할 초기값으로 사용된다<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> reduce(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>])</span><br><span class="line"><span class="keyword">print</span> reduce(<span class="keyword">lambda</span> x, y: x + y, [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>], <span class="number">1000</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;람다-lambda-함수-정의&quot;&gt;&lt;a href=&quot;#람다-lambda-함수-정의&quot; class=&quot;headerlink&quot; title=&quot;람다(lambda)함수 정의&quot;&gt;&lt;/a&gt;람다(lambda)함수 정의&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;일반적인 함수를 한 줄
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python operating files</title>
    <link href="http://bongbooski.github.io/2018/04/11/post17_python-file,directory_eng/"/>
    <id>http://bongbooski.github.io/2018/04/11/post17_python-file,directory_eng/</id>
    <published>2018-04-11T06:38:47.000Z</published>
    <updated>2018-04-17T13:30:28.259Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Operating-files"><a href="#Operating-files" class="headerlink" title="Operating files"></a>Operating files</h1><h2 id="Opening-file-list"><a href="#Opening-file-list" class="headerlink" title="Opening file list"></a>Opening file list</h2><p>Using <code>os</code>module<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> os.listdir(<span class="string">'.'</span>) <span class="comment"># file list of present directory</span></span><br><span class="line"><span class="keyword">print</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> os.listdir(<span class="string">'../'</span>) <span class="comment"># file list of parent directory</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="Recognizing-file’s-category"><a href="#Recognizing-file’s-category" class="headerlink" title="Recognizing file’s category"></a>Recognizing file’s category</h2><ul><li><code>os.path</code>module recognizes and returns <code>True</code> or <code>False</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filetype</span><span class="params">(fpath)</span>:</span></span><br><span class="line">  <span class="keyword">print</span> fpath, <span class="string">":"</span>,</span><br><span class="line">  <span class="keyword">if</span> os.path.isfile(fpath):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Regular file'</span></span><br><span class="line">  <span class="keyword">if</span> os.path.isdir(fpath):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Directory'</span></span><br><span class="line">  <span class="keyword">if</span> os.path.islink(fpath):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Symbolic link'</span></span><br><span class="line"></span><br><span class="line">flist = os.listdir(<span class="string">'.'</span>)</span><br><span class="line"><span class="keyword">for</span> fname <span class="keyword">in</span> flist:</span><br><span class="line">  filetype(fname)</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="Permission-about-file"><a href="#Permission-about-file" class="headerlink" title="Permission about file"></a>Permission about file</h2><ol><li><p>Learning permission about file</p><ul><li><code>os.access(filepath, mode)</code><ul><li>the values we can put for <code>mode</code><ul><li><code>os.F_OK</code>: testing if the file exists</li><li><code>os.R_OK</code>: testing about reading permission</li><li><code>os.W_OK</code>: testing about writing permission</li><li><code>os.X_OK</code>: testing about opening or executing permission</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fileaccess</span><span class="params">(fpath)</span>:</span></span><br><span class="line">  <span class="keyword">print</span> fpath, <span class="string">':'</span>,</span><br><span class="line">  <span class="keyword">if</span> os.access(fpath, os.F_OK):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Exists'</span>,</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">if</span> os.access(fpath, os.R_OK):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'R'</span>,</span><br><span class="line">  <span class="keyword">if</span> os.access(fpath, os.W_OK):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'W'</span>,</span><br><span class="line">  <span class="keyword">if</span> os.access(fpath, os.X_OK):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'X'</span>,</span><br><span class="line">  <span class="keyword">print</span></span><br><span class="line"></span><br><span class="line">flist = os.listdir(<span class="string">'.'</span>)</span><br><span class="line"><span class="keyword">for</span> fname <span class="keyword">in</span> flist:</span><br><span class="line">  fileaccess(fname)</span><br></pre></td></tr></table></figure></li><li><p>Chagning the Permission for the file</p><ul><li><code>os.chmod(filepath, mode)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.chmod(<span class="string">'sample.txt'</span>, <span class="number">0777</span>)</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="Manipulating-files"><a href="#Manipulating-files" class="headerlink" title="Manipulating files"></a>Manipulating files</h2><ol><li><p>Chagning the name of the file</p><ul><li><code>os.rename(old_filepath, new_filepath)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.rename(<span class="string">'t.txt'</span>, <span class="string">'t1.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> os.access(<span class="string">'t.txt'</span>, os.F_OK) <span class="comment"># checking if the file exists</span></span><br><span class="line"><span class="keyword">print</span> os.access(<span class="string">'t1.txt'</span>, os.F_OK)</span><br></pre></td></tr></table></figure></li><li><p>Moving the file</p><ul><li><p><code>os.rename(oldfilepath, new_filepath)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.rename(<span class="string">'t.txt'</span>, <span class="string">'example/t1.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># checking if the file exists</span></span><br><span class="line"><span class="keyword">print</span> os.access(<span class="string">'example/t1.txt'</span>, os.F_OK)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>Copying the file</p><ul><li><code>shutil</code>module is used</li><li><code>shutil.copyfile(src_filepath, dest_filepath)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">shutil.copyfile(<span class="string">'sample.txt'</span>, <span class="string">'sample_new.txt'</span>)</span><br><span class="line"><span class="keyword">print</span> os.access(<span class="string">'sample_new.txt'</span>, os.F_OK)</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="Manipulating-the-path-of-the-file"><a href="#Manipulating-the-path-of-the-file" class="headerlink" title="Manipulating the path of the file"></a>Manipulating the path of the file</h2><ol><li><p>Changing relative path to absolute path</p><ul><li><code>os.path.abspath</code> - relative path<ul><li>no matter the existance of the file, it changes the path to absolute path<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">print</span> os.path.abspath(<span class="string">'o.txt'</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>Checking if the file exists in the given path</p><ul><li><code>os.path.exists(filepath)</code></li></ul></li></ol><hr><h2 id="Dividing-path-name"><a href="#Dividing-path-name" class="headerlink" title="Dividing path name"></a>Dividing path name</h2><ol><li><p>Dividing path and file’s name</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="string">'/Users/booski/git/python/t.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> os.path.basename(f) <span class="comment"># extracting only the file's name</span></span><br><span class="line"><span class="keyword">print</span> os.path.dirname(f) <span class="comment"># extracting the directory's name</span></span><br></pre></td></tr></table></figure></li><li><p>Dividing path and file’s name by one line - <code>basename</code> and <code>dirname</code> are made in a tuple</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> os.path.split(f)</span><br></pre></td></tr></table></figure></li><li><p>Dividing drive’s name and file path in MS windows</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> os.path.splitdrive(f)</span><br></pre></td></tr></table></figure></li><li><p>Dividing extension - <code>path</code> and <code>extension</code> are made in a tuple</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> os.path.splitext(f)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Operating-files&quot;&gt;&lt;a href=&quot;#Operating-files&quot; class=&quot;headerlink&quot; title=&quot;Operating files&quot;&gt;&lt;/a&gt;Operating files&lt;/h1&gt;&lt;h2 id=&quot;Opening-file-
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 파일 다루기</title>
    <link href="http://bongbooski.github.io/2018/04/11/post17_python-file,directory/"/>
    <id>http://bongbooski.github.io/2018/04/11/post17_python-file,directory/</id>
    <published>2018-04-11T06:38:47.000Z</published>
    <updated>2018-04-17T13:30:28.862Z</updated>
    
    <content type="html"><![CDATA[<h1 id="파일-다루기"><a href="#파일-다루기" class="headerlink" title="파일 다루기"></a>파일 다루기</h1><h2 id="파일-목록열기"><a href="#파일-목록열기" class="headerlink" title="파일 목록열기"></a>파일 목록열기</h2><p><code>os</code>모듈 사용<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> os.listdir(<span class="string">'.'</span>) <span class="comment">#현재 디렉토리의 파일목록</span></span><br><span class="line"><span class="keyword">print</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> os.listdir(<span class="string">'../'</span>) <span class="comment">#현재 디렉토리의 부모 디렉토리의 파일 목록</span></span><br></pre></td></tr></table></figure></p><hr><h2 id="파일-종류-알아보기"><a href="#파일-종류-알아보기" class="headerlink" title="파일 종류 알아보기"></a>파일 종류 알아보기</h2><ul><li><code>os.path</code> 모듈로 파일 종류 판단하여 <code>True</code>, <code>False</code> 반환<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">filetype</span><span class="params">(fpath)</span>:</span></span><br><span class="line">  <span class="keyword">print</span> fpath, <span class="string">":"</span>,</span><br><span class="line">  <span class="keyword">if</span> os.path.isfile(fpath):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Regular file'</span></span><br><span class="line">  <span class="keyword">if</span> os.path.isdir(fpath):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Directory'</span></span><br><span class="line">  <span class="keyword">if</span> os.path.islink(fpath):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Symbolic link'</span></span><br><span class="line"></span><br><span class="line">flist = os.listdir(<span class="string">'.'</span>)</span><br><span class="line"><span class="keyword">for</span> fname <span class="keyword">in</span> flist:</span><br><span class="line">  filetype(fname)</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="파일의-허가권"><a href="#파일의-허가권" class="headerlink" title="파일의 허가권"></a>파일의 허가권</h2><ol><li><p>파일의 허가권 알아보기</p><ul><li><code>os.access(filepath, mode)</code><ul><li><code>mode</code>에 들어갈 값<ul><li><code>os.F_OK</code>: 파일 자체가 존재하는 것을 테스트</li><li><code>os.R_OK</code>: 읽기 권한이 있는 것을 테스트</li><li><code>os.W_OK</code>: 쓰기 권한이 있는 것을 테스트</li><li><code>os.X_OK</code>: 실행 권한이 있는 것(또는 디렉토리인지)을 테스트</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fileaccess</span><span class="params">(fpath)</span>:</span></span><br><span class="line">  <span class="keyword">print</span> fpath, <span class="string">':'</span>,</span><br><span class="line">  <span class="keyword">if</span> os.access(fpath, os.F_OK):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'Exists'</span>,</span><br><span class="line">  <span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  <span class="keyword">if</span> os.access(fpath, os.R_OK):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'R'</span>,</span><br><span class="line">  <span class="keyword">if</span> os.access(fpath, os.W_OK):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'W'</span>,</span><br><span class="line">  <span class="keyword">if</span> os.access(fpath, os.X_OK):</span><br><span class="line">    <span class="keyword">print</span> <span class="string">'X'</span>,</span><br><span class="line">  <span class="keyword">print</span></span><br><span class="line"></span><br><span class="line">flist = os.listdir(<span class="string">'.'</span>)</span><br><span class="line"><span class="keyword">for</span> fname <span class="keyword">in</span> flist:</span><br><span class="line">  fileaccess(fname)</span><br></pre></td></tr></table></figure></li><li><p>파일의 허가권 변경하기</p><ul><li><code>os.chmod(filepath, mode)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.chmod(<span class="string">'sample.txt'</span>, <span class="number">0777</span>)</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="파일-조작하기"><a href="#파일-조작하기" class="headerlink" title="파일 조작하기"></a>파일 조작하기</h2><ol><li><p>파일 이름 변경하기</p><ul><li><code>os.rename(old_filepath, new_filepath)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.rename(<span class="string">'t.txt'</span>, <span class="string">'t1.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> os.access(<span class="string">'t.txt'</span>, os.F_OK) <span class="comment"># 파일 존재 여부 확인</span></span><br><span class="line"><span class="keyword">print</span> os.access(<span class="string">'t1.txt'</span>, os.F_OK)</span><br></pre></td></tr></table></figure></li><li><p>파일 이동하기</p><ul><li><p><code>os.rename(oldfilepath, new_filepath)</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">os.rename(<span class="string">'t.txt'</span>, <span class="string">'example/t1.txt'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 파일 존재 여부 확인</span></span><br><span class="line"><span class="keyword">print</span> os.access(<span class="string">'example/t1.txt'</span>, os.F_OK)</span><br></pre></td></tr></table></figure></li></ul></li><li><p>파일 복사하기</p><ul><li><code>shutil</code>모듈 활용</li><li><code>shutil.copyfile(src_filepath, dest_filepath)</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">shutil.copyfile(<span class="string">'sample.txt'</span>, <span class="string">'sample_new.txt'</span>)</span><br><span class="line"><span class="keyword">print</span> os.access(<span class="string">'sample_new.txt'</span>, os.F_OK)</span><br></pre></td></tr></table></figure></li></ol><hr><h2 id="파일-이름-다루기"><a href="#파일-이름-다루기" class="headerlink" title="파일 이름 다루기"></a>파일 이름 다루기</h2><ol><li><p>상대 경로를 절대 경로로 변환하기</p><ul><li><code>os.path.abspath</code> - 상대경로<ul><li>실제 파일 존재와는 무관하게 절대경로로 변경<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">print</span> os.path.abspath(<span class="string">'o.txt'</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>주어진 경로에 파일이 존재하는지 확인</p><ul><li><code>os.path.exists(filepath)</code></li></ul></li></ol><hr><h2 id="경로명-분리하기"><a href="#경로명-분리하기" class="headerlink" title="경로명 분리하기"></a>경로명 분리하기</h2><ol><li><p>경로와 파일명으로 분리</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = <span class="string">'/Users/booski/git/python/t.txt'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> os.path.basename(f) <span class="comment"># 파일명만 추출</span></span><br><span class="line"><span class="keyword">print</span> os.path.dirname(f) <span class="comment"># 디렉토리 경로 추출</span></span><br></pre></td></tr></table></figure></li><li><p>경로명과 파일명을 한번에 분리 - basename과 dirname을 튜플로 확인</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> os.path.split(f)</span><br></pre></td></tr></table></figure></li><li><p>MS윈도우즈에서 드라이브명과 파일 경로명을 분리</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> os.path.splitdrive(f)</span><br></pre></td></tr></table></figure></li><li><p>확장자 분리 - 경로와 확장자명으로 튜플 생성</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">print</span> os.path.splitext(f)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;파일-다루기&quot;&gt;&lt;a href=&quot;#파일-다루기&quot; class=&quot;headerlink&quot; title=&quot;파일 다루기&quot;&gt;&lt;/a&gt;파일 다루기&lt;/h1&gt;&lt;h2 id=&quot;파일-목록열기&quot;&gt;&lt;a href=&quot;#파일-목록열기&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 파일 입출력</title>
    <link href="http://bongbooski.github.io/2018/04/09/post16_python_fileIO/"/>
    <id>http://bongbooski.github.io/2018/04/09/post16_python_fileIO/</id>
    <published>2018-04-09T06:09:17.000Z</published>
    <updated>2018-04-17T13:29:16.752Z</updated>
    
    <content type="html"><![CDATA[<h1 id="파일-입출력"><a href="#파일-입출력" class="headerlink" title="파일 입출력"></a>파일 입출력</h1><p><code>open</code>내장 함수 사용시 두번째 인자값으로 mode설정<br>생략시 읽기전용(r)으로 설정</p><ol><li><code>r</code> -읽기 전용 - 파일 객체를 읽기 모드로 생성, 파일 포인터를 파일 처음 위치로, 존재하지 않는 파일이면 에러발생</li><li><code>w</code> - 쓰기 전용 - 새로운 파일을 생성하거나 기존 파일의 내용을 다 없애고 쓰기모드로 생성, 파일 포인터를 파일 처음 위치로</li><li><code>a</code> - 파일 끝에 추가 - 이미 존재하는 파일을 쓰기모드로 생성하거나 존재하지 않으면 파일 만들고 생성, 파일 포인터를 마지막 위치에 놓음</li></ol><h2 id="이진파일-모드"><a href="#이진파일-모드" class="headerlink" title="이진파일 모드"></a>이진파일 모드</h2><ul><li><code>rb</code></li><li><code>wb</code></li><li><code>ab</code></li></ul><hr><p><code>f.close()</code>처럼 <code>close()</code>로 그때그때 닫아주는 것이 좋음</p><p><code>read()</code>를 사용하면 전체를 다 읽어서 할당함</p><h2 id="라인단위로-파일-읽기"><a href="#라인단위로-파일-읽기" class="headerlink" title="라인단위로 파일 읽기"></a>라인단위로 파일 읽기</h2><ol><li><p><code>for</code> 반복문 활용</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'t.txt'</span>)</span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">  <span class="keyword">print</span> i, <span class="string">":"</span>, line,</span><br><span class="line">  i += <span class="number">1</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li><p><code>readline()</code>-현재의 파일 포인터에서 개행 문자까지 읽음 = 한 라인</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'t.txt'</span>)</span><br><span class="line">line = f.readline()</span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> line:</span><br><span class="line">  <span class="keyword">print</span> i, <span class="string">":"</span>, line,</span><br><span class="line">  line = f.readline()</span><br><span class="line">  i += <span class="number">1</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li><p><code>readlines()</code>-각 라인을 모두 읽어서 리스트로 저장, 메모리는 비효율적으로 사용<br>상황별로 다른 동작함 - <code>for in</code>구문: 전체x, 라인별로 가져옴</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'t.txt'</span>)</span><br><span class="line"><span class="keyword">print</span> f.readlines() <span class="comment">#리스트 나옴</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#파일 포인터를 맨 앞으로</span></span><br><span class="line">f.seek(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">  <span class="keyword">print</span> i, <span class="string">":"</span>, line,</span><br><span class="line">  i += <span class="number">1</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li><p><code>xreadlines()</code> - 메모리 비효율 개선</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'t.txt'</span>)</span><br><span class="line"><span class="keyword">print</span> f.xreadlines() <span class="comment">#파일객체 자체가 나옴</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#파일 포인터를 맨 앞으로</span></span><br><span class="line">f.seek(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.xreadlines():</span><br><span class="line">  <span class="keyword">print</span> i, <span class="string">":"</span>, line,</span><br><span class="line">  i += <span class="number">1</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ol><p><strong><em><code>for in</code> 또는 <code>xreadlines()</code> 추천</em></strong></p><hr><h2 id="라인-단위로-쓰는-방법"><a href="#라인-단위로-쓰는-방법" class="headerlink" title="라인 단위로 쓰는 방법"></a>라인 단위로 쓰는 방법</h2><ol><li><p><code>writelines()</code> - 라인단위로 쓰기 작업</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lines = [<span class="string">'1st line\n'</span>, <span class="string">'2nd line\n'</span>, <span class="string">'3rd line\n'</span>]</span><br><span class="line">f = open(<span class="string">'t1.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">f.writelines(lines)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'t1.txt'</span>)</span><br><span class="line"><span class="keyword">print</span> f.read() <span class="comment">#전체내용 읽음</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li><p><code>write()</code> - 임의로 중간에 ‘\n’ 넣어줌</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lines = [<span class="string">'1st line'</span>, <span class="string">'2nd line'</span>, <span class="string">'3rd line'</span>]</span><br><span class="line">f = open(<span class="string">'t1.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">f.write(<span class="string">'\n'</span>.join(lines))</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'t1.txt'</span>)</span><br><span class="line"><span class="keyword">print</span> f.read() <span class="comment">#전체내용 읽음</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ol><h2 id="기존-파일에-내용-추가"><a href="#기존-파일에-내용-추가" class="headerlink" title="기존 파일에 내용 추가"></a>기존 파일에 내용 추가</h2><ul><li><code>a</code>모드 사용<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'removeme.txt'</span>, <span class="string">'a'</span>)</span><br><span class="line">f.write(<span class="string">'3rd line\n'</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'removeme.txt'</span>)</span><br><span class="line"><span class="keyword">print</span> f.read()</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ul><h2 id="파일-내-임의-위치로-접근"><a href="#파일-내-임의-위치로-접근" class="headerlink" title="파일 내 임의 위치로 접근"></a>파일 내 임의 위치로 접근</h2><ul><li>순차접근</li><li>임의접근<ul><li><code>seek(n)</code> - 파일의 가장 첫번째 위치에서 n번째 바이트로 포인터이동</li><li><code>tell()</code> - 파일 내 현재 포인터 위치를 반환</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'t.txt'</span></span><br><span class="line">f = open(name, <span class="string">'w+'</span>) <span class="comment"># 읽고 쓰기모드</span></span><br><span class="line">s = <span class="string">'0123456789asdf'</span></span><br><span class="line">f.write(s)</span><br><span class="line"></span><br><span class="line">f.seek(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">print</span> f.tell()</span><br><span class="line"><span class="keyword">print</span> f.read(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> f.tell()</span><br></pre></td></tr></table></figure><hr><h2 id="sys-모듈의-표준-입출력-모니터-관련-객체"><a href="#sys-모듈의-표준-입출력-모니터-관련-객체" class="headerlink" title="sys 모듈의 표준 입출력(모니터) 관련 객체"></a>sys 모듈의 표준 입출력(모니터) 관련 객체</h2><ul><li>sys.stdout: 표준 입출력</li><li>sys.stderr: 표준 에러 출력</li><li>sys.stdin: 표준 입력</li></ul><h3 id="표준-출력으로-파일-저장하기"><a href="#표준-출력으로-파일-저장하기" class="headerlink" title="표준 출력으로 파일 저장하기"></a>표준 출력으로 파일 저장하기</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'t.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">stdout = sys.stdout <span class="comment">#표준 출력 저장</span></span><br><span class="line">sys.stdout = f <span class="comment">#파일 객체로 표준 출력 변경</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Sample output'</span></span><br><span class="line">pirnt <span class="string">'Good'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Good'</span></span><br><span class="line">f.close()</span><br><span class="line">sys.stdout = stdout <span class="comment">#표준 출력 복원</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;파일-입출력&quot;&gt;&lt;a href=&quot;#파일-입출력&quot; class=&quot;headerlink&quot; title=&quot;파일 입출력&quot;&gt;&lt;/a&gt;파일 입출력&lt;/h1&gt;&lt;p&gt;&lt;code&gt;open&lt;/code&gt;내장 함수 사용시 두번째 인자값으로 mode설정&lt;br&gt;생략시 읽기전
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python File Input&amp;Output</title>
    <link href="http://bongbooski.github.io/2018/04/09/post16_python_fileIO_eng/"/>
    <id>http://bongbooski.github.io/2018/04/09/post16_python_fileIO_eng/</id>
    <published>2018-04-09T06:09:17.000Z</published>
    <updated>2018-04-17T13:28:42.682Z</updated>
    
    <content type="html"><![CDATA[<h1 id="File-IO"><a href="#File-IO" class="headerlink" title="File IO"></a>File IO</h1><ul><li>mode can be set as the Second parameter of <code>open</code>built-in function<br>default value is <code>read only(r)</code></li></ul><ol><li><code>r</code> - read only - file object is created in <code>read only</code>, file pointer moves to the beginning of the file, Error occurs if the file doesn’t exists</li><li><code>w</code> - write only - creating new file or creating new file object in <code>write only</code> after removing original file’s content, file pointer moves to the beginning of the file</li><li><code>a</code> - addding content at the bottom - creating file object in <code>write only</code> or creating new file if the file doesn’t exist and then putting the file pointer to the end of the file</li></ol><h2 id="Binary-file-mode"><a href="#Binary-file-mode" class="headerlink" title="Binary file mode"></a>Binary file mode</h2><ul><li><code>rb</code></li><li><code>wb</code></li><li><code>ab</code></li></ul><hr><p>It is recommended to close the file object by <code>close()</code> immediately like <code>f.close()</code></p><p>Using <code>read()</code> assigns whole content after reading everything</p><h2 id="Reading-file-line-by-line"><a href="#Reading-file-line-by-line" class="headerlink" title="Reading file line by line"></a>Reading file line by line</h2><ol><li><p>Using <code>for</code>loof statement</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'t.txt'</span>)</span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:</span><br><span class="line">  <span class="keyword">print</span> i, <span class="string">":"</span>, line,</span><br><span class="line">  i += <span class="number">1</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li><p><code>readline()</code> - from present file pointer to new line character = A line</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'t.txt'</span>)</span><br><span class="line">line = f.readline()</span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> line:</span><br><span class="line">  <span class="keyword">print</span> i, <span class="string">":"</span>, line,</span><br><span class="line">  line = f.readline()</span><br><span class="line">  i += <span class="number">1</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li><p><code>readlines()</code> - Saving line by line in a list, memory is used inefficiently<br>It works differently depending on each cases - <code>for in</code>statement: not reading everything, taking line by line</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'t.txt'</span>)</span><br><span class="line"><span class="keyword">print</span> f.readlines() <span class="comment"># returning a list</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># file pointer moves to the beginning of the file</span></span><br><span class="line">f.seek(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">  <span class="keyword">print</span> i, <span class="string">":"</span>, line,</span><br><span class="line">  i += <span class="number">1</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li><p><code>xreadlines()</code> - memory inefficiency improved</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'t.txt'</span>)</span><br><span class="line"><span class="keyword">print</span> f.xreadlines() <span class="comment"># returning file object</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># file pointer moves to the beginning of the file</span></span><br><span class="line">f.seek(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f.xreadlines():</span><br><span class="line">  <span class="keyword">print</span> i, <span class="string">":"</span>, line,</span><br><span class="line">  i += <span class="number">1</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ol><p><strong><em><code>for in</code> or <code>xreadlines()</code> are recommended</em></strong></p><hr><h2 id="the-way-to-write-down-line-by-line"><a href="#the-way-to-write-down-line-by-line" class="headerlink" title="the way to write down line by line"></a>the way to write down line by line</h2><ol><li><p><code>writelines()</code> - for writing line by line</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lines = [<span class="string">'1st line\n'</span>, <span class="string">'2nd line\n'</span>, <span class="string">'3rd line\n'</span>]</span><br><span class="line">f = open(<span class="string">'t1.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">f.writelines(lines)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'t1.txt'</span>)</span><br><span class="line"><span class="keyword">print</span> f.read() <span class="comment"># reading whole content</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li><li><p><code>write()</code> - putting <code>\n</code> between items</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">lines = [<span class="string">'1st line'</span>, <span class="string">'2nd line'</span>, <span class="string">'3rd line'</span>]</span><br><span class="line">f = open(<span class="string">'t1.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">f.write(<span class="string">'\n'</span>.join(lines))</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'t1.txt'</span>)</span><br><span class="line"><span class="keyword">print</span> f.read() <span class="comment"># reading whole content</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ol><h2 id="Adding-content-in-the-existing-file-existing"><a href="#Adding-content-in-the-existing-file-existing" class="headerlink" title="Adding content in the existing file existing"></a>Adding content in the existing file existing</h2><ul><li>Using mode <code>a</code><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">f = open(<span class="string">'removeme.txt'</span>, <span class="string">'a'</span>)</span><br><span class="line">f.write(<span class="string">'3rd line\n'</span>)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'removeme.txt'</span>)</span><br><span class="line"><span class="keyword">print</span> f.read()</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure></li></ul><h2 id="Seeking-specific-file-pointer"><a href="#Seeking-specific-file-pointer" class="headerlink" title="Seeking specific file pointer"></a>Seeking specific file pointer</h2><ul><li>Sequential access</li><li>specific access<ul><li><code>seek(n)</code> - moving file pointer to the point which is n byte far from the beginning of the file</li><li><code>tell()</code> - returning present file pointer in the file</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'t.txt'</span></span><br><span class="line">f = open(name, <span class="string">'w+'</span>) <span class="comment"># read and write mode</span></span><br><span class="line">s = <span class="string">'0123456789asdf'</span></span><br><span class="line">f.write(s)</span><br><span class="line"></span><br><span class="line">f.seek(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">print</span> f.tell()</span><br><span class="line"><span class="keyword">print</span> f.read(<span class="number">1</span>)</span><br><span class="line"><span class="keyword">print</span> f.tell()</span><br></pre></td></tr></table></figure><hr><h2 id="sys-module’s-standard-IO-monitor-object"><a href="#sys-module’s-standard-IO-monitor-object" class="headerlink" title="sys module’s standard IO(monitor) object"></a>sys module’s standard IO(monitor) object</h2><ul><li>sys.stdout: standard Input and Output</li><li>sys.stderr: standard error Output</li><li>sys.stdin: standard Input</li></ul><h3 id="Saving-a-file-by-standard-output"><a href="#Saving-a-file-by-standard-output" class="headerlink" title="Saving a file by standard output"></a>Saving a file by standard output</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'t.txt'</span>,<span class="string">'w'</span>)</span><br><span class="line">stdout = sys.stdout <span class="comment"># saving standard output</span></span><br><span class="line">sys.stdout = f <span class="comment"># changing standard output to file object</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Sample output'</span></span><br><span class="line">pirnt <span class="string">'Good'</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">'Good'</span></span><br><span class="line">f.close()</span><br><span class="line">sys.stdout = stdout <span class="comment"># restoring standard output</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;File-IO&quot;&gt;&lt;a href=&quot;#File-IO&quot; class=&quot;headerlink&quot; title=&quot;File IO&quot;&gt;&lt;/a&gt;File IO&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;mode can be set as the Second parameter of &lt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>.gitignore, config파일 사용</title>
    <link href="http://bongbooski.github.io/2018/03/22/post15_gitignore+config-setting/"/>
    <id>http://bongbooski.github.io/2018/03/22/post15_gitignore+config-setting/</id>
    <published>2018-03-22T06:09:17.000Z</published>
    <updated>2018-03-22T06:15:20.191Z</updated>
    
    <content type="html"><![CDATA[<h1 id="새노트북"><a href="#새노트북" class="headerlink" title="새노트북"></a>새노트북</h1><p>여러 프로젝트를 두 노트북에서 함께 진행할 예정인데 새 노트북에 기존 코드들을 넘겨와야함</p><p>데이터베이스 비밀번호 등 개인정보가 마음에 걸려서 설정파일로 빼보려고하니 일이 커짐</p><p><code>.gitignore</code>사용한 것과 <code>config</code>폴더, 파일 사용법 포스팅할 예정</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;새노트북&quot;&gt;&lt;a href=&quot;#새노트북&quot; class=&quot;headerlink&quot; title=&quot;새노트북&quot;&gt;&lt;/a&gt;새노트북&lt;/h1&gt;&lt;p&gt;여러 프로젝트를 두 노트북에서 함께 진행할 예정인데 새 노트북에 기존 코드들을 넘겨와야함&lt;/p&gt;
&lt;p&gt;데이터베이
      
    
    </summary>
    
    
      <category term="github" scheme="http://bongbooski.github.io/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://bongbooski.github.io/2018/03/22/hello-world/"/>
    <id>http://bongbooski.github.io/2018/03/22/hello-world/</id>
    <published>2018-03-22T06:09:16.793Z</published>
    <updated>2018-02-19T08:25:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
