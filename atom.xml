<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Booski&#39;s programming</title>
  
  <subtitle>A line of code, A piece of Beauty</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://bongbooski.github.io/"/>
  <updated>2018-08-23T14:13:35.474Z</updated>
  <id>http://bongbooski.github.io/</id>
  
  <author>
    <name>Booski</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Java bean</title>
    <link href="http://bongbooski.github.io/2018/08/23/post36-java-bean/"/>
    <id>http://bongbooski.github.io/2018/08/23/post36-java-bean/</id>
    <published>2018-08-23T13:49:20.000Z</published>
    <updated>2018-08-23T14:13:35.474Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Java-bean"><a href="#Java-bean" class="headerlink" title="Java bean"></a>Java bean</h1><ul><li>반복적인 작업을 효율적으로 하기 위해 사용</li><li><code>Java</code>의 데이터(속성)와 기능(메소드)으로 이루어진 클래스</li><li><code>JSP</code>페이지를 만들고, 액션태그를 이용해서 빈 사용, 내부 데이터 처리</li></ul><h2 id="빈-관련-액션-태그-useBean-setProperty-getProperty"><a href="#빈-관련-액션-태그-useBean-setProperty-getProperty" class="headerlink" title="빈 관련 액션 태그(useBean, setProperty,getProperty)"></a>빈 관련 액션 태그(<code>useBean</code>, <code>setProperty</code>,<code>getProperty</code>)</h2><ul><li>액션 태그 중에서 <code>bean</code>과 관련한 태그들</li><li>주로 데이터 업데이트하고 얻어오는 역할</li></ul><hr><h3 id="useBean"><a href="#useBean" class="headerlink" title="useBean"></a><code>useBean</code></h3><ul><li>특정 <code>bean</code>을 사용한다고 명시할 때 사용<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:useBean id=<span class="string">"student"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"com.javalec.ex.Student"</span> scope=<span class="string">"page"</span> /&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &lt;jsp:useBean id="빈 이름" class="클래스 이름" scope="스코프 범위" /&gt;</span></span><br></pre></td></tr></table></figure></li></ul><ul><li>scope<ul><li><code>page</code> : 생성된 페이지 내에서만 사용 가능</li><li><code>request</code> : 요청된 페이지 내에서만 사용 가능</li><li><code>session</code> : 웹브라우저의 생명주기와 동일하게 사용 가능</li><li><code>application</code> : 웹애플리케이션의 생명주기와 동일하게 사용 가능</li></ul></li></ul><hr><h3 id="setProperty"><a href="#setProperty" class="headerlink" title="setProperty"></a><code>setProperty</code></h3><ul><li>데이터 값을 설정할 때 사용<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:setProperty name=<span class="string">"student"</span> property=<span class="string">"name"</span> value=<span class="string">"홍길동"</span> /&gt;</span><br><span class="line"><span class="comment">// &lt;jsp:setProperty name="빈 이름" property="속성이름" value="속성(데이터)값" /&gt;</span></span><br></pre></td></tr></table></figure></li></ul><hr><h3 id="getProperty"><a href="#getProperty" class="headerlink" title="getProperty"></a><code>getProperty</code></h3><ul><li>데이터 값을 가져올 때 사용<figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:getProperty name=<span class="string">"student"</span> property=<span class="string">"name /&gt;</span></span><br><span class="line"><span class="string">// &lt;jsp:setProperty name="</span>빈 이름<span class="string">" property="</span>속성이름<span class="string">" /&gt;</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Java-bean&quot;&gt;&lt;a href=&quot;#Java-bean&quot; class=&quot;headerlink&quot; title=&quot;Java bean&quot;&gt;&lt;/a&gt;Java bean&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;반복적인 작업을 효율적으로 하기 위해 사용&lt;/li&gt;
&lt;li&gt;&lt;co
      
    
    </summary>
    
    
      <category term="JSP" scheme="http://bongbooski.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>Exception</title>
    <link href="http://bongbooski.github.io/2018/08/20/post35-exception/"/>
    <id>http://bongbooski.github.io/2018/08/20/post35-exception/</id>
    <published>2018-08-20T12:45:20.000Z</published>
    <updated>2018-08-20T13:03:29.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h1><ol><li><p>페이지 지시자 이용</p><ul><li><p>예외 발생</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page errorPage=<span class="string">"errorPage.jsp"</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">40</span>/<span class="number">0</span>;</span><br><span class="line">%?</span><br></pre></td></tr></table></figure></li><li><p>예외 페이지</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//반드시 true로 명시해야함</span></span><br><span class="line"><span class="comment">//명시해야 exception객체 사용가능</span></span><br><span class="line">&lt;%@ page isErrorPage=<span class="string">"true"</span>%&gt;</span><br><span class="line">&lt;% response.setStatus(<span class="number">200</span>); %&gt;</span><br><span class="line"></span><br><span class="line">&lt;%= exception.getMessage() %&gt;</span><br></pre></td></tr></table></figure></li></ul><hr></li><li><p><code>Web.xml</code>파일 이용</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error404.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">error-code</span>&gt;</span>500<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error500.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Exception&quot;&gt;&lt;a href=&quot;#Exception&quot; class=&quot;headerlink&quot; title=&quot;Exception&quot;&gt;&lt;/a&gt;Exception&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;페이지 지시자 이용&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;예외 발생&lt;
      
    
    </summary>
    
    
      <category term="JSP" scheme="http://bongbooski.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>Session</title>
    <link href="http://bongbooski.github.io/2018/08/16/post34-Session/"/>
    <id>http://bongbooski.github.io/2018/08/16/post34-Session/</id>
    <published>2018-08-16T12:45:20.000Z</published>
    <updated>2018-08-16T13:29:02.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h1><ul><li><code>Cookie</code>처럼 웹브라우저와의 관계를 유지하기 위한 수단</li><li><strong>서버상의 객체로 존재</strong>   <em>Cf)<code>Cookie</code>는 클라이언트의 특정 위치에 저장</em></li><li>따라서 <code>Session</code>은 서버에서만 접근 가능하여 보안이 좋고, 저장할 수 있는 데이터의 한계가 없음</li></ul><ol><li>클라이언트 요청 - 웹브라우저</li><li><code>Session</code> 자동 생성</li><li><code>Session</code> 속성 설정 - <code>session</code>내부 객체의 메소드 이용</li></ol><ul><li>각 브라우저마다 세션 생성됨</li></ul><hr><h2 id="Session-관련-메소드"><a href="#Session-관련-메소드" class="headerlink" title="Session 관련 메소드"></a>Session 관련 메소드</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">setAttribute() - 세션에 데이터 저장</span><br><span class="line">getAttribute() - 세션에서 데이터 획득</span><br><span class="line">getAttributeNames() - 세셔넹 저장되어 있는 모든 데이터의 이름(유니크한 키값)을 획득</span><br><span class="line">getId() - 자동 생성된 세션의 유니크한 아이디 획득</span><br><span class="line">isNew() - 세션이 최초 생성되었는지, 이전에 생성된 세션인지 구분</span><br><span class="line">getMaxInactiveInterval() - 세션의 유효시간 획득, 가장 최근 요청시점을 기준으로 카운트</span><br><span class="line">removeAttribute() - 세션에서 특정 데이터 제거</span><br><span class="line">inValidate() - 세션의 모든 데이터를 삭제</span><br></pre></td></tr></table></figure><hr><h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><ul><li><p>sessionInit.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">  session.setAttribute(<span class="string">"mySessionName"</span>,<span class="string">"mySessionData"</span>);</span><br><span class="line">  sessoin.setAttribute(<span class="string">"myNum"</span>,<span class="number">12345</span>);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href="sessionGet.jsp"&gt;session get&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li><p>sessoinGet.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">  Object obj1 = session.getAttribute(<span class="string">"mySessionName"</span>); <span class="comment">// 이때 반환 값은 무조건 Object형임***</span></span><br><span class="line">  String mySessionName = (String)obj1;</span><br><span class="line">  out.println(mySessionName + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line"></span><br><span class="line">  Object obj2 = session.getAttribute(<span class="string">"myNum"</span>);</span><br><span class="line">  Integer myNum = (Integer)obj2;</span><br><span class="line">  out.println(myNum + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line"></span><br><span class="line">  out.println(<span class="string">"****************************** &lt;br/&gt;"</span>);</span><br><span class="line"></span><br><span class="line">  String sName;</span><br><span class="line">  String sValue;</span><br><span class="line">  Enumeration enumeration = session.getAttributeNames(); <span class="comment">// 모든 세션 값들 가져옴</span></span><br><span class="line">  <span class="keyword">while</span>(enumeration.hasMoreElements())&#123;</span><br><span class="line">    sName = enumeration.nextElement().toString();</span><br><span class="line">    sValue = session.getAttribute(sName).toString();</span><br><span class="line"></span><br><span class="line">    out.println(<span class="string">"sName: "</span> + sName + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">    out.println(<span class="string">"sValue: "</span> + sValue + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  out.println(<span class="string">"****************************** &lt;br/&gt;"</span>);</span><br><span class="line"></span><br><span class="line">  String sessionId = session.getId(); <span class="comment">//세션 아이디 획득</span></span><br><span class="line">  out.pringln(<span class="string">"sessionId: "</span> + sessionId);</span><br><span class="line">  <span class="keyword">int</span> sessionInter = session.getMaxInactiveInterval();</span><br><span class="line">  out.pringln(<span class="string">"sessionInter: "</span> + sessionInter);</span><br><span class="line"></span><br><span class="line">  out.println(<span class="string">"****************************** &lt;br/&gt;"</span>);</span><br><span class="line"></span><br><span class="line">  session.removeAttribute(<span class="string">"mySessionData"</span>); <span class="comment">//특정 데이터를 삭제</span></span><br><span class="line">  Enumeration enumeration1 = session.getAttributeNames();</span><br><span class="line">  <span class="keyword">while</span>(enumeration1.hasMoreElements())&#123;</span><br><span class="line">    sName = enumeration1.nextElement().toString();</span><br><span class="line">    sValue = session.getAttribute(sName).toString();</span><br><span class="line"></span><br><span class="line">    out.println(<span class="string">"sName: "</span> + sName + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">    out.println(<span class="string">"sValue: "</span> + sValue + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  out.println(<span class="string">"****************************** &lt;br/&gt;"</span>);</span><br><span class="line"></span><br><span class="line">  session.inValidate(); <span class="comment">//세션 자체를 삭제</span></span><br><span class="line">  <span class="keyword">if</span>(request.isRequestedSessionIdValid())&#123;</span><br><span class="line">    out.println(<span class="string">"session valid"</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    out.println(<span class="string">"session invalid"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Session&quot;&gt;&lt;a href=&quot;#Session&quot; class=&quot;headerlink&quot; title=&quot;Session&quot;&gt;&lt;/a&gt;Session&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Cookie&lt;/code&gt;처럼 웹브라우저와의 관계를 유지하기 위한 수단
      
    
    </summary>
    
    
      <category term="JSP" scheme="http://bongbooski.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>Cookie</title>
    <link href="http://bongbooski.github.io/2018/08/15/post33-Cookie/"/>
    <id>http://bongbooski.github.io/2018/08/15/post33-Cookie/</id>
    <published>2018-08-15T13:03:20.000Z</published>
    <updated>2018-08-15T13:32:51.075Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h1><ul><li><code>http</code>프로토콜은 웹브라우저에게 응답 후 연결을 끊음</li><li><code>cookie</code>연결이 끊겼을 때 어떤 정보를 지속적으로 유지하기 위한 수단</li><li>서버에 생성하여 서버가 아닌 클라이언트측에 특정 정보를 저장함</li><li>서버에 요청할 때 마다 쿠키의 속성값을 참조, 변경 할 수 있음</li><li>4kb로 용량이 제한적이며, 300개까지 데이터 정보를 가질 수 있음</li></ul><h1 id="Grammar"><a href="#Grammar" class="headerlink" title="Grammar"></a>Grammar</h1><ol><li>쿠키 생성 - 쿠키 클래스 이용</li><li>속성 설정 - <code>setter</code>이용</li><li><code>response</code>객체에 쿠키 탑재 - <code>response.addCookie()</code> 이용</li></ol><h1 id="Method"><a href="#Method" class="headerlink" title="Method"></a>Method</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">setMaxAge() - 쿠키 유효시간 설정</span><br><span class="line">setPath() - 쿠키사용의 유효 디렉토리 설정</span><br><span class="line">setValue() - 쿠키의 값을 설정</span><br><span class="line">setVersion() - 쿠키 버전 설정</span><br><span class="line"></span><br><span class="line">getMaxAge() - 쿠키 유효기간 정보 획득</span><br><span class="line">getName() - 쿠키 이름 획득</span><br><span class="line">getPath() - 쿠키사용의 유효 디렉토리 정보 획득</span><br><span class="line">getValue() - 쿠키의 값 획득</span><br><span class="line">getVersion() - 쿠키 버전 정보 획득</span><br></pre></td></tr></table></figure><hr><h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><ul><li><p>cookieSet.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">  Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"cookieName"</span>,<span class="string">"cookieValue"</span>);</span><br><span class="line">  cookie.setMaxAge(<span class="number">60</span>*<span class="number">60</span>); <span class="comment">//1시간</span></span><br><span class="line">  response.addCookie(cookie);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href = "cookieGet.jsp"&gt;cookie get&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li><p>cookieGet.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">  Cookie[] cookies = request.getCookies(); <span class="comment">//쿠키 전부 배열로 가져옴</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cookies.length;i++)&#123;</span><br><span class="line">    <span class="comment">// 각 쿠키를 돌면서 정보 확인</span></span><br><span class="line">    String str = cookies[i].getName();</span><br><span class="line">    <span class="keyword">if</span>(str.equals(<span class="string">"cookieName"</span>))&#123;</span><br><span class="line">      out.println(<span class="string">"cookies["</span>+i+<span class="string">"] name: "</span> + cookies[i].getName() + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">      out.println(<span class="string">"cookies["</span>+i+<span class="string">"] value: "</span> + cookies[i].getValue() + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">      out.println(<span class="string">"===================&lt;br/&gt;"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href="cookieDel.jsp"&gt;cookie delete&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li><p>cookieDel.jsp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">  Cookie[] cookies = request.getCookies();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cookies.length;i++)&#123;</span><br><span class="line">    String str = cookies[i].getName();</span><br><span class="line">    <span class="keyword">if</span>(str.equals(<span class="string">"cookieName"</span>))&#123;</span><br><span class="line">      out.println(<span class="string">"cookies["</span>+i+<span class="string">"] name: "</span> + cookies[i].getName() + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">      out.println(<span class="string">"cookies["</span>+i+<span class="string">"] value: "</span> + cookies[i].getValue() + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line"></span><br><span class="line">      cookies[i].setMaxAge(<span class="number">0</span>); <span class="comment">// 유효시간 0초로 해서 삭제</span></span><br><span class="line">      response.addCookie(cookies[i]); <span class="comment">// 속성 변경 후 다시 탑재해서 이어나감</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;a href="cookieTest.jsp"&gt;cookie Test&lt;/a&gt;</span><br></pre></td></tr></table></figure></li><li><p>cookieTest.jsp</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">  Cookie[] cookies = request.getCookies();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(cookies != <span class="keyword">null</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cookies.length;i++)&#123;</span><br><span class="line">      out.println(<span class="string">"cookies["</span>+i+<span class="string">"] name: "</span> + cookies[i].getName() + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">      out.println(<span class="string">"cookies["</span>+i+<span class="string">"] value: "</span> + cookies[i].getValue() + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure></li></ul><p><em><strong>속성 변경시 <code>response</code>객체에 꼭 다시 넣어줘야함</strong></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Cookie&quot;&gt;&lt;a href=&quot;#Cookie&quot; class=&quot;headerlink&quot; title=&quot;Cookie&quot;&gt;&lt;/a&gt;Cookie&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;http&lt;/code&gt;프로토콜은 웹브라우저에게 응답 후 연결을 끊음&lt;/li&gt;

      
    
    </summary>
    
    
      <category term="JSP" scheme="http://bongbooski.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>JSP action tag</title>
    <link href="http://bongbooski.github.io/2018/08/13/post32-jsp%20actionTag/"/>
    <id>http://bongbooski.github.io/2018/08/13/post32-jsp actionTag/</id>
    <published>2018-08-13T13:22:20.000Z</published>
    <updated>2018-08-13T13:31:32.428Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Action-tag"><a href="#Action-tag" class="headerlink" title="Action tag"></a>Action tag</h1><ul><li>jsp페이지에서 어떤 동작을 하도록 지시하는 태그</li><li>forward, include, param Tag</li></ul><hr><h2 id="forward-Tag"><a href="#forward-Tag" class="headerlink" title="forward Tag"></a>forward Tag</h2><ul><li><p>다른 특정 페이지로 전환할 때</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;main.jsp페이지 입니다.&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;jsp:forward page=<span class="string">"sub.jsp"</span> /&gt;</span><br></pre></td></tr></table></figure><p><code>main.jsp</code>는 잠깐 스쳐 지나가고 <code>sub.jsp</code>가 보임</p></li></ul><hr><h2 id="include-tag"><a href="#include-tag" class="headerlink" title="include tag"></a>include tag</h2><ul><li>현재 페이지에 다른 페이지 삽입할 때<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt;include1.jsp페이지 입니다.&lt;/h1&gt;</span><br><span class="line">&lt;jsp:include page=<span class="string">"include2.jsp"</span> flush=<span class="string">"true"</span> /&gt;</span><br><span class="line">&lt;h1&gt; 다시 include1.jsp페이지 입니다 &lt;/h1&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="param-Tag"><a href="#param-Tag" class="headerlink" title="param Tag"></a>param Tag</h2><ul><li><code>forward</code>, <code>include</code> 태그에 데이터 전달을 목적으로 사용</li><li>이름과 값으로 구성<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;jsp:forward page=<span class="string">"forward_param.jsp"</span> /&gt;</span><br><span class="line">  &lt;jsp:param name=<span class="string">"id"</span> value=<span class="string">"abcde"</span>/&gt;</span><br><span class="line">  &lt;jsp:param name=<span class="string">"pw"</span> value=<span class="string">"1234"</span>/&gt;</span><br><span class="line">&lt;/jsp:forward&gt;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Action-tag&quot;&gt;&lt;a href=&quot;#Action-tag&quot; class=&quot;headerlink&quot; title=&quot;Action tag&quot;&gt;&lt;/a&gt;Action tag&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;jsp페이지에서 어떤 동작을 하도록 지시하는 태그&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="JSP" scheme="http://bongbooski.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>JSP request, response object</title>
    <link href="http://bongbooski.github.io/2018/08/12/post31-jsp%20request,response/"/>
    <id>http://bongbooski.github.io/2018/08/12/post31-jsp request,response/</id>
    <published>2018-08-12T06:29:20.000Z</published>
    <updated>2018-08-12T06:49:00.686Z</updated>
    
    <content type="html"><![CDATA[<h1 id="request"><a href="#request" class="headerlink" title="request"></a>request</h1><ul><li>웹브라우저를 통해 서버에 어떤 정보를 요청하는 것을 <code>request</code>라고 함</li><li><p>이러한 요청 정보는 <code>request</code>객체가 관리</p><ul><li><p><code>Request</code> 객체 관련 메소드</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">getContextPath(): 웹애플리케이션의 컨텍스트 패스를 얻음</span><br><span class="line">getMethod(): get방식과 post방식을 구별할 수 있음</span><br><span class="line">getSession(): 세션 객체를 얻음</span><br><span class="line">getProtocol(): 해당 프로토콜을 얻음</span><br><span class="line">getRequestURL(): 요청 URL을 얻음</span><br><span class="line">getRequestURI(): 요청 URI를 얻음</span><br><span class="line">getQueryString(): 쿼리스트링을 얻음</span><br></pre></td></tr></table></figure></li><li><p><code>Parameter</code>메소드</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getParameter(String name): name에 해당하는 파라미터 값을 구함</span><br><span class="line">getParameterNames(): 모든 파라미터 이름을 구함</span><br><span class="line">getParameterValues(String name): name에 해당하는 파라미터값을 구함 - 스트링 배열로 값 받음</span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h1 id="response"><a href="#response" class="headerlink" title="response"></a>response</h1><ul><li>웹브라우저의 요청에 응답하는 것을 <code>response</code>라고 함</li><li>이러한 응답의 정보를 가지고 있는 객체를 <code>response</code>객체라고 함</li></ul><ul><li><code>response</code>객체 관련 메소드<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getCharacterEncoding(): 응답할 때 문서의 인코딩 형태를 구함</span><br><span class="line">addCookie(Cookie): 쿠키를 지정</span><br><span class="line">sendRedirect(URL): 지정한 URL로 이동</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;request&quot;&gt;&lt;a href=&quot;#request&quot; class=&quot;headerlink&quot; title=&quot;request&quot;&gt;&lt;/a&gt;request&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;웹브라우저를 통해 서버에 어떤 정보를 요청하는 것을 &lt;code&gt;request&lt;/
      
    
    </summary>
    
    
      <category term="JSP" scheme="http://bongbooski.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>JSP Scriptlet, declaration, expression, 지시자, comment</title>
    <link href="http://bongbooski.github.io/2018/08/12/post30-jsp%20expression/"/>
    <id>http://bongbooski.github.io/2018/08/12/post30-jsp expression/</id>
    <published>2018-08-12T05:48:20.000Z</published>
    <updated>2018-08-12T06:28:34.473Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Scriptlet-lt-java-코드-gt"><a href="#Scriptlet-lt-java-코드-gt" class="headerlink" title="Scriptlet - &lt;% java 코드 %&gt;"></a>Scriptlet - &lt;% java 코드 %&gt;</h2><ul><li>jsp페이지에서 java언어를 사용하기 위한 요소</li><li>거의 모든 java코드를 사용 가능<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;%</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">      i++;</span><br><span class="line">      out.println(<span class="string">"2 * "</span> + i + <span class="string">" = "</span> + ( <span class="number">2</span>*i ) + <span class="string">"&lt;br/&gt;"</span>);</span><br><span class="line">  %&gt;</span><br><span class="line"></span><br><span class="line">  ========== &lt;br /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;%</span><br><span class="line">    <span class="keyword">if</span>(i&gt;=<span class="number">9</span>) <span class="keyword">break</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">  %&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="declaration-lt-java-코드-gt"><a href="#declaration-lt-java-코드-gt" class="headerlink" title="declaration - &lt;%! java 코드 %&gt;"></a>declaration - &lt;%! java 코드 %&gt;</h2><ul><li>jsp페이지 내에서 사용되는 변수 또는 메소드를 선언할 때 사용</li><li>여기서 선언된 변수 및 메소드는 전역의 의미로 사용<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;%!</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    String str = <span class="string">"ABCDE"</span>;</span><br><span class="line">  %&gt;</span><br><span class="line">  &lt;%!</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">  %&gt;</span><br><span class="line"></span><br><span class="line">  &lt;%</span><br><span class="line">    out.println(<span class="string">"i = "</span> + i + <span class="string">"&lt;br /&gt;"</span>);</span><br><span class="line">    out.println(<span class="string">"str = "</span> + str + <span class="string">"&lt;br /&gt;"</span>);</span><br><span class="line">    out.println(<span class="string">"sum = "</span> + sum(<span class="number">1</span>,<span class="number">5</span>) + <span class="string">"&lt;br /&gt;"</span>);</span><br><span class="line">  %&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="expressions-lt-java-코드-gt"><a href="#expressions-lt-java-코드-gt" class="headerlink" title="expressions - &lt;%= java 코드 %&gt;"></a>expressions - &lt;%= java 코드 %&gt;</h2><ul><li>jsp페이지 내에서 사용되는 변수의 값 또는 메소드 호출 결과값을 출력하기 위해 사용</li><li>결과값은 <code>String</code>타입이며 <code>;</code>를 사용할 수 없음<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;%!</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">10</span>;</span><br><span class="line">    String str = <span class="string">"ABCDE"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">      <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">  %&gt;</span><br><span class="line"></span><br><span class="line">  &lt;%= i %&gt; &lt;br/&gt;</span><br><span class="line">  &lt;%= str %&gt; &lt;br/&gt;</span><br><span class="line">  &lt;%= sum(<span class="number">1</span>,<span class="number">5</span>) %&gt; &lt;br/&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="지시자"><a href="#지시자" class="headerlink" title="지시자"></a>지시자</h1><ul><li>jsp페이지의 전체적인 속성을 지정할 때 사용합니다.</li><li><p><code>page</code>,<code>include</code>,<code>taglib</code>가 있으며, <code>&lt;%@ 속성 %&gt;</code>형태로 사용</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">page : 해당 페이지의 전체적인 속성 지정</span><br><span class="line">include : 별도의 페이지를 현재 페이지에 삽입</span><br><span class="line">taglib : 태그라이브러리의 태그 사용</span><br></pre></td></tr></table></figure></li></ul><h2 id="page"><a href="#page" class="headerlink" title="page"></a>page</h2><ul><li>페이지 속성을 지정</li><li><p>주로 사용되는 언어 지정 및 <code>import</code>문을 많이 사용</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=EUC-KR"</span> pageEncoding=<span class="string">"EUC-KR"</span>%&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="include"><a href="#include" class="headerlink" title="include"></a>include</h2><ul><li>현재 페이지내에 다른 페이지를 삽입할 때 사용</li><li><p><code>file</code>속성을 이용</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1&gt; include.jsp페이지 입니다. &lt;/h1&gt;&lt;br /&gt;</span><br><span class="line">&lt;%@ include file = <span class="string">"include01.jsp"</span> %&gt;</span><br><span class="line">&lt;h1&gt; 다시 include.jsp 페이지 입니다. &lt;/h1&gt;&lt;br /&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="comment"><a href="#comment" class="headerlink" title="comment"></a>comment</h1><ul><li>html 주석 =&gt; <code>&lt;!-- comments --&gt;</code> 소스에서 보임</li><li>jsp 주석 =&gt; <code>&lt;%-- comments --&gt;</code> 컴파일 이후에 출력되므로 소스에서 안보임</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Scriptlet-lt-java-코드-gt&quot;&gt;&lt;a href=&quot;#Scriptlet-lt-java-코드-gt&quot; class=&quot;headerlink&quot; title=&quot;Scriptlet - &amp;lt;% java 코드 %&amp;gt;&quot;&gt;&lt;/a&gt;Scriptlet
      
    
    </summary>
    
    
      <category term="JSP" scheme="http://bongbooski.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>JSP tags, way to run, internal object</title>
    <link href="http://bongbooski.github.io/2018/08/12/post29-jsp%20tag/"/>
    <id>http://bongbooski.github.io/2018/08/12/post29-jsp tag/</id>
    <published>2018-08-12T04:26:20.000Z</published>
    <updated>2018-08-12T06:28:28.424Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JSP-tags"><a href="#JSP-tags" class="headerlink" title="JSP tags"></a>JSP tags</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@    %&gt; : 페이지 속성</span><br><span class="line">&lt;%-- --%&gt; : 주석</span><br><span class="line">&lt;%!    %&gt; : 변수, 메소드 선언</span><br><span class="line">&lt;%=    %&gt; : 결과값 출력</span><br><span class="line">&lt;%     %&gt; : Java 코드</span><br><span class="line">&lt;jsp:action&gt; &lt;jsp:action&gt; : 자바빈 연결</span><br></pre></td></tr></table></figure><hr><h2 id="JSP’s-way-to-run"><a href="#JSP’s-way-to-run" class="headerlink" title="JSP’s way to run"></a>JSP’s way to run</h2><ol><li>클라이언트가 웹브라우저로 <code>helloWorld.jsp</code>요청하면,<br>JSP컨테이너가 JSP파일을 Servlet파일(<code>.java</code>)로 변환 - <code>helloWorld_jsp.java</code></li><li>컴파일 된 후에 클래스 파일(<code>.class</code>)로 변환 - <code>helloWorld_jsp.class</code></li><li>클라이언트에게 <code>html</code>파일 형태로 응답</li></ol><hr><h2 id="internal-object"><a href="#internal-object" class="headerlink" title="internal object"></a>internal object</h2><ul><li>선언하지 않고 바로 사용가능한 객체<ul><li>입출력 객체: <code>request</code>, <code>response</code>, <code>out</code></li><li>서블릿 객체: <code>page</code>, <code>config</code></li><li>세션 객체: <code>session</code></li><li>예외 객체: <code>exception</code></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;JSP-tags&quot;&gt;&lt;a href=&quot;#JSP-tags&quot; class=&quot;headerlink&quot; title=&quot;JSP tags&quot;&gt;&lt;/a&gt;JSP tags&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
      <category term="JSP" scheme="http://bongbooski.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>ServletConfig, ServletContext, ServletContextListener</title>
    <link href="http://bongbooski.github.io/2018/08/12/post28-servlet05/"/>
    <id>http://bongbooski.github.io/2018/08/12/post28-servlet05/</id>
    <published>2018-08-12T03:26:20.000Z</published>
    <updated>2018-08-12T05:07:25.289Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ServletConfig"><a href="#ServletConfig" class="headerlink" title="ServletConfig"></a>ServletConfig</h2><ul><li>서블릿 초기화 파라미터</li><li>특정 서블릿 생성시 필요한 초기 데이터 세팅(특정 경로 및 아이디 정보 등)</li><li><p><code>web.xml</code>에 기술하고 <code>ServletConfig</code>클래스를 이용해서 접근(사용)함</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>InitParam<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.javalec.ex.InitParam<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>id<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>abcde<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>pw<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>1234<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>InitParam<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/IP<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">  <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">  response.getWriter().append(<span class="string">"Served at: "</span>).append(request.getContextPath());</span><br><span class="line">  String id = getInitParameter(<span class="string">"id"</span>);</span><br><span class="line">  String pw = getInitParameter(<span class="string">"pw"</span>);</span><br><span class="line">  System.out.println(<span class="string">"id2: "</span> + id);</span><br><span class="line">  System.out.println(<span class="string">"pw2: "</span> + pw);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>Servlet</code>파일에 직접 기술하는 방법도 있음</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(urlPatterns= &#123;<span class="string">"/IninP"</span>&#125;, initParams= &#123;<span class="meta">@WebInitParam</span>(name=<span class="string">"id"</span>,value=<span class="string">"aaaa"</span>),<span class="meta">@WebInitParam</span>(name=<span class="string">"pw"</span>,value=<span class="string">"bbbb"</span>)&#125;)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InitParam</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">     <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">response.getWriter().append(<span class="string">"Served at: "</span>).append(request.getContextPath());</span><br><span class="line">String id = getInitParameter(<span class="string">"id"</span>);</span><br><span class="line">String pw = getInitParameter(<span class="string">"pw"</span>);</span><br><span class="line">System.out.println(<span class="string">"id2: "</span> + id);</span><br><span class="line">System.out.println(<span class="string">"pw2: "</span> + pw);</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h2><ul><li>여러 <code>Servlet</code>에서 특정 데이터 공유</li><li><p><code>context parameter</code>를 이용해서 <code>web.xml</code>에 데이터 기술, <code>servlet</code>에서 공유하면서 사용</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>id<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>abc<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-name</span>&gt;</span>pw<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">param-value</span>&gt;</span>123213<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String id = getServletContext().getInitParameter(<span class="string">"id"</span>);</span><br><span class="line">String pw = getServletContext().getInitParameter(<span class="string">"pw"</span>);</span><br><span class="line">System.out.println(<span class="string">"id2: "</span> + id);</span><br><span class="line">System.out.println(<span class="string">"pw2: "</span> + pw);</span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="ServletContextListener"><a href="#ServletContextListener" class="headerlink" title="ServletContextListener"></a>ServletContextListener</h2><ul><li>웹애플리케이션의 생명주기 감시</li><li>리스터의 해당 메소드가 웹애플리케이션으 시작과 종료시 호출됨</li><li><code>contextInitialized()</code>, <code>ocntextDestroyed()</code></li><li><p>리스너 클래스를 따로 만들고(<code>ServletContextListener</code> 임플리먼트) -&gt; <code>web.xml</code>에 리스너 클래스 기술</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletL</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent arg0)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"contextDestroyed"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent arg0)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"contextInitialized"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.javalec.ex.ServletL<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>리스너 클래스에서 어노테이션으로 명시도 가능<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletL</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent arg0)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"contextDestroyed"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent arg0)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"contextInitialized"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;ServletConfig&quot;&gt;&lt;a href=&quot;#ServletConfig&quot; class=&quot;headerlink&quot; title=&quot;ServletConfig&quot;&gt;&lt;/a&gt;ServletConfig&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;서블릿 초기화 파라미터&lt;/li&gt;
&lt;l
      
    
    </summary>
    
    
      <category term="Servlet" scheme="http://bongbooski.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Servlet parameter, korean handling</title>
    <link href="http://bongbooski.github.io/2018/08/12/post27-servlet04/"/>
    <id>http://bongbooski.github.io/2018/08/12/post27-servlet04/</id>
    <published>2018-08-12T03:26:20.000Z</published>
    <updated>2018-08-12T04:05:09.528Z</updated>
    
    <content type="html"><![CDATA[<h2 id="parameter"><a href="#parameter" class="headerlink" title="parameter"></a>parameter</h2><ul><li><code>form</code>태그의 <code>submit</code>버튼을 클릭해서 데이터를 서버로 전송하면, 해당 <code>servlet</code>에서는 <code>HttpServletRequest</code>객체를 이용하여 <code>parameter</code>값을 얻을 수 있다</li><li><code>getParameter(name)</code> - <code>name</code>의 <code>value</code>값을 줌</li><li><code>getParameterValues(name)</code> - <code>name</code>의 값이 여러개 일때</li><li><code>getParameterNames()</code> - 해당 <code>form</code>태그의 하위 태그들 줌</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String id = request.getParameter(<span class="string">"id"</span>);</span><br><span class="line">String pw = request.getParameter(<span class="string">"pw"</span>);</span><br></pre></td></tr></table></figure><h2 id="korean-handling"><a href="#korean-handling" class="headerlink" title="korean handling"></a>korean handling</h2><ul><li><code>Tomcat</code>은 <code>ISO-8859-1</code>방식을 기본 문자 처리 방식으로 하기 때문에 별도의 인코딩이 없으면 한글이 깨져보임</li><li><code>Get</code>방식과 <code>Post</code>방식에 따라서 한글 인코딩 방법이 다름</li></ul><ul><li><p><code>Get</code>방식 -&gt; <code>&lt;server.xml&gt;</code>수정</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">URLEncoding</span>=<span class="string">"EUC-KR"</span> <span class="attr">port</span>=<span class="string">"8181"</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>Post</code>방식 -&gt; <code>request.setCharacterEncoding()</code> 메소드 이용</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">request.setCharacterEncoding(<span class="string">"EUC-KR"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;parameter&quot;&gt;&lt;a href=&quot;#parameter&quot; class=&quot;headerlink&quot; title=&quot;parameter&quot;&gt;&lt;/a&gt;parameter&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;form&lt;/code&gt;태그의 &lt;code&gt;submit&lt;/c
      
    
    </summary>
    
    
      <category term="Servlet" scheme="http://bongbooski.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Servlet&#39;s way to run</title>
    <link href="http://bongbooski.github.io/2018/08/11/post26-servlet03/"/>
    <id>http://bongbooski.github.io/2018/08/11/post26-servlet03/</id>
    <published>2018-08-11T08:24:20.000Z</published>
    <updated>2018-08-11T13:45:31.234Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Servlet작동-순서"><a href="#Servlet작동-순서" class="headerlink" title="Servlet작동 순서"></a><code>Servlet</code>작동 순서</h2><ul><li>클라이언트에서 <code>servlet</code>요청이 들어 오면 서버에서는 <code>servlet</code>컨테이너를 만들고, 요청이 있을 때마다 스레드 생성</li></ul><h2 id="Servlet-라이프-사이클"><a href="#Servlet-라이프-사이클" class="headerlink" title="Servlet 라이프 사이클"></a><code>Servlet</code> 라이프 사이클</h2><ul><li>응답속도가 높아서 사용도가 높음</li><li>최초 요청시 객체 생성 후 메모리에 로딩되고, 이후에는 기존 객체 재활용 -&gt; 속도 빠름</li></ul><ol><li><code>Servlet</code> 객체 생성 - 최초 한번</li><li><code>init()</code> 호출 - 최초 한번</li><li><code>service()</code>,<code>doGet</code>,<code>doPost()</code> 호출 - 요청시 매번</li><li><code>destroy()</code>호출 - 마지막 한번 (자원 해제)</li></ol><h2 id="Servlet-선처리-후처리"><a href="#Servlet-선처리-후처리" class="headerlink" title="Servlet 선처리, 후처리"></a><code>Servlet</code> 선처리, 후처리</h2><ul><li><p><code>Servlet</code>의 라이프 사이클 중 <code>init()</code>, <code>destroy()</code>에 선, 후처리 가능</p></li><li><p><code>@PostConstruct</code> - <code>Init()</code>호출</p></li><li><code>destroy()</code> - <code>@PreDestroy</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Servlet작동-순서&quot;&gt;&lt;a href=&quot;#Servlet작동-순서&quot; class=&quot;headerlink&quot; title=&quot;Servlet작동 순서&quot;&gt;&lt;/a&gt;&lt;code&gt;Servlet&lt;/code&gt;작동 순서&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;클라이언트에서 &lt;co
      
    
    </summary>
    
    
      <category term="Servlet" scheme="http://bongbooski.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Servlet start</title>
    <link href="http://bongbooski.github.io/2018/08/11/post25-servlet02/"/>
    <id>http://bongbooski.github.io/2018/08/11/post25-servlet02/</id>
    <published>2018-08-11T04:34:20.000Z</published>
    <updated>2018-08-11T05:05:57.818Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p><code>Servlet</code>클래스는 <code>HttpServlet</code>를 상속 받음</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/Hworld"</span>)   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Helloworld</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>요청처리객체 및 응답처리객체를 톰캣에서 받음</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">response.getWriter().append(<span class="string">"Served at: "</span>).append(request.getContextPath());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>get</code>방식, <code>post</code>방식 - <code>form</code>태그 <code>method</code>속성값</p><ul><li><code>doGet</code>호출 : URL값으로 정보가 전송되어 보안에 약함</li><li><code>doPost</code>호출 : <code>header</code>를 이용해 정보가 전송되어 보안에 강함</li></ul></li><li><p><code>doGet()</code></p><ul><li><code>html</code>내 <code>form</code>태그의 <code>method</code>속성이 <code>get</code>일 경우 호출</li><li>웹브라우저 주소창을 이용하여 <code>servlet</code>을 요청하면 호출</li></ul></li><li><p><code>doPost()</code></p><ul><li><code>html</code>내 <code>form</code>태그의 <code>method</code>속성이 <code>post</code>일 경우 호출</li></ul></li><li><p><code>Context Path</code></p><ul><li><code>WAS</code>(Web Application Server)에서 웹애플리케이션을 구분하기위한 Path</li><li>이클립스에서 프로젝트를 생성하면 자동으로 <code>server.xml</code>에 추가</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;Servlet&lt;/code&gt;클래스는 &lt;code&gt;HttpServlet&lt;/code&gt;를 상속 받음&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
    
      <category term="Servlet" scheme="http://bongbooski.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>Servlet</title>
    <link href="http://bongbooski.github.io/2018/08/11/post24-servlet01/"/>
    <id>http://bongbooski.github.io/2018/08/11/post24-servlet01/</id>
    <published>2018-08-11T03:38:20.000Z</published>
    <updated>2018-08-11T04:32:45.999Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Servlet특징"><a href="#Servlet특징" class="headerlink" title="Servlet특징"></a>Servlet특징</h1><ul><li>동적 웹애플리케이션 컴포넌트</li><li><code>.java</code>확장자</li><li>응답은 <code>html</code> 이용</li><li><code>java thread</code>이용하여 동작</li><li><code>MVC</code>패턴에서 <code>controller</code>로 이용됨</li></ul><h2 id="Mapping하는-방법"><a href="#Mapping하는-방법" class="headerlink" title="Mapping하는 방법"></a>Mapping하는 방법</h2><ol><li><p><code>.java</code> - <code>@WebServlet</code>으로 매핑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/Hworld"</span>)   &lt;-- 여기!</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Helloworld</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>web.xml</code> - <code>web.xml</code> 파일에 매핑 정보 추가</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;servlet&gt;</span><br><span class="line">  &lt;servlet-name&gt;helloworld&lt;/servlet-name&gt;</span><br><span class="line">  &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">com</span>.<span class="title">javalec</span>.<span class="title">ex</span>.<span class="title">Helloworld</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">helloworld</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">hw</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Servlet특징&quot;&gt;&lt;a href=&quot;#Servlet특징&quot; class=&quot;headerlink&quot; title=&quot;Servlet특징&quot;&gt;&lt;/a&gt;Servlet특징&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;동적 웹애플리케이션 컴포넌트&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.java
      
    
    </summary>
    
    
      <category term="Servlet" scheme="http://bongbooski.github.io/tags/Servlet/"/>
    
  </entry>
  
  <entry>
    <title>JSP</title>
    <link href="http://bongbooski.github.io/2018/08/09/post23-jsp1/"/>
    <id>http://bongbooski.github.io/2018/08/09/post23-jsp1/</id>
    <published>2018-08-09T12:19:20.000Z</published>
    <updated>2018-08-11T03:39:39.056Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JSP특징"><a href="#JSP특징" class="headerlink" title="JSP특징"></a>JSP특징</h1><ul><li>동적 웹애플리케이션 컴포넌트</li><li><code>.jsp</code>확장자</li><li>응답은 <code>html</code> 이용</li><li>서블릿으로 변환되어 실행</li><li><code>MVC</code>패턴에서 <code>view</code>로 이용됨</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JSP특징&quot;&gt;&lt;a href=&quot;#JSP특징&quot; class=&quot;headerlink&quot; title=&quot;JSP특징&quot;&gt;&lt;/a&gt;JSP특징&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;동적 웹애플리케이션 컴포넌트&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.jsp&lt;/code&gt;확장자&lt;/li&gt;
&lt;
      
    
    </summary>
    
    
      <category term="JSP" scheme="http://bongbooski.github.io/tags/JSP/"/>
    
  </entry>
  
  <entry>
    <title>python Exception Raise</title>
    <link href="http://bongbooski.github.io/2018/04/17/post22-python-exception-raise_eng/"/>
    <id>http://bongbooski.github.io/2018/04/17/post22-python-exception-raise_eng/</id>
    <published>2018-04-17T05:47:23.000Z</published>
    <updated>2018-04-17T13:45:09.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Exception-raise"><a href="#Exception-raise" class="headerlink" title="Exception raise"></a>Exception raise</h1><h2 id="Occuring-exception-by-raise"><a href="#Occuring-exception-by-raise" class="headerlink" title="Occuring exception by raise"></a>Occuring exception by <code>raise</code></h2><ul><li><code>raise</code>keyword can make an exception in specific situation</li><li><p><code>IndexError</code> occurs when <code>__getitem__</code>method(which implements indexing when sequance type class is made) goes out of the index range</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SquareSeq</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    self.n = n</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self,k)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> k &gt;= self.n <span class="keyword">or</span> k &lt; <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">raise</span> IndexError <span class="comment"># out of index range, IndexError occurs</span></span><br><span class="line">    <span class="keyword">return</span> k * k</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__len_</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.n</span><br><span class="line"></span><br><span class="line">s = SquareSeq(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">print</span> s[<span class="number">2</span>], s[<span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> s: <span class="comment"># repeating until IndexError occurs</span></span><br><span class="line">   <span class="keyword">print</span> x,</span><br><span class="line"><span class="keyword">print</span> s[<span class="number">20</span>] <span class="comment"># out of the index range</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="Customized-exception-class"><a href="#Customized-exception-class" class="headerlink" title="Customized exception class"></a>Customized exception class</h2><ul><li>Generally It is implemented by extending <code>Exception</code>class<br>(Other exceptions are unusual)</li><li>How to raise the exception<ul><li>Same to built-in exception. Using <code>raise [class instance]</code></li></ul></li><li>How to catch the exception from Customized exception class<ul><li>Using the class’ name like <code>except [class name]</code></li></ul></li><li><p>In the example below, <code>except Big</code> catches <code>Big</code>and <code>Small</code> exception<br>-&gt; Because <code>Small</code>is <code>Big</code>‘s sub-class’</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Big</span><span class="params">(Exception)</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Small</span><span class="params">(Big)</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dosomething1</span><span class="params">()</span>:</span></span><br><span class="line">  x = Big()</span><br><span class="line">  <span class="keyword">raise</span> x <span class="comment"># x is exception object, it can use raise</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dosomething2</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">raise</span> Small()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> (dosomething1, dosomething2):</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    f()</span><br><span class="line">  <span class="keyword">except</span> Big:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Exception occurs!"</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="Passing-exception"><a href="#Passing-exception" class="headerlink" title="Passing exception"></a>Passing exception</h2><ul><li><p>After <code>raise</code>keyword, with exception, additional message can follow</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">raise</span> Exception, <span class="string">'message!!!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  f()</span><br><span class="line"><span class="keyword">except</span> Exception, a:</span><br><span class="line">  <span class="keyword">print</span> a</span><br></pre></td></tr></table></figure></li><li><p>When <code>except</code> keyword is used, exception message in initializer can be taken as 2nd parameter.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">0</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">raise</span> ArithmeticError(<span class="string">'you are dividing by 0'</span>)</span><br><span class="line">    a/b</span><br><span class="line"><span class="keyword">except</span> ArithmeticError, v:</span><br><span class="line">  <span class="keyword">print</span> v</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Exception-raise&quot;&gt;&lt;a href=&quot;#Exception-raise&quot; class=&quot;headerlink&quot; title=&quot;Exception raise&quot;&gt;&lt;/a&gt;Exception raise&lt;/h1&gt;&lt;h2 id=&quot;Occuring-exce
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 예외 발생시키기</title>
    <link href="http://bongbooski.github.io/2018/04/17/post22-python-exception-raise/"/>
    <id>http://bongbooski.github.io/2018/04/17/post22-python-exception-raise/</id>
    <published>2018-04-17T05:47:23.000Z</published>
    <updated>2018-04-17T13:44:56.436Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Exception-raise"><a href="#Exception-raise" class="headerlink" title="Exception raise"></a>Exception raise</h1><h2 id="raise로-예외-발생하기"><a href="#raise로-예외-발생하기" class="headerlink" title="raise로 예외 발생하기"></a><code>raise</code>로 예외 발생하기</h2><ul><li>예외를 특정 상황 조건에서 <code>raise</code>키워드를 통해 발생시킬 수 있다.</li><li><p>아래 예는 시퀀스 형 클래스를 설계할 때 인덱싱을 구현하는 <code>__getitem__</code>메소드에서 인덱스가 범위를 넘을 때 <code>IndexError</code>를 발생시킨다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SquareSeq</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, n)</span>:</span></span><br><span class="line">    self.n = n</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self,k)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> k &gt;= self.n <span class="keyword">or</span> k &lt; <span class="number">0</span>:</span><br><span class="line">      <span class="keyword">raise</span> IndexError <span class="comment"># 인덱스 범위를 벗어나나면 IndexError발생</span></span><br><span class="line">    <span class="keyword">return</span> k * k</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__len_</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.n</span><br><span class="line"></span><br><span class="line">s = SquareSeq(<span class="number">10</span>)</span><br><span class="line"><span class="keyword">print</span> s[<span class="number">2</span>], s[<span class="number">4</span>]</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> s: <span class="comment"># IndexError가 발생하는 시점까지 반복</span></span><br><span class="line">   <span class="keyword">print</span> x,</span><br><span class="line"><span class="keyword">print</span> s[<span class="number">20</span>] <span class="comment"># 인덱스 범위를 넘음</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="사용자-정의-예외-클래스"><a href="#사용자-정의-예외-클래스" class="headerlink" title="사용자 정의 예외 클래스"></a>사용자 정의 예외 클래스</h2><ul><li>일반적으로 <code>Exception</code>클래스를 상속 받아 구현<br>(나머지 예외들은 일반적으로 나타나기 힘든 예외들이다)</li><li>예외 발생 방법<ul><li>내장 예외 발생 방법과 동일하게 <code>raise [클래스 인스턴스]</code>와 같이 해당 예외 클래스의 인스턴스를 던진다</li></ul></li><li>사용자 정의 예외를 잡는 방법<ul><li><code>except [클래스이름]</code>과 같이 해당 예외 클래스의 이름을 사용한다.</li></ul></li><li><p>아래 예에서 <code>except Big</code>이 잡는 예외는 <code>Big</code>과 <code>Small</code>이다<br>-&gt; <code>Small</code>은 <code>Big</code>의 하위 클래스 이기 때문</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Big</span><span class="params">(Exception)</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Small</span><span class="params">(Big)</span>:</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dosomething1</span><span class="params">()</span>:</span></span><br><span class="line">  x = Big()</span><br><span class="line">  <span class="keyword">raise</span> x <span class="comment"># x는 예외객체이므로 raise가능</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dosomething2</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">raise</span> Small()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> (dosomething1, dosomething2):</span><br><span class="line">  <span class="keyword">try</span>:</span><br><span class="line">    f()</span><br><span class="line">  <span class="keyword">except</span> Big:</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Exception occurs!"</span></span><br></pre></td></tr></table></figure></li></ul><hr><h2 id="예외값-전달하기"><a href="#예외값-전달하기" class="headerlink" title="예외값 전달하기"></a>예외값 전달하기</h2><ul><li><p><code>raise</code>키워드 뒤에 예외와 함께, 추가 메시지를 함께 던질 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">raise</span> Exception, <span class="string">'message!!!'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  f()</span><br><span class="line"><span class="keyword">except</span> Exception, a:</span><br><span class="line">  <span class="keyword">print</span> a</span><br></pre></td></tr></table></figure></li><li><p>생성자 안에 넣어준 에러 메시지는 <code>except</code>키워드 사용시에 두 번째 인자로 해당 메시지를 받을 수 있다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">0</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  <span class="keyword">if</span> b == <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">raise</span> ArithmeticError(<span class="string">'0으로 나누고 있습니다.'</span>)</span><br><span class="line">    a/b</span><br><span class="line"><span class="keyword">except</span> ArithmeticError, v:</span><br><span class="line">  <span class="keyword">print</span> v</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Exception-raise&quot;&gt;&lt;a href=&quot;#Exception-raise&quot; class=&quot;headerlink&quot; title=&quot;Exception raise&quot;&gt;&lt;/a&gt;Exception raise&lt;/h1&gt;&lt;h2 id=&quot;raise로-예외-발생하
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 예외처리</title>
    <link href="http://bongbooski.github.io/2018/04/17/post21-python-exception-handling/"/>
    <id>http://bongbooski.github.io/2018/04/17/post21-python-exception-handling/</id>
    <published>2018-04-17T00:47:23.000Z</published>
    <updated>2018-04-17T13:45:45.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Exception-Handling"><a href="#Exception-Handling" class="headerlink" title="Exception Handling"></a>Exception Handling</h1><ul><li><p>구문 에러(Syntax Error)</p><ul><li>문법적 에러</li><li>IDE에서는 구문에러 체크해줌</li><li>파이썬은 상대적으로 문법이 간단해서 에러 발생 비율이 낮거나 다른 도구로 제거 가능</li></ul></li><li><p>예외(Exception)</p><ul><li>구문 에러는 없으나 프로그램 실행 중 더 이상 진행할 수 없는 경우</li><li>예외가 발생하면 프로그램이 종료됨</li></ul><ol><li><p><code>NameError</code> (정의되지 않은 변수 사용)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> + boo*<span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p><code>ZeroDivisionError</code> (<code>0</code>으로 나누는 경우)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">0</span></span><br><span class="line">c = a / b</span><br></pre></td></tr></table></figure></li><li><p><code>TypeError</code> (ex: 문자열 + 수치형 자료)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'2'</span> + <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p><code>IndexError</code> (참조 범위를 넘어서 인덱스 사용)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l = [<span class="number">1</span>,<span class="number">2</span>]</span><br><span class="line"><span class="keyword">print</span> l[<span class="number">2</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>KeyError</code> (등록되지 않은 키로 사전 검색)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">"a"</span>:<span class="number">1</span>, <span class="string">"b"</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">print</span> d[<span class="string">'c'</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>IOError</code> (존재하지 않는 파일을 열고자 할 때)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = open(<span class="string">'aaa.txt'</span>)</span><br></pre></td></tr></table></figure></li></ol><hr></li></ul><h1 id="예외-처리-방법"><a href="#예외-처리-방법" class="headerlink" title="예외 처리 방법"></a>예외 처리 방법</h1><ol><li><p><code>try</code>,<code>except</code>,<code>else</code>,<code>finally</code>절 사용하기</p><ul><li>예외가 발생할 만한 상황을 예상하여 상황별로 전체 코드 흐름을 제어할 수 있다</li><li><p><code>try</code>,<code>except</code>,<code>else</code>,<code>finally</code>절</p><ul><li>구조<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  (예외 발생 가능한) 일반적인 수행문들</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">  예외가 발생하였을 때 수행되는 문들</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  예외가 발생하지 않았을 때 수행되는 문들</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">  예외 발생 유무와 관계없이 무조건 수행되는 문들</span><br></pre></td></tr></table></figure></li></ul><hr></li></ul></li></ol><ul><li><p>예외 처리를 하면 예외 발생시 프로그램이 종료되지 않는다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  <span class="keyword">print</span> <span class="number">1.0</span>/a</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'zero division error!!!'</span></span><br></pre></td></tr></table></figure></li><li><p><code>msg</code>변수: <code>ZeroDivisionError</code>를 정의한 사람이 발생될 때 주는 메시지<br>ex: float division by zero</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      <span class="keyword">print</span> <span class="number">10.0</span> / n</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError, msg</span><br><span class="line">      <span class="keyword">print</span> msg</span><br><span class="line"></span><br><span class="line">division()</span><br></pre></td></tr></table></figure></li><li><p><code>try</code>절 안에서 간접적으로 호출한 함수의 내부 예외도 처리 가능</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  spam()</span><br><span class="line"><span class="keyword">except</span> NameError, msg:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'Error -'</span>, msg</span><br></pre></td></tr></table></figure><p><code>,</code>대신 <code>as</code>로도 사용가능</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 위와 동일한 예제</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  spam()</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> msg:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'Error -'</span>, msg</span><br></pre></td></tr></table></figure></li><li><p><code>except</code>뒤에 예외를 명시하지 않으면 모든 예외에 대해 처리됨</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  spam()</span><br><span class="line">  <span class="keyword">print</span> <span class="number">1.0</span>/<span class="number">0.0</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'Error'</span></span><br></pre></td></tr></table></figure></li><li><p>여러 예외들 각각에 대해 <code>except</code>절로 다중처리 가능</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="number">0.0</span></span><br><span class="line">name = <span class="string">'aaa.txt'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  <span class="keyword">print</span> <span class="number">1.0</span> / b</span><br><span class="line">  spam()</span><br><span class="line">  f = open(name, <span class="string">'r'</span>)</span><br><span class="line">  <span class="string">'2'</span> + <span class="number">2</span></span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'NameError !!!'</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'ZeroDivisionError !!!'</span></span><br><span class="line">excpet (TypeError, IOError):</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'TypeError or IOERror !!!'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'No Exception'</span></span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">'Exit !!!'</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="같은-부류의-예외-다-잡아내기"><a href="#같은-부류의-예외-다-잡아내기" class="headerlink" title="같은 부류의 예외 다 잡아내기"></a>같은 부류의 예외 다 잡아내기</h1><ul><li>예외 클래스의 상속에 의한 계층 관계를 이용하여 여러 예외들을 한꺼번에 잡을 수 있다.</li><li><p>예를 들어, <code>ArithmeticError</code>의 하위 클래스로서 <code>FloatingPointError</code>, <code>OverflowError</code>, <code>ZeroDivisionError</code>가 존재하기 때문에 이들 하위 클래스 예외가 발생하면 <code>ArithmeticError</code>로 처리할 수 있다.</p></li><li><p>예외가 임의의 <code>except</code>에서 잡히면 다른 <code>except</code>에서는 잡히지 않는다.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dosomething</span><span class="params">()</span>:</span></span><br><span class="line">  a = <span class="number">1</span>/<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  dosomething()</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">"ZeroDivisionError occured"</span></span><br><span class="line"><span class="keyword">except</span> ArithmeticError:</span><br><span class="line">   <span class="keyword">print</span> <span class="string">"ArithmeticError occured"</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Exception-Handling&quot;&gt;&lt;a href=&quot;#Exception-Handling&quot; class=&quot;headerlink&quot; title=&quot;Exception Handling&quot;&gt;&lt;/a&gt;Exception Handling&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python Exception Handling</title>
    <link href="http://bongbooski.github.io/2018/04/17/post21-python-exception-handling_eng/"/>
    <id>http://bongbooski.github.io/2018/04/17/post21-python-exception-handling_eng/</id>
    <published>2018-04-17T00:47:23.000Z</published>
    <updated>2018-04-17T13:46:10.336Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Exception-Handling"><a href="#Exception-Handling" class="headerlink" title="Exception Handling"></a>Exception Handling</h1><ul><li><p>Syntax Error</p><ul><li>Grammatical error</li><li>IDE checks syntax error automatically</li><li>Becasue python’s grammar is simpler relatively, error occur rate is smaller and it is easy to delete errors</li></ul></li><li><p>Exception</p><ul><li>the cases having no syntax errors, the program can’t progress</li><li>Occuring exception, the program ends</li></ul><ol><li><p><code>NameError</code> (Usiung undefined variable)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> + boo*<span class="number">3</span></span><br></pre></td></tr></table></figure></li><li><p><code>ZeroDivisionError</code> (Dividing by <code>0</code>)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span></span><br><span class="line">b = <span class="number">0</span></span><br><span class="line">c = a / b</span><br></pre></td></tr></table></figure></li><li><p><code>TypeError</code> (ex: String + Number type)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'2'</span> + <span class="number">2</span></span><br></pre></td></tr></table></figure></li><li><p><code>IndexError</code> (Using index over the range of index)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">l = [1,2]</span><br><span class="line">print l[2]</span><br></pre></td></tr></table></figure></li><li><p><code>KeyError</code> (Searching dictionary by unregisted key)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d = &#123;<span class="string">"a"</span>:<span class="number">1</span>, <span class="string">"b"</span>:<span class="number">2</span>&#125;</span><br><span class="line"><span class="keyword">print</span> d[<span class="string">'c'</span>]</span><br></pre></td></tr></table></figure></li><li><p><code>IOError</code> (Opening not existing file)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = open(<span class="string">'aaa.txt'</span>)</span><br></pre></td></tr></table></figure></li></ol><hr></li></ul><h1 id="How-to-dispose-of-exceptions"><a href="#How-to-dispose-of-exceptions" class="headerlink" title="How to dispose of exceptions"></a>How to dispose of exceptions</h1><ol><li><p>Using <code>try</code>,<code>except</code>,<code>else</code>,<code>finally</code> statements</p><ul><li>By expecting the situations making exceptions, we can control the whole code’s flow</li><li><p><code>try</code>,<code>except</code>,<code>else</code>,<code>finally</code></p><ul><li>structure<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  (possible to make errors) usual statements</span><br><span class="line"><span class="keyword">except</span> Exception:</span><br><span class="line">  the statements working when error occurs</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  the statements working when error doesn<span class="string">'t occur</span></span><br><span class="line"><span class="string">finally:</span></span><br><span class="line"><span class="string">  the statements working anyway no matter error</span></span><br></pre></td></tr></table></figure></li></ul><hr></li></ul></li></ol><ul><li><p>Doing exception handling, when error occurs the program doesn’t stop</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">0</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  <span class="keyword">print</span> <span class="number">1.0</span>/a</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'zero division error!!!'</span></span><br></pre></td></tr></table></figure></li><li><p><code>msg</code>variable: the message that the person who defined <code>ZeroDivisionError</code> gives<br>ex: float division by zero</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">division</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">for</span> n <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">5</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      <span class="keyword">print</span> <span class="number">10.0</span> / n</span><br><span class="line">    <span class="keyword">except</span> ZeroDivisionError, msg</span><br><span class="line">      <span class="keyword">print</span> msg</span><br><span class="line"></span><br><span class="line">division()</span><br></pre></td></tr></table></figure></li><li><p>It can handle the error from the called function in <code>try</code>statement indirectly</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  spam()</span><br><span class="line"><span class="keyword">except</span> NameError, msg:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'Error -'</span>, msg</span><br></pre></td></tr></table></figure><p><code>,</code> can be replaced with <code>as</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># same code with upper one</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  spam()</span><br><span class="line"><span class="keyword">except</span> NameError <span class="keyword">as</span> msg:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'Error -'</span>, msg</span><br></pre></td></tr></table></figure></li><li><p>After <code>except</code>, not evincing any exceptions, it takes care of all exceptions</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  spam()</span><br><span class="line">  <span class="keyword">print</span> <span class="number">1.0</span>/<span class="number">0.0</span></span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'Error'</span></span><br></pre></td></tr></table></figure></li><li><p>About many exceptions, they can be taked care by each <code>except</code>statement</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="number">0.0</span></span><br><span class="line">name = <span class="string">'aaa.txt'</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  <span class="keyword">print</span> <span class="number">1.0</span> / b</span><br><span class="line">  spam()</span><br><span class="line">  f = open(name, <span class="string">'r'</span>)</span><br><span class="line">  <span class="string">'2'</span> + <span class="number">2</span></span><br><span class="line"><span class="keyword">except</span> NameError:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'NameError !!!'</span></span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'ZeroDivisionError !!!'</span></span><br><span class="line">excpet (TypeError, IOError):</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'TypeError or IOERror !!!'</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">'No Exception'</span></span><br><span class="line"><span class="keyword">finally</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">'Exit !!!'</span></span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="Catching-All-exception-in-same-kind"><a href="#Catching-All-exception-in-same-kind" class="headerlink" title="Catching All exception in same kind"></a>Catching All exception in same kind</h1><ul><li>By using the hierarchy of Inheritance of exception class, It can take care of many exceptions by once</li><li><p>For example, there are <code>FloatingPointError</code>, <code>OverflowError</code>, <code>ZeroDivisionError</code> as sub-class of <code>ArithmeticError</code> so, about sub-class exceptions, <code>ArithmeticError</code> can take care of them</p></li><li><p>When an exception is catched by specific <code>except</code>, that one is not catched in other <code>except</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dosomething</span><span class="params">()</span>:</span></span><br><span class="line">  a = <span class="number">1</span>/<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">  dosomething()</span><br><span class="line"><span class="keyword">except</span> ZeroDivisionError:</span><br><span class="line">  <span class="keyword">print</span> <span class="string">"ZeroDivisionError occured"</span></span><br><span class="line"><span class="keyword">except</span> ArithmeticError:</span><br><span class="line">   <span class="keyword">print</span> <span class="string">"ArithmeticError occured"</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Exception-Handling&quot;&gt;&lt;a href=&quot;#Exception-Handling&quot; class=&quot;headerlink&quot; title=&quot;Exception Handling&quot;&gt;&lt;/a&gt;Exception Handling&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python Package</title>
    <link href="http://bongbooski.github.io/2018/04/15/post20-python-package_eng/"/>
    <id>http://bongbooski.github.io/2018/04/15/post20-python-package_eng/</id>
    <published>2018-04-15T06:48:23.000Z</published>
    <updated>2018-04-17T13:44:32.768Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Package"><a href="#Package" class="headerlink" title="Package"></a>Package</h1><ul><li>Structure gathering many modules in one directory physically<ul><li>Top directory’s name is the package’s name</li><li>Sub directories under the Top directory become sub-package of the top package</li><li>Module = file, package = directory</li></ul></li></ul><hr><h2 id="Role-of-init-py"><a href="#Role-of-init-py" class="headerlink" title="Role of __init__.py"></a>Role of <code>__init__.py</code></h2><ul><li>The role recognizing the directory as a package</li><li>For sub-packes, this file is requried(if not, that will be usual folder)</li></ul><hr><h2 id="Doing-import"><a href="#Doing-import" class="headerlink" title="Doing import"></a>Doing import</h2>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Speech</span><br></pre></td></tr></table></figure><ul><li><code>Speech</code>directory should be one of the directories of <code>sys.path</code>(or <code>PYTHONPATH</code> environment variable)</li><li>Let’s say <code>Speech/Recognition/HMM.py</code> looks like this<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">"Train"</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadModel</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">"LoadModel"</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveModel</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">"SaveModel"</span></span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="How-to-use-specific-function"><a href="#How-to-use-specific-function" class="headerlink" title="How to use specific function"></a>How to use specific function</h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># can't use. from package's name, we need dot(.) for calling the module or function</span></span><br><span class="line"><span class="keyword">import</span> Speech</span><br><span class="line">Speech.Recognition.HMM.train()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Proper way</span></span><br><span class="line"><span class="keyword">import</span> Speech.Recognition.HMM</span><br><span class="line">Speech.Recognition.HMM.train()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Speech.Recognition <span class="keyword">import</span> HMM</span><br><span class="line">HMM.train()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Speech.Recognition.HMM <span class="keyword">import</span> train</span><br><span class="line">train()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Taking everything from the module. It can be used without the module's name</span></span><br><span class="line"><span class="keyword">from</span> Speech.Recognition.HMM <span class="keyword">import</span> *</span><br><span class="line">train()</span><br><span class="line">loadModel()</span><br><span class="line">saveModel()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Package&quot;&gt;&lt;a href=&quot;#Package&quot; class=&quot;headerlink&quot; title=&quot;Package&quot;&gt;&lt;/a&gt;Package&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Structure gathering many modules in one dire
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python 패키지</title>
    <link href="http://bongbooski.github.io/2018/04/15/post20-python-package/"/>
    <id>http://bongbooski.github.io/2018/04/15/post20-python-package/</id>
    <published>2018-04-15T06:48:23.000Z</published>
    <updated>2018-04-17T13:44:32.128Z</updated>
    
    <content type="html"><![CDATA[<h1 id="패키지-Package"><a href="#패키지-Package" class="headerlink" title="패키지(Package)"></a>패키지(Package)</h1><ul><li>여러 모듈들을 한데 묶어서 정리해 놓은 구조</li><li>물리적으로 여러 모듈 파일을 모아 놓은 디렉토리에 해당<ul><li>최상위 디렉토리 이름이 패키지 이름이 된다.</li><li>최상위 디렉토리 하위에 여러 서브 디렉토리는 해당 최상위패키지의 하위 패키지가 된다.</li><li>모듈=파일, 패키지=디렉토리</li></ul></li></ul><hr><h2 id="init-py의-역할"><a href="#init-py의-역할" class="headerlink" title="__init__.py의 역할"></a><code>__init__.py</code>의 역할</h2><ul><li>디렉토리를 패키지로 인식시키는 역할</li><li>서브 패키지에도 패키지와 마찬가지로 필요(없으면 단순 폴더역할)</li></ul><hr><h2 id="import하기"><a href="#import하기" class="headerlink" title="import하기"></a>import하기</h2>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Speech</span><br></pre></td></tr></table></figure><ul><li><code>Speech</code>디렉토리가 <code>sys.path</code>(또는 <code>PYTHONPATH</code>환경변수)에 열거된 폴더 중 하나에 위치해야함</li><li><code>Speech/Recognition/HMM.py</code>코드 내용<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">"Train"</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadModel</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">"LoadModel"</span></span><br><span class="line">  <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">saveModel</span><span class="params">()</span>:</span></span><br><span class="line">  <span class="keyword">print</span> <span class="string">"SaveModel"</span></span><br><span class="line">  <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="특정-함수-사용하는-방법"><a href="#특정-함수-사용하는-방법" class="headerlink" title="특정 함수 사용하는 방법"></a>특정 함수 사용하는 방법</h3>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 사용불가. 패키지명에서 .으로 특정 모듈, 함수 가져와야함</span></span><br><span class="line"><span class="keyword">import</span> Speech</span><br><span class="line">Speech.Recognition.HMM.train()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 적절한 방법</span></span><br><span class="line"><span class="keyword">import</span> Speech.Recognition.HMM</span><br><span class="line">Speech.Recognition.HMM.train()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Speech.Recognition <span class="keyword">import</span> HMM</span><br><span class="line">HMM.train()</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Speech.Recognition.HMM <span class="keyword">import</span> train</span><br><span class="line">train()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 모듈 내의 변수 전부 다 가져옴, 모듈이름 없이 사용가능</span></span><br><span class="line"><span class="keyword">from</span> Speech.Recognition.HMM <span class="keyword">import</span> *</span><br><span class="line">train()</span><br><span class="line">loadModel()</span><br><span class="line">saveModel()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;패키지-Package&quot;&gt;&lt;a href=&quot;#패키지-Package&quot; class=&quot;headerlink&quot; title=&quot;패키지(Package)&quot;&gt;&lt;/a&gt;패키지(Package)&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;여러 모듈들을 한데 묶어서 정리해 놓은 구조&lt;/
      
    
    </summary>
    
    
      <category term="python" scheme="http://bongbooski.github.io/tags/python/"/>
    
  </entry>
  
</feed>
